;;; Automatically generated on Fri Feb 14 09:03:27 2014
;;; Invoked by k-ohsugi@VAIO using 24.3.1
(setq-default kill-ring '(#("近年，新たなネットワークアーキテクチャの一つとして， CCN
(Content-Centric Networking) が注目されている． CCN では，ネットワーク
上の各 CCN ルータが，中継したコンテンツをキャッシュし，次に同じコンテン
ツの要求が来た際に再利用を行う． CCN ルータを仮想化することにより，単一
の CCN ネットワーク 上で，論理的に独立した複数の仮想ネットワーク (VCCN
スライス) を構築することが可能となる． VCCN スライスを構成する VCCN ルー
タに対して， CCN ルータの資源をどのように割り当てるかによって，ネットワー
ク性能が大きく変化する．そこで，各 VCCN ルータへのコンテンツの割り当て
方式および各スライスにおけるコンテンツ要求パターンが，ネットワーク全体
の性能および各スライス間の公平性に与える影響を解析的に明らかにする．
" 0 398 (fontified t)) #("こ" 0 1 (fontified t)) #("の性質は，社会人" 0 4 (fontified t) 4 8 (fontified t)) #("
す．" 0 1 (fontified t org-category #1="es") 1 2 (org-category #1# fontified t) 2 3 (fontified t)) #("基本的に怠惰な" 0 7 (fontified t)) #("初対面の人と話をするのがあまり得意ではなく，" 0 21 (fontified t) 21 22 (fontified t)) #("目標達成に向けて努力する行動力や向上心です．" 0 21 (fontified t org-category "es") 21 22 (fontified t)) #("を持った時に全力でその目標に向かって努力
する実行力です．この能力は" 0 4 (fontified t org-category #1="es") 4 20 (fontified t org-category #1#) 20 21 (fontified t org-category #1#) 21 28 (org-category #1# fontified t) 28 34 (org-category #1# fontified t)) #("私のセールスポイントは，自身の長所を生かしや短所" 0 11 (fontified t) 11 24 (fontified t)) #("それを" 0 3 (fontified t)) #("とです．" 0 3 (fontified t) 3 4 (fontified t)) #("改善するこ
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) #("様々なことに興味を持つ好奇心の強さです．" 0 19 (fontified t) 19 20 (fontified t)) #("色々なことに挑戦する行動力です．" 0 15 (fontified t) 15 16 (fontified t)) #("
" 0 1 (fontified t)) #("好奇心の強さです．小学生では，珠算・書道・サッカー
私の好奇心の強さは，貴社のに必ず貢献できると思います．" 0 25 (fontified t) 25 26 (fontified t) 26 53 (fontified t)) #("に" 0 1 (fontified t)) #("どのようなコンテンツ要求パターンの時には，どのように VCCN ルー
タへコンテンツストアを割り当てればよいかを明らかにする．" 0 34 (fontified t) 34 35 (fontified t) 35 63 (fontified t)) #("  

" 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) "データセントリックネットワークアーキテクチャの一つとして，コンテンツの
識別子をもとにパケットのルーティングを行う CCN (Content-Centric
Networking) が提案されている． CCN では，すべてのコンテンツにそれぞれ固
有の識別子が割り当てられている．利用者からの要求パケットはコンテンツ識
別子の最長一致検索によって CCN ルータ間をルーティングされ，コンテンツの
探索が行われる．発見されたコンテンツは，データパケットとして，要求パケッ
トの経路を逆に辿ることによって利用者に届けられる． CCN では，ネットワー
ク中の各 CCN ルータが中継するコンテンツをキャッシュすることで，ネットワー
クレベルでのデータの再利用を実現している． CCN では，ネットワーク中の各
CCN ルータがコンテンツストアと呼ばれるキャッシュメモリを有しており，中
継したデータパケットをバッファメモリ内にキャッシュする． CCN ルータは，
同一のコンテンツに対する要求を受信した時には，キャッシュされたデータパ
ケットを返送することによって，コンテンツ配送遅延やネットワーク上のトラ
ヒック量の削減が可能となる． CCN ルータを仮想化することにより，単一の
CCN 上で，論理的に独立した複数の仮想ネットワーク (VCCN スライス) を構築
することが可能となる． CCN ルータ上に，複数の仮想 CCN ルータ (VCCN ルー
タ) を動作させ，物理的に隣接しない複数の VCCN ルータを論理的に接続する
ことによって， VCCN スライスが構築される． VCCN スライスを構成する
VCCN ルータに対して， CCN ルータの資源 (コンテンツストア) をどのように
割り当てるかによって，各 VCCN スライスおよびネットワーク全体の性能が大
きく変化する． CCN において，データの再利用の効果は，コンテンツストアに
キャッシュされるコンテンツに対する要求パケットの到着レートおよびコンテ
ンツストアのサイズに大きく依存する．コンテンツストアにキャッシュされる
コンテンツに対する要求パケットの到着レートは，コンテンツストアを他の
VCCN ルータと共有するか否かで変化するため， VCCN ルータに対して，どれだ
けのコンテンツストアをどのように割り当てるかがネットワーク性能に影響を
与える．そこで，各 VCCN ルータへのコンテンツストア割り当て方法および各
VCCN スライスにおけるコンテンツ要求パターンをさまざまに変化させた時の解
析を行い，どのようなコンテンツ要求パターンの時には，どのように VCCN ルー
タへコンテンツストアを割り当てればよいかを明らかにする．
" #("** 
" 0 1 (face org-level-2 org-category #1="PR" fontified t) 1 3 (face org-level-2 org-category #1# fontified t) 3 4 (org-category #1# fontified t)) #("** 1 分 (300 字)" 0 1 (fontified t face org-level-2) 1 3 (fontified t face org-level-2) 3 14 (fontified t face org-level-2)) #("** 自己 PR
" 0 1 (face org-level-2 fontified t) 1 3 (face org-level-2 fontified t) 3 4 (face org-level-2 fontified t) 4 5 (face org-level-2 fontified t) 5 6 (face org-level-2 fontified t) 6 7 (face org-level-2 fontified t) 7 8 (face org-level-2 fontified t) 8 9 (fontified t)) #("

" 0 1 (fontified t) 1 2 (fontified t)) "あなたが最も達成感を感じた出来事とその理由を具体的にお書きください。
（全角400文字以内） " "◆上記の内容を実現するにあたり、コンサルタント、特にシグマクシスを志望する理由をお書きください。
（全角400文字以内） " "◆あなたがなりたいと思い描いている近い将来（5-10年後）のご自身の姿はどのようなものですか。
（全角400文字以内）" #("|            |            |                                                      |
" 0 82 (fontified t face org-table) 82 83 (fontified t)) "フューチャーアーキテクト" #("|                            |                                                          |
" 0 30 (fontified t face org-table) 30 89 (fontified t org-category "company_info" face org-table) 89 90 (fontified t)) #("| Panasonic  |                                                          |

" 0 73 (face org-table fontified t) 73 74 (fontified t) 74 75 (fontified t)) #("| ソニー     |                                                          | " 0 70 (face org-table fontified t) 70 71 (fontified t)) #("考えたからです．" 0 7 (fontified t) 7 8 (fontified t)) "% Created 2014-02-04 Tue 23:58
\\documentclass{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
% \\usepackage{pxjahyper}
 \\usepackage[dvipdfmx,unicode=true,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{bookmark}
 \\usepackage{url}
\\date{\\today}
\\title{es}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.5h)}}
\\begin{document}

\\maketitle
\\tableofcontents

\\section{過去 3 年以内で 1 番力を入れて取り組んだ学習内容のテーマを教えてください． 50 (文字  /  letter) (以内  /  Within)}
\\label{sec-1}
\\begin{itemize}
\\item 次世代ネットワークアーキテクチャ (CCN)
\\end{itemize}

\\section{上記の具体的な内容を記入してください． 100 (文字  /  letter) (以内  /  Within)}
\\label{sec-2}
\\begin{itemize}
\\item CCN は，現在のインターネットの中心的な役割を果たしている TCP/IP プロ
トコル を置き換えるものとして注目されているネットワークアーキテク
チャです．
\\end{itemize}

\\section{当社へご応募いただけた理由を教えてください． 150 (文字  /  letter) (以内  /  Within)}
\\label{sec-3}
\\begin{itemize}
\\item 私は，貴社の
\\end{itemize}

\\section{カプコンに入社したらどのような仕事をしたいか教えてください． 150 (文字  /  letter) (以内  /  Within)}
\\label{sec-4}
\\begin{itemize}
\\item 
\\end{itemize}

\\section{あなたの強みを教えてください． 150 (文字  /  letter) (以内  /  Within)}
\\label{sec-5}
\\begin{itemize}
\\item 私の強みは，好奇心が強いことです．
\\end{itemize}
% Emacs 24.3.1 (Org mode 8.2.5h)
\\end{document}" #("として" 0 3 (fontified t)) #("注目されてい" 0 6 (fontified t)) #("ま
    す．" 0 1 (fontified t) 1 2 (fontified t) 2 7 (fontified t) 7 8 (fontified t)) #("Content-Centric-Networking)" 0 27 (fontified t)) #("IP に置き換えることを" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 12 (fontified t)) #("
" 0 1 (org-category "es" fontified t)) "あなたの強みを教えてください。 150 (文字　/　letter)(以内　/　Within)" "カプコンに入社したらどのような仕事をしたいか教えてください。
　　　 150 (文字　/　letter)(以内　/　Within)" " 当社へご応募いただけた理由を教えてください。
　　　 150 (文字　/　letter)(以内　/　Within)" "上記の具体的な内容を記入してください。 100 (文字　/　letter)(以内　/　Within)" "過去3年以内で1番力を入れて取り組んだ学習内容のテーマを教えてください。
　　　　　　 50 (文字　/　letter)(以内　/　Within)" #("過去3年以内で1番力を入れて取り組んだ学習内容のテーマを教えてください。" 0 35 (face org-level-1 fontified t) 35 36 (face org-level-1 rear-nonsticky t fontified t)) "過去3年以内で1番力を入れて取り組んだ学習内容のテーマを教えてください。"))
(setq-default session-file-alist '(("/mnt/Dropbox/job_hunting/ALL/resarch_introduction.org" 407 9 1 nil nil 5 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 13870 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/url/cookies" 507 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/job_hunting/HITACHI/es.org" 1494 8 1 nil nil 1257 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/ALL/PR.org" 341 nil 1 nil nil 341 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/ALL/MyPR.txt" 3 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/job_hunting/SIGMAXYZ/es.org" 67 134 1 nil nil 67 (overwrite-mode)) ("/mnt/Dropbox/etc/company_information/company_info.org" 2982 3131 1 nil nil 2954 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/CAPCOM/es.org" 544 318 1 nil nil 469 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/CAPCOM/es.tex" 1234 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140204.533/helm-autoloads.el" 44444 nil 1 nil nil 44444 (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/report.org" 157 1820 1 nil nil 157 (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/report.bib" 703 701 1 nil nil 703 (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/report.tex" 29 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140204.23/helm-autoloads.el" 44452 nil 1 nil nil 44452 (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report8/report8.org" 1176 1126 1 nil nil 1052 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140203.2259/helm-autoloads.el" 44449 nil 1 nil nil 44449 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140203.848/helm-autoloads.el" 44452 nil 1 nil nil 44452 (overwrite-mode)) ("~/カプコン.txt" 1 nil 1 nil nil 1 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/HITACHI/es.tex" 895 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140203/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140203.402/helm-autoloads.el" 44451 nil 1 nil nil 44451 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140203/org-autoloads.el" 27238 nil 1 nil nil 27238 (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report8/report8.tex" 1443 1443 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report8/report8.bib" 272 231 1 nil nil 272 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/30_auctex.el" 1 736 1 nil nil 736 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/20_org-mode.el" 394 374 1 nil nil 489 (overwrite-mode)) ("/sudo:root@localhost:/usr/share/texmf-dist/tex/uplatex/base/ujarticle.cls" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report6/report6.org" 364 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report7/report7.org" 1 nil 1 nil nil 603 (overwrite-mode)) ("/mnt/Dropbox/class/basic_network/report6/report6.org" 532 nil 1 nil nil 19 (overwrite-mode)) ("/sudo:root@localhost:/usr/share/texmf-dist/tex/platex/jsclasses/jsarticle.cls" 6877 641 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report6/report6.bib" 1 nil 1 nil nil 113 (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report6/report6.tex" 1617 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/class/network_seminar2/report.org" 157 nil 1 nil nil 157 (overwrite-mode)) ("~/Dropbox/job_hunting/HITACHI/es.org" 3 nil 1 nil nil 222 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 12904 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/class/network_seminar2/report.tex" 2529 nil 1 nil nil nil (overwrite-mode)) ("~/Downloads/質疑応答.txt" 41 16 1 nil nil 581 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/ALL/resarch_introduction.txt" 1 1163 1 nil nil 1132 (overwrite-mode))))
(setq-default file-name-history '("~/Dropbox/job_hunting/ALL/resarch_introduction.org" "~/Dropbox/job_hunting/HITACHI/es.org" "~/Dropbox/job_hunting/ALL/PR.org" "~/Dropbox/job_hunting/ALL/MyPR.txt" "~/Dropbox/job_hunting/SIGMAXYZ/es.org" "~/Dropbox/job_hunting/SIGMAXYZ" "~/Dropbox/job_hunting/" "~/Dropbox/etc/company_information/company_info.org" "~/Dropbox/job_hunting/CAPCOM/es.org" "~/.emacs.d/elpa/helm-20140204.533/helm-autoloads.el" "~/Dropbox/class/network_seminar2/report.tex" "~/Dropbox/class/network_seminar2/report.bib" "~/Dropbox/class/network_seminar2/report.org" "~/.emacs.d/elpa/helm-20140204.23/helm-autoloads.el" "~/Dropbox/class/mobile_protocol/report8/report8.org" "~/.emacs.d/elpa/helm-20140203.2259/helm-autoloads.el" "~/.emacs.d/elpa/helm-20140203.848/helm-autoloads.el" "~/Dropbox/job_hunting/CAPCOM" "/home/k-ohsugi/カプコン.txt"))
(setq-default TeX-command-history '("Clean All" "LatexMk" "Evince" "Latexmk-pdfupLaTeX" "LaTeX" "BibTeX" "Acroread"))
(setq-default bibtex-key-history '("matsuishi" "green" "nttpc" "lever12:_fi" "somusho19" "zojirushi" "政策統括官（共生社会政策担当）13" "tsuda13"))
(setq-default buffer-name-history '("jsarticle.cls" "*new snippet*" "*Moccur*" "ac-math.el" "*Backtrace*" "131224_all_meeting.rip" "comic-list.org" "*init log*" "*Org Src 131216_M1_meeting.org[ python ]*" "*scratch*" "*Org Table Edit Field*" "131216_M1_meeting.html"))
(setq-default command-history '((find-file "~/Dropbox/job_hunting/ALL/resarch_introduction.org" t) (find-file "~/Dropbox/job_hunting/ALL/PR.org" t) (find-file "~/Dropbox/job_hunting/ALL/MyPR.txt" t) (find-file "~/Dropbox/job_hunting/SIGMAXYZ/es.org" t) (dired-create-directory "~/Dropbox/job_hunting/SIGMAXYZ") (find-file "~/Dropbox/job_hunting/" t) (query-replace "元" "源" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (find-file "~/Dropbox/class/network_seminar2/report.tex" t) (find-file "~/Dropbox/class/network_seminar2/report.bib" t) (find-file "~/Dropbox/job_hunting/CAPCOM/es.org" t) (dired-create-directory "~/Dropbox/job_hunting/CAPCOM") (find-file "~/Dropbox/job_hunting/HITACHI/es.org" t) (kill-buffer "jsarticle.cls") (find-file "~/Dropbox/class/mobile_protocol/report8/report8.tex" t) (write-file "~/Dropbox/class/mobile_protocol/report8/report8.bib" t) (find-file "~/Dropbox/class/mobile_protocol/report7/report7.bib" t) (find-file "~/Downloads/質疑応答.txt" t) (find-file "~/Dropbox/class/network_seminar2/report.org" t) (find-file "~/Dropbox/job_hunting/ALL/resarch_introduction.txt" t) (kill-buffer "*new snippet*") (find-file "~/.emacs.d/inits/" t) (find-file "~/.emacs.d/inits/10_helm.el" t) (package-list-packages nil) (execute-extended-command nil "package-list-packages") (find-file "~/Dropbox/class/mobile_protocol/report6/report6.org" t) (find-file "~/Dropbox/class/mobile_protocol/" t)))
(setq-default extended-command-history '("package-list-packages" "text-adjust" "auto-insert-mode" "count-lines-region" "eval-buffer" "ispell-buffer" "ispell-minor-mode" "flyspell-mode" "elp-results" "moccur-grep" "count-words-region" "org-display-inline-images" "org-toggle-inline-images" "org-redisplay-inline-images" "org-edit-src-code" "describe-key" "org-src-mode" "org-version" "pascal-mode"))
(setq-default helm-c-grep-history '("interest" "yasnippet" "k-ohsugi" "wpa_pass" "wpa_passp" "icon"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . previous-line) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-grep-history '("interest" "yasnippet" "k-ohsugi" "wpa_pass" "wpa_passp" "icon"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . previous-line) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("pa"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("源" "元" "サーバ" "サーバー" "ルータ" "ルーター" "CCN" "ICN" "right" "left" "right_wibox" "left_graphbox" "face" "Face"))
(setq-default read-expression-history '("ac-sources"))
(setq-default regexp-history '("noncq" "volicon" "cpupct" "/etc/acpi/"))
(setq-default search-ring '("利用" "元" "uplatex" "yasnippet" "helm-c" "helm-c-ya" "helm-c	" "を" "ルーター" "サーバー" "scrip" "seq" "data" "端末" "ユーザ" "到着するように"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
