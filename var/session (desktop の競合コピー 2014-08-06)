;;; Automatically generated on Wed Aug  6 19:37:40 2014
;;; Invoked by corgi@desktop using 24.3.1
(setq-default kill-ring '(#("示している．" 0 5 (fontified t) 5 6 (fontified t)) #("図\\ref{fig:pcpu}は，" 0 1 (fontified t) 1 2 (face #1=(font-lock-keyword-face font-latex-sedate-face) fontified t) 2 5 (face #1# fontified t) 5 6 (fontified t) 6 14 (face (font-lock-constant-face) fontified t) 14 16 (fontified t) 16 17 (fontified t)) #("入力 Interest パケットレート
が 6756.76[packet/s] の時は， CPU 利用率が約 25.7\\%であるが，この段階で
すでに CPU コアは，最大負荷時の約 90\\%の電力を消費している．


\\begin{figure}[tb]
  \\centering
  \\includegraphics[scale=0.6]{./figure/cpu_various_load.eps}
  \\caption{負荷を変化させた時の CPU コアの消費電力}
  \\label{fig:cpu_various}
\\end{figure}


次に，アクティブな CPU コアの数が 1 ， 2 ， 3 ， 4 個のときの消費電力
を測定した．図\\ref{fig:pcpu}" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 19 (fontified t) 19 20 (fontified t) 20 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 71 (fontified t) 71 72 (fontified t) 72 86 (fontified t) 86 87 (fontified t) 87 106 (fontified t) 106 107 (fontified t rear-nonsticky t) 107 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 116 (face (font-lock-keyword-face font-latex-sedate-face) fontified t) 116 117 (fontified t) 117 123 (face (font-lock-function-name-face) fontified t) 123 131 (fontified t) 131 141 (face (font-lock-keyword-face font-latex-sedate-face) fontified t) 141 142 (fontified t) 142 144 (fontified t) 144 160 (face (font-latex-sedate-face) fontified t) 160 172 (fontified t) 172 201 (fontified t) 201 203 (fontified t) 203 205 (fontified t) 205 213 (face (font-lock-keyword-face font-latex-sedate-face) fontified t) 213 214 (fontified t) 214 235 (face #1=(font-lock-type-face) fontified t) 235 236 (face #1# fontified t rear-nonsticky t) 236 238 (fontified t) 238 240 (fontified t) 240 246 (face (font-lock-keyword-face font-latex-sedate-face) fontified t) 246 247 (fontified t) 247 262 (face (font-lock-constant-face) fontified t) 262 264 (fontified t) 264 265 (face #2=(font-lock-keyword-face font-latex-sedate-face) fontified t) 265 268 (face #2# fontified t) 268 269 (fontified t) 269 275 (face (font-lock-function-name-face) fontified t) 275 277 (fontified t) 277 278 (fontified t) 278 279 (fontified t) 279 281 (fontified t) 281 287 (fontified t) 287 288 (fontified t) 288 289 (fontified t) 289 290 (fontified t) 290 291 (fontified t) 291 292 (fontified t) 292 293 (fontified t) 293 294 (fontified t) 294 298 (fontified t) 298 299 (fontified t) 299 300 (fontified t) 300 301 (fontified t) 301 302 (fontified t) 302 303 (fontified t) 303 304 (fontified t) 304 305 (fontified t) 305 306 (fontified t) 306 307 (fontified t) 307 308 (fontified t) 308 309 (fontified t) 309 310 (fontified t) 310 311 (fontified t) 311 312 (fontified t) 312 313 (fontified t) 313 314 (fontified t) 314 323 (fontified t) 323 328 (fontified t) 328 330 (fontified t) 330 331 (face #3=(font-lock-keyword-face font-latex-sedate-face) fontified t) 331 334 (face #3# fontified t) 334 335 (fontified t) 335 343 (face (font-lock-constant-face) fontified t) 343 344 (fontified t)) #(" " 0 1 (fontified t)) #("CPU コアが" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 7 (fontified t)) #("利用率" 0 3 (fontified t)) #("1 つの CPU コアは，" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 12 (fontified t) 12 13 (fontified t)) #("入力レート
が 6756.76[packet/s] の時は， CPU 利用率が約 25.7\\%であるが，この段階で
すでに CPU コアは，最大負荷時の約 90\\%の電力を消費している．" 0 93 (fontified t)) #("次のような考え
から，" 0 8 (fontified t) 8 10 (fontified t) 10 11 (fontified t)) #("図\\re" 0 1 (fontified t) 1 2 (face #1=(font-latex-sedate-face) fontified t) 2 4 (face #1# fontified t)) #("(\\ref{fig:cpu_various}の青の点線)" 0 1 (fontified t) 1 2 (face #2=(font-lock-keyword-face font-latex-sedate-face) fontified t) 2 5 (face #2# fontified t) 5 6 (fontified t) 6 10 (face #1=(font-lock-constant-face) fontified t) 10 14 (face #1# fontified t) 14 21 (face #1# fontified t) 21 27 (fontified t) 27 28 (fontified t)) #("表している．" 0 5 (fontified t) 5 6 (fontified t)) #("する" 0 2 (fontified t)) #(" m" 0 1 (fontified t) 1 2 (fontified t)) #("負荷を変化させた時の CPU コアの消費電力" 0 22 (face (font-lock-variable-name-face) font-lock-multiline t fontified t)) #("
" 0 1 (fontified t)) #("

" 0 1 (fontified t) 1 2 (fontified t)) #("処理は，" 0 3 (fontified t) 3 4 (fontified t)) #("%%% Local Variables: 
%%% mode: latex
%%% TeX-master: \"paper\"
%%% End: 
" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 22 (face font-lock-comment-face fontified t) 22 26 (face font-lock-comment-delimiter-face fontified t) 26 38 (face font-lock-comment-face fontified t) 38 42 (face font-lock-comment-delimiter-face fontified t) 42 62 (face font-lock-comment-face fontified t) 62 66 (face font-lock-comment-delimiter-face fontified t) 66 72 (face font-lock-comment-face fontified t)) #("た．" 0 1 (fontified t) 1 2 (fontified t)) #("図\\ref{fig:hoge}に示すように，
" 0 1 (fontified t) 1 2 (fontified t face #1=(font-lock-keyword-face font-latex-sedate-face)) 2 5 (fontified t face #1#) 5 6 (fontified t) 6 14 (fontified t face (font-lock-constant-face)) 14 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t)) #("割り当ていない" 0 7 (fontified t)) #("ための" 0 2 (fontified t) 2 3 (rear-nonsticky t fontified t)) #("各グループに異なる名前を割り当てるための" 0 1 (fontified t) 1 20 (fontified t)) #("\\label{sec:introduction}" 0 6 (face (font-lock-keyword-face font-latex-sedate-face) fontified t) 6 7 (fontified t) 7 23 (face (font-lock-constant-face) fontified t) 23 24 (fontified t)) #("\\label{sec:architecture}" 0 1 (face #1=(font-lock-keyword-face font-latex-sedate-face) fontified t) 1 6 (face #1# fontified t) 6 7 (fontified t) 7 11 (face #2=(font-lock-constant-face) fontified t) 11 23 (face #2# fontified t) 23 24 (fontified t)) #("本稿では，" 0 4 (fontified t) 4 5 (fontified t)) #("タの電力消費モデルの第一歩として， " 0 10 (fontified t) 10 12 (fontified t) 12 15 (fontified t) 15 18 (fontified t)) #("できる ICN ルー" 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) #("ルーティングソフトウェアの実装方法を問わず適" 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t) 6 8 (fontified t) 8 11 (fontified t) 11 14 (fontified t) 14 21 (fontified t) 21 22 (fontified t)) #("や ICN " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) #("ハードウェアプラットフォー
" 0 13 (fontified t) 13 14 (fontified t)) #("本稿では，ハードウェアプラットフォーム，および NDN の実装方法を問わずに
利用可能な電力消費モデルの第一歩として， PC 上で NDNx を動作させたルー" 0 4 (fontified t) 4 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 79 (fontified t)) #("本稿では，汎用性が高く，ハードウェアプラットフォームや ICN のルーティン
グソフトウェアの実装方法を問わず適応できる ICN ルータの電力消費モデルの
第一歩として， NDNx/CCNx[XX] を PC プラットフォーム上で動作させたルータ
を対象とした電力消費モデルを作成した．" 0 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 42 (fontified t) 42 45 (fontified t) 45 48 (fontified t) 48 55 (fontified t) 55 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t) 66 77 (fontified t) 77 78 (fontified t) 78 80 (fontified t) 80 83 (fontified t) 83 94 (fontified t) 94 99 (fontified t) 99 100 (fontified t) 100 101 (fontified t) 101 104 (fontified t) 104 105 (fontified t) 105 108 (fontified t) 108 123 (fontified t) 123 124 (fontified t) 124 126 (fontified t) 126 129 (fontified t) 129 131 (fontified t) 131 138 (fontified t) 138 141 (fontified t) 141 143 (fontified t)) #("本稿では，モデル化対象のハードウェアプラットフォームに PC を選択する．" 0 37 (fontified t)) #("So" 0 1 (fontified t) 1 2 (fontified t)) #("最小二乗法により求める．" 0 12 (fontified t)) #("ォワーディン
グレート" 0 6 (fontified t) 6 7 (fontified t) 7 11 (fontified t)) #("figure" 0 6 (fontified t)) #("に
なるよう" 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t)) #("る。" 0 1 (fontified t) 1 2 (fontified t)) "k-ohsugi/Dropbox/research/work/IN14-9/" "" "/home/k-ohsugi/Dropbox/research/work/IN14-9/"))
(setq-default session-file-alist '(("/mnt/Dropbox/research/work/IN14-9/architecture.tex" 1683 2 1 nil nil 2053 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/paper.tex" 401 401 1 nil nil 402 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/model.tex" 3122 2967 1 nil nil 3122 (overwrite-mode)) ("/mnt/Dropbox/storage/scfes.org" 19 nil 1 nil nil 27 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/introduction.tex" 114 90 1 nil nil 1231 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/title.tex" 1143 nil 1 nil nil 846 (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paperv1.0.tex" 3987 3965 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 12168 nil 1 nil nil nil (overwrite-mode))))
(setq-default LaTeX-environment-history '("equation"))
(setq-default TeX-command-history '("LatexMk" "Evince" "LaTeX" "Clean All"))
(setq-default buffer-name-history '("*~/Dropbox/research/work/IN14-9/model output*" "model.tex<k-ohsugi>" "*Completions*" "*~/Dropbox/research/work/IN14-9/paper output*" "IN14" "*~/Dropbox/research/work/IN14/paper output*" "ICN-meeting.org" "*Backtrace*" "ieicejsp.cls" "report8.org" "udp1500byte.gp" "memory_accsess.dat" "*scratch*" "*Async Shell Command*" "ssh:get_ccnx_time.sh" "*gnuplot*" "udp1500byte.out" "*Moccur*" "*Org PDF LaTeX Output*" "__init__.py" "functions.py" "PKGBUILD" "ssh:hoge.c" "forwarding.c" "dummy.c" "256result.data" "ssh:receive.c" "ssh:ssh:ssh:send.c<client1>" "router" "rdtsc.h" "*Packages*" "*Macroexpansion*" "2-13 Daring!!.mp3" "20_org-mode.el" "hote.txt" "es.org" "*init log*"))
(setq-default coding-system-history '("shift_jis" "utf-8-unix" "unix"))
(setq-default command-history '((find-file "~/Dropbox/research/work/IN14-9/paper.tex" t) (find-file "~/Dropbox/research/work/IN14-9/model.tex" t) (find-file "~/Dropbox/research/work/IN14-9/architecture.tex" t) (find-file "~/Dropbox/research/work/IN14-9/introduction.tex" t) (find-file "~/Dropbox/research/work/IN14-9/title.tex" t) (kill-buffer "*~/Dropbox/research/work/IN14-9/model output*") (kill-buffer "model.tex<k-ohsugi>") (find-file "/home/corgi/Dropbox/research/work/IN14-9/model.tex" t)))
(setq-default extended-command-history '("count-lines-region" "package-list-packages" "ispell-buffer" "eval-buffer" "yas-expand-from-trigger-key" "moccur-grep" "describe-variable" "describe-function" "auto-complete-mode" "describe-mode" "Buffer-menu-mode" "describe-key" "eval-defun" "pascal-mode"))
(setq-default helm-c-grep-history '("valid-file" "filename"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . keyboard-quit) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-ff-history '("/home/k-ohsugi/Dropbox/research/work/" "/home/k-ohsugi/" "/mnt/Dropbox/.dropbox.cache/" "/mnt/Dropbox/configure/.emacs.d/inits/" "/mnt/Dropbox/research/meeting/" "/mnt/Dropbox/research/work/society14/" "/mnt/Dropbox/storage/" "/home/corgi/Dropbox/storage/" "/home/corgi/" "/mnt/Dropbox/" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/" "/home/k-ohsugi/Dropbox/meeting/withHasegawa/GreenICN/utils/"))
(setq-default helm-grep-history '("valid-file" "filename"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-comint-input-ring '((name . "Comint history") (candidates lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) (action . helm-comint-input-ring-action)))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . keyboard-quit) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("tex" "soci" "sc" "pa" "Latexmk" "****" "evince paper.pdf" "-------" "arc" "evince model.pdf" #("測定の結果，式" 0 7 (fontified t))))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("20" "15" "screen.count ()" "2" "time -p" "time" "3s" "10s" "${SIZE}" "1GB" "\"" "'" "NAME" "NAME1" "10MB" "1MB" "1024" "4096" "68" "204" "819" "COUNT" "NPARA" "50000" "10000" "45" "50" "research_2014_group_001-ccn.pdf" "research_group_001-icn.pdf" "M1" "B4" "M" "M2" "Master" "Doctor" "D3" "./figure/" "./"))
(setq-default regexp-history '("block" "blocksize"))
(setq-default search-ring '("mu" "hirei" "比例" "P" "label" "eq" "ip" "hukuzatu" "アーキテクチャに" "
\\end" "acc" "ここで" "値" "bfast" "regi" "geo"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("'" "4096"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
