;;; Automatically generated on Sun Mar 30 19:01:43 2014
;;; Invoked by k-ohsugi@localhost using 24.3.1
(setq-default kill-ring '(#("	" 0 1 (fontified t)) "setopt correct
" "XoFyBzUH" "Dg2iUdcK" "javascript: (function(){
  var userid = '***USERID***';
  var pass = '***PASS***';

  var authURI;
  var domain = document.domain.substring(document.domain.length - 9);

  if(domain == 'wi2.ne.jp'){
    var de = document.documentElement.innerHTML;
    if(de.indexOf('WISPAccessGatewayParam') < de.indexOf('LoginURL')){
      authURI = de.split('LoginURL')[1].replace(/(^\\s+)|(\\s+$)|(<)|(>)|(\\/$)/g, '');
    }else{
      return;
    }
  }else if(domain == '.kddi.com'){
    authURI = 'https://' + location.host + '/smartlogin';
  }else{
    return;
  }

  if(userid.substr(userid.length - 3) != '@au'){userid += '@au';}
  var ce = function(en, ev){
    var inp = document.createElement('input');
    inp.type = 'hidden';
    inp.name = en;
    inp.value = ev;
    return inp;
  };
  var f = document.createElement('form');
  with(f){
    method = 'post';
    action = authURI;
    id = 'authBookmarkletForm';
    appendChild(ce('UserName', userid));
    appendChild(ce('Password', pass));
  }

  document.body.appendChild(f);
  document.getElementById('authBookmarkletForm').submit();

}())" "% Created 2014-03-28 金 00:05
\\documentclass[dvipdfmx,12pt]{beamer}
\\usepackage{url}
\\usepackage{pxjahyper}
\\usetheme{Berlin}
\\setbeamertemplate{navigation symbols}{}
\\beamertemplatetextbibitems
\\setbeamertemplate{footline}[frame number]
\\setbeamertemplate{headline}{}


\\institute[]{大阪大学大学院情報科学研究科\\\\
            情報ネットワーク学専攻\\\\
            情報流通プラットフォーム講座 長谷川研究室 M1}
\\usetheme{default}
\\author{大杉 海斗}
\\date{\\today}
\\title{自己アピールプレゼンテーション}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.5h)}}
\\begin{document}

\\maketitle

\\section{2015 年 3 月 28 日}
\\label{sec-1}
\\begin{frame}[label=sec-1-1]{自己紹介}
\\begin{itemize}
\\item 名前: 大杉 海斗
\\item 所属: 大阪大学大学院情報科学研究科博士前期課程 1 年
\\item 出身: 兵庫県 (出生地は沖縄県)
\\item 資格: 応用情報技術者・ TOEIC 775 点・珠算 3 級など
\\item 趣味: デジタルガジェット弄り・読書・スポーツなど
\\item 企業選びの軸: 若いうちから大きな裁量を持ち，仕事に責任を持てるこ
と
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-1-2]{研究の紹介}
\\begin{block}{最終的な目標}%x
\\begin{itemize}
\\item 次世代ネットワークアーキテクチャである CCN (Content-Centric
Networking) \\footnote{\\scriptsize\\{V. Jacobson, D. Smetters, J. Thornton, and al. Networking named
content. In Proc. of ACM CoNEXT, 2009.\\}} を用いて，ネットワークの電力消費量を削減するこ
と
\\end{itemize}
\\end{block}

\\begin{block}{私の担当分野}%x
\\begin{itemize}
\\item CCN ルータの電力消費量を推定するモデルを作成すること
\\begin{itemize}
\\item CCN ルータは既存の IP ルータとはテーブル構造などが異なってい
る
\\end{itemize}
\\end{itemize}
\\end{block}
\\end{frame}
\\begin{frame}[label=sec-1-3]{CCN (Content-Centric Networking)}
\\begin{itemize}
\\item ホストではなく，データを主体としたネットワークアーキテクチャ
\\begin{itemize}
\\item すべてのコンテンツに固有の識別子 (名前) が割り当てられている
\\end{itemize}
\\item ネットワーク中の各ルータが中継するコンテンツをキャッシュすること
で，データの再利用を実現している
\\begin{itemize}
\\item キャッシュヒットすれば，トラヒック量を削減でき，それに付随して
データ伝送にかかる電力も削減できる
\\end{itemize}
\\end{itemize}

\\includegraphics[width=.9\\linewidth]{./CCN_example1.eps}
\\end{frame}
\\begin{frame}[label=sec-1-4]{研究以外の学業への取り組み}
\\begin{itemize}
\\item 産学連携のセキュリティ専門家育成カリキュラムに参加
\\begin{itemize}
\\item ARP スプーフィングによる偽 Web サイトへの誘導や Android アプリケー
ションの静的マルウェア解析などを体験
\\end{itemize}
\\end{itemize}

\\centering
\\includegraphics[width=0.7\\linewidth,height=0.5\\textheight]{./seccap.jpg}
\\end{frame}
\\begin{frame}[label=sec-1-5]{学業以外の取り組み (アルバイト)}
\\begin{itemize}
\\item 5 種類のアルバイトを経験
\\begin{itemize}
\\item その中でも，特にフレッツ光の契約スタッフは，いい経験になった
\\begin{itemize}
\\item 自分からお客様に積極的にアプローチしていく必要がある
\\item お客様と PC やインターネットをどのように利用するのかを聞き，
最適だと思われる PC や料金プランを提案することに面白みを感じ
た
\\end{itemize}
\\end{itemize}
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-1-6]{貴社で取り組みたいこと}
\\begin{itemize}
\\item 大学・大学院で学んだ情報に関する知識 (特にネットワークとセキュリティ)
を活かして，お客様にとって最適なソリューションを技術的な観点から提
案していきたい
\\begin{itemize}
\\item 専攻している情報分野を中心にしつつ，様々なことに興味を持つ
私だからこそ，様々な業界のお客様と共に仕事ができると考えており
ます
\\end{itemize}
\\end{itemize}
\\end{frame}
\\begin{frame}[label=sec-1-7]{\\large{御静聴ありがとうございました}}
\\end{frame}
% Emacs 24.3.1 (Org mode 8.2.5h)
\\end{document}" "% Created 2014-03-27 木 23:44
\\documentclass[dvipdfmx,12pt]{beamer}
\\usepackage{url}
\\usepackage{pxjahyper}
\\usetheme{Berlin}
\\setbeamertemplate{navigation symbols}{}
\\beamertemplatetextbibitems
\\setbeamertemplate{footline}[frame number]
\\setbeamertemplate{headline}{}


\\institute[]{大阪大学大学院情報科学研究科\\\\
            情報ネットワーク学専攻\\\\
            情報流通プラットフォーム講座 長谷川研究室 M1}
\\usetheme{default}
\\author{大杉 海斗}
\\date{\\today}
\\title{自己アピールプレゼンテーション}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.5h)}}
\\begin{document}

\\maketitle

\\section{2015 年 3 月 28 日}
\\label{sec-1}
\\begin{frame}[label=sec-1-1]{自己紹介}
\\begin{itemize}
\\item 名前: 大杉 海斗
\\item 所属: 大阪大学大学院情報科学研究科博士前期課程 1 年
\\item 出身: 兵庫県 (出生地は沖縄県)
\\item 資格: 応用情報技術者・ TOEIC 775 点・珠算 3 級など
\\item 趣味: デジタルガジェット弄り・読書・スポーツなど
\\item 企業選びの軸: 若いうちから大きな裁量を持ち，仕事に責任を持てるこ
と
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-1-2]{研究の紹介}
\\begin{block}{最終的な目標}%x
\\begin{itemize}
\\item 次世代ネットワークアーキテクチャである CCN (Content-Centric
Networking) \\footnote{\\scriptsize\\{V. Jacobson, D. Smetters, J. Thornton, and al. Networking named
content. In Proc. of ACM CoNEXT, 2009.\\}} を用いて，ネットワークの電力消費量を削減するこ
と
\\end{itemize}
\\end{block}

\\begin{block}{私の担当分野}%x
\\begin{itemize}
\\item CCN ルータの電力消費量を推定するモデルを作成すること
\\begin{itemize}
\\item CCN ルータは既存の IP ルータとはテーブル構造などが異なってい
る
\\end{itemize}
\\end{itemize}
\\end{block}
\\end{frame}
\\begin{frame}[label=sec-1-3]{CCN (Content-Centric Networking)}
\\begin{itemize}
\\item ホストではなく，データを主体としたネットワークアーキテクチャ
\\begin{itemize}
\\item すべてのコンテンツに固有の識別子 (名前) が割り当てられている
\\end{itemize}
\\item ネットワーク中の各ルータが中継するコンテンツをキャッシュすること
で，データの再利用を実現している
\\begin{itemize}
\\item キャッシュヒットすれば，トラヒック量を削減でき，それに付随して
データ伝送にかかる電力も削減できる
\\end{itemize}
\\end{itemize}

\\includegraphics[width=.9\\linewidth]{./CCN_example1.eps}
\\end{frame}
\\begin{frame}[label=sec-1-4]{研究以外の学業への取り組み}
\\begin{itemize}
\\item 産学連携のセキュリティ専門家育成カリキュラムに参加
\\begin{itemize}
\\item ARP スプーフィングによる偽 Web サイトへの誘導や Android アプリケー
ションの静的マルウェア解析などを体験
\\end{itemize}
\\end{itemize}

\\centering
\\includegraphics[width=0.7\\linewidth,height=0.5\\textheight]{./seccap.jpg}
\\end{frame}
\\begin{frame}[label=sec-1-5]{学業以外の取り組み (アルバイト)}
\\begin{itemize}
\\item 5 種類のアルバイトを経験
\\begin{itemize}
\\item その中でも，特にフレッツ光の契約スタッフは，いい経験になった
\\begin{itemize}
\\item 自分からお客様に積極的にアプローチしていく必要がある
\\item お客様と PC やインターネットをどのように利用するのかを聞き，
最適だと思われる PC や料金プランを提案することに面白みを感じ
た
\\end{itemize}
\\end{itemize}
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-1-6]{貴社で取り組みたいこと}
\\begin{itemize}
\\item 大学・大学院で学んだ情報に関する知識 (特にネットワークとセキュリティ)
を活かして，お客様にとって最適なソリューションを技術的な観点から提
案していきたい
\\begin{itemize}
\\item 専攻している情報分野を中心にしつつ，様々なことに興味を持つ
私だからこそ，様々な業界のお客様と共に仕事ができると考えており
ます
\\end{itemize}
\\end{itemize}
\\end{frame}
\\begin{frame}[label=sec-1-7]{\\large{御静聴ありがとうございました}}
\\end{frame}
% Emacs 24.3.1 (Org mode 8.2.5h)
\\end{document}" "% Created 2014-03-27 木 23:41
\\documentclass[dvipdfmx,12pt]{beamer}
\\usepackage{url}
\\usepackage{pxjahyper}
\\usetheme{Berlin}
\\setbeamertemplate{navigation symbols}{}
\\beamertemplatetextbibitems
\\setbeamertemplate{footline}[frame number]
\\setbeamertemplate{headline}{}


\\institute[]{大阪大学大学院情報科学研究科\\\\
            情報ネットワーク学専攻\\\\
            情報流通プラットフォーム講座 長谷川研究室 M1}
\\usetheme{default}
\\author{大杉 海斗}
\\date{\\today}
\\title{自己アピールプレゼンテーション}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.5h)}}
\\begin{document}

\\maketitle

\\section{2015 年 3 月 28 日}
\\label{sec-1}
\\begin{frame}[label=sec-1-1]{自己紹介}
\\begin{itemize}
\\item 名前: 大杉 海斗
\\item 所属: 大阪大学大学院情報科学研究科博士前期課程 1 年
\\item 出身: 兵庫県 (出生地は沖縄県)
\\item 資格: 応用情報技術者・ TOEIC 775 点・珠算 3 級など
\\item 趣味: デジタルガジェット弄り・読書・スポーツなど
\\item 企業選びの軸: 若いうちから大きな裁量を持ち，仕事に責任を持てるこ
と
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-1-2]{研究の紹介}
\\begin{block}{最終的な目標}%x
\\begin{itemize}
\\item 次世代ネットワークアーキテクチャである CCN (Content-Centric
Networking) \\footnote{\\scriptsize\\{V. Jacobson, D. Smetters, J. Thornton, and al. Networking named
content. In Proc. of ACM CoNEXT, 2009.\\}} を用いて，ネットワークの電力消費量を削減するこ
と
\\end{itemize}
\\end{block}

\\begin{block}{私の担当分野}%x
\\begin{itemize}
\\item CCN ルータの電力消費量を推定するモデルを作成すること
\\begin{itemize}
\\item CCN ルータは既存の IP ルータとはテーブル構造などが異なってい
る
\\end{itemize}
\\end{itemize}
\\end{block}
\\end{frame}
\\begin{frame}[label=sec-1-3]{CCN (Content-Centric Networking)}
\\begin{itemize}
\\item ホストではなく，データを主体としたネットワークアーキテクチャ
\\begin{itemize}
\\item すべてのコンテンツに固有の識別子 (名前) が割り当てられている
\\end{itemize}
\\item ネットワーク中の各ルータが中継するコンテンツをキャッシュすること
で，データの再利用を実現している
\\begin{itemize}
\\item キャッシュヒットすれば，トラヒック量を削減でき，それに付随して
データ伝送にかかる電力も削減できる
\\end{itemize}
\\end{itemize}

\\includegraphics[width=.9\\linewidth]{./CCN_example1.eps}
\\end{frame}
\\begin{frame}[label=sec-1-4]{研究以外の学業への取り組み}
\\begin{itemize}
\\item 産学連携のセキュリティ専門家育成カリキュラムに参加
\\begin{itemize}
\\item ARP スプーフィングによる偽 Web サイトへの誘導や Android アプリケー
ションの静的マルウェア解析などを体験
\\end{itemize}
\\end{itemize}

\\centering
\\includegraphics[width=0.7\\linewidth,height=0.5\\textheight]{./seccap.jpg}
\\end{frame}
\\begin{frame}[label=sec-1-5]{学業以外の取り組み (アルバイト)}
\\begin{itemize}
\\item 5 種類のアルバイトを経験
\\begin{itemize}
\\item その中でも，特にフレッツ光の契約スタッフは，いい経験になった
\\begin{itemize}
\\item 自分からお客様に積極的にアプローチしていく必要がある
\\item お客様と PC やインターネットをどのように利用するのかを聞き，
最適だと思われる PC や料金プランを提案することに面白みを感じ
た
\\end{itemize}
\\end{itemize}
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-1-6]{貴社で取り組みたいこと}
\\begin{itemize}
\\item 大学・大学院で学んだ情報に関する知識 (特にネットワークとセキュリティ)
を活かして，お客様にとって最適なソリューションを技術的な観点から提
案していきたい
\\begin{itemize}
\\item 自身の専攻である情報分野を中心にしつつ，様々なことに興味を持つ
私だからこそ，様々な業界のお客様と共に仕事ができると考えており
ます
\\end{itemize}
\\end{itemize}
\\end{frame}
\\begin{frame}[label=sec-1-7]{\\large{御静聴ありがとうございました}}
\\end{frame}
% Emacs 24.3.1 (Org mode 8.2.5h)
\\end{document}"))
(setq-default session-file-alist '(("~/.config/awesome/rc.lua" 21735 nil 1 nil nil 17876 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140329.1236/helm-autoloads.el" 45168 nil 1 nil nil 45168 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/url/cookies" 231 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 10030 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.zshrc" 860 749 1 nil nil 764 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/ohsugi-M1-meeting.org" 207 2374 1 nil nil 12 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140327.116/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140328.905/helm-autoloads.el" 45167 nil 1 nil nil 45167 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yaxception-20140327.409/yaxception-autoloads.el" 192 nil 1 nil nil 192 (overwrite-mode)) ("~/au_wifi.js" 75 67 1 nil nil 1086 (overwrite-mode)) ("~/Dropbox/job_hunting/FUTURE_Architect/slide.org" 1545 1550 1 nil nil 1545 (overwrite-mode)) ("~/Dropbox/job_hunting/FUTURE_Architect/slide.tex" 2782 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/job_hunting/HITACHI/es.org" 339 272 1 nil nil 1866 (overwrite-mode)) ("~/Dropbox/job_hunting/HITACHI/hitach_jobmatching.txt" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/storage/report/ネットワークセミナーⅡ/paper.tex" 1573 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/storage/report/ネットワークセミナーⅡ/33E13003.pdf" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/job_hunting/FUTURE_Architect/es.org" 609 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/storage/report/ネットワークセミナーⅡ/paper.org" 1158 1311 1 nil nil nil (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 9758 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/helm-20140326.1237/helm-autoloads.el" 44947 nil 1 nil nil 44947 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/yaxception-20140326.1804/yaxception-autoloads.el" 192 nil 1 nil nil 192 (overwrite-mode)) ("~/Dropbox/job_hunting/HITACHI/情報通信システム社es.org" 596 391 1 nil nil 240 (overwrite-mode)) ("~/Dropbox/job_hunting/NTTDATA/es.org" 19 1095 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/job_hunting/HITACHI/情報通信システム社es.org" 159 93 1 nil nil 84 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/ohsugi-M1-meeting.tex" 23834 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/50_auto-complete.el" 121 78 1 nil nil 121 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-ac-20140302.413/org-ac-autoloads.el" 550 nil 1 nil nil 550 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-pcmp-20140226.2251/auto-complete-pcmp-autoloads.el" 215 nil 1 nil nil 215 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/log4e-20130514.912/log4e-autoloads.el" 177 nil 1 nil nil 177 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yaxception-20140320.814/yaxception-autoloads.el" 192 nil 1 nil nil 192 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140322.321/auto-complete-config.el" 18432 878 1 nil nil nil (overwrite-mode)) ("~/hote.txt" 6 nil 1 nil nil 6 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140322.321/auto-complete.el" 20900 68949 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140322.321/auto-complete-pkg.el" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/05_font.el" 271 216 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/10_helm.el" 932 907 1 nil nil 932 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140324/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140324/org-autoloads.el" 27238 nil 1 nil nil 27238 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/HITACHI/hitach_jobmatching.txt" 150 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/job_hunting/HITACHI/es.org" 1 1710 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140323.1210/helm-autoloads.el" 44941 nil 1 nil nil 44941 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/NTTDATA/es.org" 1028 731 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/99_popwin.el" 2 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140317/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140317.326/helm-autoloads.el" 44857 nil 1 nil nil 44857 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140317/org-autoloads.el" 27223 nil 1 nil nil 27223 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/multi-term-20140316.1714/multi-term-autoloads.el" 1341 nil 1 nil nil 1341 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140314.802/auto-complete-autoloads.el" 1481 nil 1 nil nil 1481 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140315.28/helm-autoloads.el" 44939 nil 1 nil nil 44939 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-20140314.255/yasnippet-autoloads.el" 1493 nil 1 nil nil 1493 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140312.2221/helm-autoloads.el" 45351 nil 1 nil nil 45351 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-20140313.1329/yasnippet-autoloads.el" 1494 nil 1 nil nil 1494 (overwrite-mode)) ("~/Dropbox/meeting/withHasegawa/GreenICN/ohsugi-M1-meeting.org" 2355 718 1 nil nil 2358 (overwrite-mode)) ("~/Dropbox/meeting/withHasegawa/GreenICN/ohsugi-M1-meeting.tex" 14216 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/helm-20140311.818/helm-autoloads.el" 45349 nil 1 nil nil 45349 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140308.656/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140309.505/helm-autoloads.el" 45354 nil 1 nil nil 45354 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/lua-mode-20140306.2249/lua-mode-autoloads.el" 512 nil 1 nil nil 512 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/popwin-20140309.745/popwin-autoloads.el" 2533 nil 1 nil nil 2533 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140306.2141/helm-autoloads.el" 45352 nil 1 nil nil 45352 (overwrite-mode)) ("~/hoge/achievement_20140307.html" 2376 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/140305/140305-M1meeting.org" 1 3151 1 nil nil 3232 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/140305/140305-M1meeting.tex" 6306 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140303.2232/helm-autoloads.el" 45351 nil 1 nil nil 45351 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/snippets/org-mode/figure" 50 nil 1 nil nil 114 (overwrite-mode)) ("/mnt/Dropbox/old/old_presentation/graduation_thesis/abstract.tex" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/concurrent-20140303.1635/concurrent-autoloads.el" 192 nil 1 nil nil 192 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140303.1404/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/deferred-20140303.1634/deferred-autoloads.el" 186 nil 1 nil nil 186 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140303.755/helm-autoloads.el" 45353 nil 1 nil nil 45353 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-20140303.53/yasnippet-autoloads.el" 1493 nil 1 nil nil 1493 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/url/cookies" 511 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/ctable-20140301.1809/ctable-autoloads.el" 180 nil 1 nil nil 180 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/epc-20140301.1811/epc-autoloads.el" 181 nil 1 nil nil 181 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/helm-20140301.210/helm-autoloads.el" 45351 nil 1 nil nil 45351 (overwrite-mode)) ("~/Dropbox/etc/book_list/book_list.org" 724 1159 1 nil nil 724 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/snippets/org-mode/report" 50 nil 1 nil nil 68 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/auctex-11.87.3/auctex-autoloads.el" 10919 nil 1 nil nil 10919 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/yasnippet-20140227.703/yasnippet-autoloads.el" 1494 nil 1 nil nil 1494 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/cl-lib-0.5/cl-lib-autoloads.el" 407 nil 1 nil nil 407 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140226.129/helm-autoloads.el" 45032 nil 1 nil nil 45032 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-20140223.1202/yasnippet-autoloads.el" 1491 nil 1 nil nil 1491 (overwrite-mode)) ("~/Dropbox/job_hunting/NRI/es.org" 762 108 1 nil nil 648 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/helm-20140225.1146/helm-autoloads.el" 45062 nil 1 nil nil 45062 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140224/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/helm-20140223.1212/helm-autoloads.el" 45055 nil 1 nil nil 45055 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140224/org-autoloads.el" 27239 nil 1 nil nil 27239 (overwrite-mode))))
(setq-default TeX-command-history '("LatexMk" "Evince"))
(setq-default buffer-name-history '("*Backtrace*" "hote.txt" "*Packages*" "es.org" "PKGBUILD" "*init log*"))
(setq-default command-history '((find-file "~/au_wifi.js" t) (kill-buffer "*Backtrace*") (find-file "~/Dropbox/storage/report/ネットワークセミナーⅡ/paper.org" t) (find-file "~/Dropbox/storage/report/ネットワークセミナーⅡ/paper.tex" t) (find-file "~/Dropbox/storage/report/ネットワークセミナーⅡ/" t) (describe-variable (quote ac-source-filename)) (describe-function (quote ac-config-default)) (find-file "~/hote.txt" t) (find-file "~/.emacs.d/elpa/auto-complete-20140322.321/auto-complete.el" t) (find-file "~/.emacs.d/elpa/auto-complete-20140322.321/auto-complete-pkg.el" t) (find-file "~/.emacs.d/elpa/auto-complete-20140322.321/" t) (describe-variable (quote ac-sources)) (find-file "~/.emacs.d/inits/05_font.el" t) (query-replace "./" "./figure/" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (describe-function (quote global-auto-complete-mode)) (describe-function (quote auto-complete-mode-maybe)) (describe-variable (quote ac-modes)) (kill-buffer "hote.txt") (describe-key "s" 1 nil) (describe-key "" 1 nil) (find-file "~/Dropbox/job_hunting/HITACHI/情報通信システム社es.org" t) (find-file "~/Dropbox/job_hunting/HITACHI/hitach_jobmatching.txt" t) (find-file "~/.emacs.d/inits/99_popwin.el" t) (kill-buffer "*Packages*") (kill-buffer "es.org") (kill-buffer "PKGBUILD") (yas-load-snippet-buffer-and-close (quote org-mode) nil) (find-file "~/Dropbox/meeting/withHasegawa/140305/" t) (find-file "~/Dropbox/meeting/withHasegawa/140305/140305-M1meeting.org" t) (dired-create-directory "~/Dropbox/meeting/withHasegawa/140305") (find-file "~/Dropbox/meeting/withHasegawa/" t) (kill-buffer "*init log*")))
(setq-default extended-command-history '("package-list-packages" "count-lines-region" "describe-variable" "eval-buffer" "describe-function" "auto-complete-mode" "describe-mode" "Buffer-menu-mode" "describe-key" "eval-defun" "pascal-mode"))
(setq-default helm-c-grep-history '("valid-file" "filename"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . kill-region) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-grep-history '("valid-file" "filename"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . kill-region) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default minibuffer-history '("rc.lua" "pack" "zshrc" "org" "p" "-------" "fu" "future" #("centering" 0 9 (fontified t)) "hitachi"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("./figure/" "./"))
(setq-default search-ring '("correct" "orgdef" "org" "auto-co" "ac " "auto-complete" "company" "org auc" "filename" "ac-source" "file" "auto-s" "txt" "text" "meja" "latex"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
