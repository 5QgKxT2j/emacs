;;; Automatically generated on Wed Aug 20 08:55:54 2014
;;; Invoked by k-ohsugi@localhost using 24.3.1
(setq-default kill-ring '(#("ICN では，パケット転送とパケット単位のキャッシングが消費する電力と，キャッ
シングによるトラヒックの削減がもたらす電力削減とのネットワーク全体の電
力消費に関するトレードオフが発生する．" 0 18 (fontified t) 18 39 (fontified t) 39 40 (fontified t) 40 53 (fontified t) 53 75 (fontified t) 75 76 (fontified t) 76 88 (fontified t) 88 94 (fontified t) 94 95 (rear-nonsticky t fontified t)) #("ICN では，パケット転送とパケット
  単位のキャッシングが消費する電力と，キャッシングによるトラヒックの削
  減がもたらす電力削減とのネットワーク全体の電力消費に関するトレードオ
  フが発生する．" 0 102 (fontified t)) #("

また，式~\\eqref{eq:bytes}の$ACCESS_{MEM}$は，以下の方法で求めた． 3 台
の NDNx を動作させた PC を 10Gbps イーサネットリンクで接続
し， 1 台の PC を NDN ルータ，他の 2 台をクライアントとサーバとして使用
する．そして，クライアントが 1G バイトのコンテンツを要求し，ルータがパ
ケットを転送している時のメモリアクセスバイト数の合計を測定した．その結
果，メモリアクセスバイト数の合計の平均は， 11.03G バイトであった．
Interest パケットと Data パケットの平均サイズは，それぞれ 133 バイトと
4048 バイトであったため， 1G バイトのコンテンツを転送するのに平均
チャンクサイズ 4048 バイトで除することで
" 0 1 (fontified t) 1 2 (fontified t) 2 4 (fontified t) 4 6 (fontified t) 6 7 (fontified t) 7 13 (fontified t face (font-lock-keyword-face font-latex-sedate-face)) 13 14 (fontified t) 14 22 (fontified t face (font-lock-constant-face)) 22 24 (fontified t) 24 32 (fontified t face font-latex-math-face) 32 33 (fontified t display #2=(raise -0.3) face #1=(font-latex-math-face font-latex-subscript-face)) 33 34 (fontified t display #2# face #1#) 34 35 (fontified t display #2# face #1#) 35 36 (fontified t display #2# face #1#) 36 37 (fontified t display #2# face #1#) 37 38 (fontified t display nil face font-latex-math-face) 38 39 (fontified t) 39 40 (fontified t) 40 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 67 (fontified t) 67 68 (fontified t) 68 69 (fontified t) 69 70 (fontified t) 70 93 (fontified t) 93 94 (fontified t) 94 95 (fontified t) 95 96 (rear-nonsticky t fontified t) 96 97 (fontified t) 97 98 (fontified t) 98 105 (fontified t) 105 106 (fontified t) 106 107 (fontified t) 107 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 137 (fontified t) 137 138 (fontified t) 138 139 (fontified t) 139 140 (fontified t) 140 141 (rear-nonsticky t fontified t) 141 144 (fontified t) 144 145 (fontified t) 145 151 (fontified t) 151 152 (fontified t) 152 153 (fontified t) 153 154 (fontified t) 154 155 (fontified t) 155 156 (fontified t) 156 157 (fontified t) 157 169 (fontified t) 169 170 (fontified t) 170 175 (fontified t) 175 176 (fontified t) 176 178 (fontified t) 178 207 (fontified t) 207 211 (fontified t) 211 212 (fontified t) 212 213 (fontified t) 213 214 (fontified t) 214 232 (fontified t) 232 233 (fontified t) 233 234 (fontified t) 234 235 (fontified t) 235 239 (fontified t) 239 240 (fontified t) 240 241 (fontified t) 241 242 (fontified t) 242 248 (fontified t) 248 250 (fontified t) 250 257 (fontified t) 257 258 (fontified t) 258 259 (fontified t) 259 260 (fontified t) 260 263 (fontified t) 263 264 (fontified t) 264 265 (fontified t) 265 266 (fontified t) 266 268 (fontified t) 268 269 (fontified t) 269 270 (fontified t) 270 271 (fontified t) 271 281 (fontified t) 281 282 (fontified t) 282 285 (fontified t) 285 286 (fontified t) 286 287 (fontified t) 287 288 (fontified t) 288 289 (fontified t) 289 290 (fontified t) 290 291 (fontified t) 291 292 (fontified t) 292 296 (fontified t) 296 299 (fontified t) 299 300 (fontified t) 300 301 (fontified t) 301 302 (fontified t) 302 310 (fontified t) 310 311 (fontified t) 311 312 (fontified t) 312 313 (fontified t) 313 314 (fontified t) 314 315 (fontified t) 315 316 (fontified t) 316 331 (fontified t) 331 333 (fontified t) 333 334 (fontified t) 334 340 (fontified t) 340 341 (fontified t) 341 342 (fontified t) 342 343 (fontified t) 343 345 (fontified t) 345 346 (fontified t) 346 347 (fontified t) 347 348 (fontified t) 348 357 (fontified t) 357 358 (fontified t)) #("derived. Since it is
difficult to precisely calculate how many bytes in the DDR3 device the
blocks access at run time, we estimate it in the following way: First,
we empirically measure how many bytes in the DDR3 device are accessed
by observing a communicating NDNx router. We derive the ratio of the
number of accessed (read or written) bytes in the DDR3 to that of
bytes of contents which is retrieved. R in the equation (7) is this
ratio. For example, if R is 10, when a 1 GBs of content is retrieved,
the NDNx router is assumed to access 10 GBs in the DDR device.
Second, we assume that the above ratio is always the same for any NDNx
packets. Here, since λ_ICN^IN∙Chunk_SIZE is the average byte number
of retrieved contents, equation (7) estimates the number of accessed
bytes in the DDR3 device per second. We measure the average number of
accessed bytes in the DDR3 device per second during the experiments in
section 5.3. Each client retrieves between a 1 GBs and 4 GBs of
contents from a server. We set the constant R as 11.03 in the equation
(7) by averaging the measured values.
" 0 1 (fontified t) 1 20 (fontified t) 20 21 (fontified t) 21 68 (fontified t) 68 69 (fontified t) 69 91 (fontified t) 91 92 (fontified t) 92 136 (fontified t) 136 137 (fontified t) 137 162 (fontified t) 162 163 (fontified t) 163 207 (fontified t) 207 208 (fontified t) 208 232 (fontified t) 232 233 (fontified t) 233 277 (fontified t) 277 278 (fontified t) 278 301 (fontified t) 301 302 (fontified t) 302 347 (fontified t) 347 348 (fontified t) 348 367 (fontified t) 367 368 (fontified t) 368 414 (fontified t) 414 415 (fontified t) 415 435 (fontified t) 435 436 (fontified t) 436 483 (fontified t) 483 484 (fontified t) 484 505 (fontified t) 505 506 (fontified t) 506 552 (fontified t) 552 553 (fontified t) 553 568 (fontified t) 568 569 (fontified t) 569 621 (fontified t) 621 622 (fontified t) 622 639 (fontified t) 639 640 (fontified t) 640 687 (fontified t) 687 688 (fontified t) 688 707 (fontified t) 707 708 (fontified t) 708 757 (fontified t) 757 758 (fontified t) 758 776 (fontified t) 776 777 (fontified t) 777 828 (fontified t) 828 829 (fontified t) 829 846 (fontified t) 846 847 (fontified t) 847 898 (fontified t) 898 899 (fontified t) 899 917 (fontified t) 917 918 (fontified t) 918 968 (fontified t) 968 969 (fontified t) 969 981 (fontified t) 981 982 (fontified t) 982 1039 (fontified t) 1039 1040 (fontified t) 1040 1052 (fontified t) 1052 1053 (fontified t) 1053 1090 (fontified t) 1090 1091 (rear-nonsticky t fontified t)) #("Intel (R) Performance Counter Monitor を用いて計測した．" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 47 (fontified t)) #("1 台の PC を IP
ルータ，他の 2 台をクライアントとサーバとして使用する．" 0 1 (fontified t) 1 12 (fontified t) 12 13 (fill-space #(" " 0 1 (fontified nil)) fontified t) 13 39 (fontified t) 39 42 (fontified t)) #("3 台の PC を 10Gbps イーサネットリンクで接続し，" 0 30 (fontified t) 30 31 (fontified t)) #("3 台
の PC を 10Gbps イーサネットリンクで接続する． 1 台の PC を IP ルータ，
他の 2 台をクライアントとサーバとして使用する．クライアントでは， UDP
セグメントの送信とスリープを繰り返すプログラムを動作させ，スリープ間隔
を変化させることで UDP セグメントの送信レートを変化させる．測定では，送
信する IP パケットのサイズを 1500 バイトとした．" 0 3 (fontified t) 3 4 (fontified t) 4 31 (fontified t) 31 51 (fontified t) 51 52 (fontified t) 52 74 (fontified t) 74 90 (fontified t) 90 91 (fontified t fill-space #(" " 0 1 (fontified nil))) 91 112 (fontified t) 112 126 (fontified t) 126 127 (fontified t) 127 151 (fontified t) 151 165 (fontified t) 165 166 (fontified t) 166 192 (fontified t) 192 194 (fontified t) 194 195 (rear-nonsticky t fontified t)) #(" 3 台の PC を 10Gbps イーサネットリンクで接続す
る． 1 台の PC を IP ルータ，他の 2 台をクライアントとサーバとして使用
する．クライアントでは， UDP セグメントの送信とスリープを繰り返すプログ
ラムを動作させ，スリープ間隔を変化させることで UDP セグメントの送信レー
トを変化させる．測定では，送信する IP パケットのサイズを 1500 バイトと
した．" 0 32 (fontified t) 32 194 (fontified t) 194 197 (fontified t)) #("average number of accessed bytes in the DDR3 per second, is" 0 59 (fontified t)) #("s subsection describes how bytes(λ_ICN^IN,P_CS^hit ), i.e., the" 0 63 (fontified t)) "This subsection describes how bytes(λ_ICN^IN,P_CS^hit ), i.e., the average number of accessed bytes in the DDR3 per second, is derived. Since it is difficult to precisely calculate how many bytes in the DDR3 device the blocks access at run time, we estimate it in the following way: First, we empirically measure how many bytes in the DDR3 device are accessed by observing a communicating NDNx router. We derive the ratio of the number of accessed (read or written) bytes in the DDR3 to that of bytes of contents which is retrieved. R in the equation (7) is this ratio. For example, if R is 10, when a 1 GBs of content is retrieved, the NDNx router is assumed to access 10 GBs in the DDR device. 
Second, we assume that the above ratio is always the same for any NDNx packets. Here, since λ_ICN^IN∙Chunk_SIZE is the average byte number of retrieved contents, equation (7) estimates the number of accessed bytes in the DDR3 device per second. We measure the average number of accessed bytes in the DDR3 device per second during the experiments in section 5.3. Each client retrieves between a 1 GBs and 4 GBs of contents from a server. We set the constant R as 11.03 in the equation (7) by averaging the measured values.
" #("

" 0 1 (fontified t) 1 2 (fontified t)) #("$ACCESS_{MEM}$は，
" 0 8 (face font-latex-math-face fontified t) 8 9 (face #2=(font-latex-math-face font-latex-subscript-face) display #1=(raise -0.3) fontified t) 9 10 (face #2# display #1# fontified t) 10 11 (face #2# display #1# fontified t) 11 12 (face #2# display #1# fontified t) 12 13 (face #2# display #1# fontified t) 13 14 (face font-latex-math-face display nil fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t)) #(" CPU クロック数を
1CPU コアの動作周波数 1.6GHz で除する" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 12 (fontified t) 12 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 37 (fontified t)) #("とすることで，" 0 4 (fontified t) 4 7 (fontified t)) #("方針 (1) を満足してい
る．" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (rear-nonsticky t fontified t)) #("\\lambda^{IN}_{Interest}$とキャッシュヒット率$p^{hit}_{CS}$の 2 つを" 0 1 (fontified t face #1=(font-latex-math-face font-latex-sedate-face)) 1 7 (fontified t face #1#) 7 8 (fontified t face font-latex-math-face) 8 9 (display #3=(raise 0.3) fontified t face #2=(font-latex-math-face font-latex-superscript-face)) 9 10 (display #3# fontified t face #2#) 10 11 (display #3# fontified t face #2#) 11 12 (display #3# fontified t face #2#) 12 13 (fontified t face font-latex-math-face) 13 14 (display #5=(raise -0.3) fontified t face #4=(font-latex-math-face font-latex-subscript-face)) 14 15 (display #5# fontified t face #4#) 15 16 (display #5# fontified t face #4#) 16 17 (display #5# fontified t face #4#) 17 18 (display #5# fontified t face #4#) 18 19 (display #5# fontified t face #4#) 19 20 (display #5# fontified t face #4#) 20 21 (display #5# fontified t face #4#) 21 22 (display #5# fontified t face #4#) 22 23 (display #5# fontified t face #4#) 23 24 (fontified t face font-latex-math-face) 24 25 (fontified t) 25 33 (fontified t) 33 34 (rear-nonsticky t fontified t) 34 35 (fontified t face font-latex-math-face) 35 37 (fontified t face font-latex-math-face) 37 38 (display #3# fontified t face #6=(font-latex-math-face font-latex-superscript-face)) 38 39 (display #3# fontified t face #6#) 39 40 (display #3# fontified t face #6#) 40 41 (display #3# fontified t face #6#) 41 42 (display #3# fontified t face #6#) 42 43 (display nil fontified t face font-latex-math-face) 43 44 (display #5# fontified t face #7=(font-latex-math-face font-latex-subscript-face)) 44 45 (display #5# fontified t face #7#) 45 46 (display #5# fontified t face #7#) 46 47 (display #5# rear-nonsticky t fontified t face #7#) 47 48 (fontified t face font-latex-math-face) 48 54 (fontified t)) #("の入力レートl in
CCN とCS のキャッシュヒット率phit
CS のみであ
" 0 10 (fontified t) 10 11 (fontified t) 11 33 (fontified t) 33 34 (fontified t) 34 41 (fontified t) 41 42 (fontified t)) #("Interest パケット" 0 13 (fontified t)) "入力となるパラメータは，Interest パケット
の入力レートl in
CCN とCS のキャッシュヒット率phit
CS のみであ
り，残りは，対象とするPC において，前もって測定した定数
値である．ハードウェアプラットフォームに依存する項は全て
定数値とすることで，方針（1）を満足している．" #("\\subsection{ルータの性能に関する考察}
\\label{sec:observation}

現状では，エッジルータに要求される Interest パケット処理レートを達成す
る NDN ルータの実装は我々が知る限り存在しない．文
献\\cite{RealityCheck:Perino11} は，エッジで使用されるルータへ入力され
る Interest パケットレートが， 18M$[packet/s]$であることを示している．
現在，我々が知る限りで最も高いパフォーマンスを示すマルチコア NDN ソフトウェアルー
タは
\\cite{so13:_named_data_networ_router,so13:_named_data_networ_router_fast}
で提案されており， 20Gbps を超えるスループットを達成している．しかしな
がら，このルータでも最大 6.3M[packet/s] の Interest パケットしか処理で
きず，エッジルータの要求条件である 18M$[packet/s]$の Interest パケット
処理レートを達成できていない．ただし，この問題は，単純なハードウェア性
能の向上によっては解決されると考えられる．
" 0 11 (fontified t face (font-lock-keyword-face font-latex-sedate-face)) 11 12 (fontified t) 12 24 (fontified t face (font-latex-sectioning-3-face)) 24 26 (fontified t) 26 32 (fontified t face (font-lock-keyword-face font-latex-sedate-face)) 32 33 (fontified t) 33 48 (fontified t face (font-lock-constant-face)) 48 121 (fontified t) 121 126 (fontified t face (font-lock-keyword-face font-latex-sedate-face)) 126 127 (fontified t) 127 148 (fontified t face (font-lock-constant-face)) 148 170 (fontified t) 170 194 (fontified t) 194 206 (fontified t face font-latex-math-face) 206 266 (fontified t) 266 271 (fontified t face (font-lock-keyword-face font-latex-sedate-face)) 271 272 (fontified t) 272 338 (fontified t face (font-lock-constant-face)) 338 450 (fontified t) 450 462 (fontified t face font-latex-math-face) 462 536 (fontified t)) #("
" 0 1 (fontified t)) #("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) #("~\\ref{sec:cpu}節で示すよう
に， CPU コア は，負荷が少ない場合においても，最大の負荷がかかっている
時とほぼ同じ電力を消費するためである．" 0 1 (fontified t) 1 5 (fontified t face (font-lock-keyword-face font-latex-sedate-face)) 5 6 (fontified t) 6 13 (fontified t face (font-lock-constant-face)) 13 79 (fontified t)) #("分母は" 0 3 (fontified t)) #("1CPU コアの最大動作周波
数" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 12 (fontified t) 12 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t)) #("の合計" 0 3 (fontified t)) #("処理量" 0 3 (fontified t)) #("\\lambda^{IN}_{Interest}$に ICN パケットを 1 パケット処理するのにかか
る CPU サイクル数$cl_{icn}(p^{hit}_{CS})$を掛けたものを CPU の最大動作
周波数$CL_{core}$で除することで求めることができる．" 0 7 (fontified t face (font-latex-sedate-face)) 7 8 (fontified t) 8 12 (display nil fontified t) 12 13 (fontified t) 13 23 (display nil fontified t) 23 24 (fontified t face font-latex-math-face) 24 51 (fontified t face font-latex-math-face) 51 62 (fontified t face font-latex-math-face) 62 63 (fontified t face font-latex-math-face) 63 66 (fontified t) 66 71 (display nil fontified t) 71 74 (fontified t) 74 79 (display nil fontified t) 79 80 (fontified t) 80 84 (display nil fontified t) 84 85 (fontified t) 85 86 (fontified t face font-latex-math-face) 86 104 (fontified t face font-latex-math-face) 104 107 (fontified t face font-latex-math-face) 107 108 (fontified t face font-latex-math-face) 108 111 (fontified t) 111 117 (display nil fontified t) 117 118 (fontified t face font-latex-math-face) 118 135 (fontified t face font-latex-math-face)) #("Interest パケットレー" 0 15 (fontified t)) #("P_{router}(\\lambda^{IN}_{Interest}, p^{hit}_{CS})" 0 2 (fontified t font-lock-multiline t face #3=(font-latex-math-face)) 2 10 (display #1=(raise -0.3) fontified t font-lock-multiline t face (font-latex-math-face font-latex-subscript-face)) 10 11 (fontified t font-lock-multiline t face #3#) 11 12 (fontified t font-lock-multiline t face #2=(font-latex-math-face font-latex-sedate-face)) 12 18 (fontified t font-lock-multiline t face #2#) 18 19 (fontified t font-lock-multiline t face #3#) 19 20 (display #5=(raise 0.3) fontified t font-lock-multiline t face #4=(font-latex-math-face font-latex-superscript-face)) 20 21 (display #5# fontified t font-lock-multiline t face #4#) 21 22 (display #5# fontified t font-lock-multiline t face #4#) 22 23 (display #5# fontified t font-lock-multiline t face #4#) 23 24 (fontified t font-lock-multiline t face #3#) 24 25 (display #1# fontified t font-lock-multiline t face #6=(font-latex-math-face font-latex-subscript-face)) 25 26 (display #1# fontified t font-lock-multiline t face #6#) 26 27 (display #1# fontified t font-lock-multiline t face #6#) 27 28 (display #1# fontified t font-lock-multiline t face #6#) 28 29 (display #1# fontified t font-lock-multiline t face #6#) 29 30 (display #1# fontified t font-lock-multiline t face #6#) 30 31 (display #1# fontified t font-lock-multiline t face #6#) 31 32 (display #1# fontified t font-lock-multiline t face #6#) 32 33 (display #1# fontified t font-lock-multiline t face #6#) 33 34 (display #1# fontified t font-lock-multiline t face #6#) 34 35 (display nil fontified t font-lock-multiline t face #3#) 35 38 (fontified t font-lock-multiline t face #3#) 38 39 (display #5# fontified t font-lock-multiline t face #7=(font-latex-math-face font-latex-superscript-face)) 39 40 (display #5# fontified t font-lock-multiline t face #7#) 40 41 (display #5# fontified t font-lock-multiline t face #7#) 41 42 (display #5# fontified t font-lock-multiline t face #7#) 42 43 (display #5# fontified t font-lock-multiline t face #7#) 43 44 (display nil fontified t font-lock-multiline t face #3#) 44 45 (display #1# fontified t font-lock-multiline t face #8=(font-latex-math-face font-latex-subscript-face)) 45 46 (display #1# fontified t font-lock-multiline t face #8#) 46 47 (display #1# fontified t font-lock-multiline t face #8#) 47 48 (display #1# fontified t font-lock-multiline t face #8#) 48 49 (display nil fontified t font-lock-multiline t face #3#)) #("P_{router}(cores,rate_{packet})" 0 2 (fontified t face font-latex-math-face) 2 10 (fontified t display #1=(raise -0.3) face (font-latex-math-face font-latex-subscript-face)) 10 22 (fontified t face font-latex-math-face) 22 30 (fontified t display #1# face (font-latex-math-face font-latex-subscript-face)) 30 31 (fontified t face font-latex-math-face)) #("パケットの
" 0 5 (fontified t) 5 6 (fontified t)) #("キャッシュヒット率" 0 9 (fontified t)) #("入力パケットレート" 0 9 (fontified t)) #("\\lambda^{IN}_{Interest}, p^{hit}_{CS}" 0 1 (fontified t font-lock-multiline t face #1=(font-latex-math-face font-latex-sedate-face)) 1 7 (fontified t font-lock-multiline t face #1#) 7 8 (fontified t font-lock-multiline t face #6=(font-latex-math-face)) 8 9 (display #3=(raise 0.3) fontified t font-lock-multiline t face #2=(font-latex-math-face font-latex-superscript-face)) 9 10 (display #3# fontified t font-lock-multiline t face #2#) 10 11 (display #3# fontified t font-lock-multiline t face #2#) 11 12 (display #3# fontified t font-lock-multiline t face #2#) 12 13 (fontified t font-lock-multiline t face #6#) 13 14 (display #5=(raise -0.3) fontified t font-lock-multiline t face #4=(font-latex-math-face font-latex-subscript-face)) 14 15 (display #5# fontified t font-lock-multiline t face #4#) 15 16 (display #5# fontified t font-lock-multiline t face #4#) 16 17 (display #5# fontified t font-lock-multiline t face #4#) 17 18 (display #5# fontified t font-lock-multiline t face #4#) 18 19 (display #5# fontified t font-lock-multiline t face #4#) 19 20 (display #5# fontified t font-lock-multiline t face #4#) 20 21 (display #5# fontified t font-lock-multiline t face #4#) 21 22 (display #5# fontified t font-lock-multiline t face #4#) 22 23 (display #5# fontified t font-lock-multiline t face #4#) 23 24 (display nil fontified t font-lock-multiline t face #6#) 24 27 (fontified t font-lock-multiline t face #6#) 27 28 (display #3# fontified t font-lock-multiline t face #7=(font-latex-math-face font-latex-superscript-face)) 28 29 (display #3# fontified t font-lock-multiline t face #7#) 29 30 (display #3# fontified t font-lock-multiline t face #7#) 30 31 (display #3# fontified t font-lock-multiline t face #7#) 31 32 (display #3# fontified t font-lock-multiline t face #7#) 32 33 (display nil fontified t font-lock-multiline t face #6#) 33 34 (display #5# fontified t font-lock-multiline t face #8=(font-latex-math-face font-latex-subscript-face)) 34 35 (display #5# fontified t font-lock-multiline t face #8#) 35 36 (display #5# fontified t font-lock-multiline t face #8#) 36 37 (display #5# fontified t font-lock-multiline t face #8#)) #("$cores$およ
び$rate_{packet}$は，以下で式~\\eqref{eq:cores}と式~\\eqref{eq:rate}で示
すが，入力パケットレートとルータのキャッシュヒット率から求められる．" 0 7 (fontified t face font-latex-math-face) 7 11 (fontified t) 11 17 (fontified t face font-latex-math-face) 17 25 (fontified t face (font-latex-math-face font-latex-subscript-face) display (raise -0.3)) 25 26 (fontified t face font-latex-math-face) 26 33 (fontified t) 33 39 (fontified t face (font-lock-keyword-face font-latex-sedate-face)) 39 40 (fontified t) 40 48 (fontified t face (font-lock-constant-face)) 48 52 (fontified t) 52 58 (fontified t face (font-lock-keyword-face font-latex-sedate-face)) 58 59 (fontified t) 59 66 (fontified t face (font-lock-constant-face)) 66 104 (fontified t))))
(setq-default session-file-alist '(("/mnt/Dropbox/research/work/IN14-9/architecture.tex" 3815 3915 1 nil nil 3815 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/model.tex" 1666 1455 1 nil nil 1653 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/title.tex" 1544 752 1 nil nil 979 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/conclusion.tex" 211 117 1 nil nil 211 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/experiment.tex" 3924 1 1 nil nil 3921 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/introduction.tex" 2868 1278 1 nil nil 2341 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/paper.tex" 340 179 1 nil nil 306 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/_region_.tex" 4119 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 14324 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/old/architecture.tex" 325 307 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/old/v0.1/paper.tex" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/bib/paper.bib" 8735 8589 1 nil nil 8735 (overwrite-mode)) ("/usr/lib/systemd/systemd" 519 1317649 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/deferred-20140816.2205/deferred-autoloads.el" 186 nil 1 nil nil 186 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/abstract.tex" 594 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/research/work/IN14-9/conclusion.tex" 275 218 1 nil nil 267 (overwrite-mode)) ("~/Dropbox/research/work/IN14-9/paper.tex" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/research/work/IN14-9/title.tex" 1933 935 1 nil nil 935 (overwrite-mode)) ("~/Dropbox/research/work/IN14-9/introduction.tex" 2751 2711 1 nil nil 2768 (overwrite-mode)) ("~/Dropbox/research/work/IN14-9/architecture.tex" 3655 3577 1 nil nil 3698 (overwrite-mode)) ("~/Dropbox/research/work/IN14-9/experiment.tex" 289 1435 1 nil nil 345 (overwrite-mode)) ("~/Dropbox/research/work/IN14-9/model.tex" 1123 2621 1 nil nil 3404 (overwrite-mode)) ("~/Dropbox/research/work/IN14-9/bib/paper.bib" 8030 8030 1 nil nil 8030 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 14047 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/research/work/society14/paperv1.0.tex" 5045 981 1 nil nil nil (overwrite-mode)) ("~/Dropbox/research/meeting/router_design.tex" 1388 1694 1 nil nil nil (overwrite-mode)) ("~/Dropbox/research/work/society14/paperv0.3.tex" 3416 3367 1 nil nil nil (overwrite-mode)) ("~/Dropbox/research/work/IN14-9/old/architecture.tex" 2072 1912 1 nil nil nil (overwrite-mode)) ("~/Dropbox/research/work/IN14-9/old/model.tex" 1237 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140811/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140811.523/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140813.234/helm-autoloads.el" 41228 nil 1 nil nil 41228 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140811/org-autoloads.el" 27238 nil 1 nil nil 27238 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-20140810.1626/yasnippet-autoloads.el" 1494 nil 1 nil nil 1494 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/experiment.rip" 388 nil 1 nil nil 388 (overwrite-mode)) ("~/.config/awesome/rc.lua" 1 nil 1 nil nil 8224 (overwrite-mode)) ("/mnt/Dropbox/storage/scfes.org" 26 nil 1 nil nil 28 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140808.2300/helm-autoloads.el" 41225 nil 1 nil nil 41225 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140807.845/helm-autoloads.el" 41174 nil 1 nil nil 41174 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/paper.bbl" 1 310 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140804/org-loaddefs.el" 86899 nil 1 nil nil 86899 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140803.2118/auto-complete-autoloads.el" 1711 nil 1 nil nil 1711 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140806.756/helm-autoloads.el" 41182 nil 1 nil nil 41182 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140804/org-autoloads.el" 27230 nil 1 nil nil 27230 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/30_auctex.el" 246 300 1 nil nil 223 (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paperv1.0.tex" 1526 3965 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/old/model.tex" 127 1565 1 nil nil 5296 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/parameter.tex" 107 nil 1 nil nil 107 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/ICN-meeting.org" 962 1200 1 nil nil 1208 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/ICN-meeting.tex" 26681 nil 1 nil nil nil (overwrite-mode))))
(setq-default LaTeX-environment-history '("equation"))
(setq-default TeX-command-history '("Evince" "LatexMk" "LaTeX" "Clean All"))
(setq-default bibtex-key-history '("kim14:_model_estim_power_consum_multic_system_server" "NDNx" "fayazbakhsh13:_less_pain_most_gain" "company:_ddr3" "vogelsang10:_under_energ_consum_dynam_random_acces_memor" "fukushima13:_effic_lookup_schem_non_name" "rossini14:_multi_terab_multi_gbps_infor_centr_router" "so13:_named_data_networ_router" "che02:_hierar_web" "fricker12:_versat_accur_approx_lru_cache_perfor" "ahlgren12:_survey"))
(setq-default buffer-name-history '("*Moccur*" "paper.bib" "abstract.tex" "experiment.rip" "*~/Dropbox/research/work/IN14-9/paper output*" "*~/Dropbox/research/work/IN14-9/experiment output*" "architecture.tex" "experiment.tex" "*~/Dropbox/research/work/IN14-9/model output*" "*TeX Help*" "paper.bbl" "paper.rip" "bib" "*scratch*" "IN14-9" "model.tex<k-ohsugi>" "*Completions*" "IN14" "*~/Dropbox/research/work/IN14/paper output*" "ICN-meeting.org" "*Backtrace*" "ieicejsp.cls" "report8.org" "udp1500byte.gp" "memory_accsess.dat" "*Async Shell Command*" "ssh:get_ccnx_time.sh" "*gnuplot*" "udp1500byte.out" "*Org PDF LaTeX Output*" "__init__.py" "functions.py" "PKGBUILD" "ssh:hoge.c" "forwarding.c" "dummy.c" "256result.data" "ssh:receive.c" "ssh:ssh:ssh:send.c<client1>" "router" "rdtsc.h" "*Packages*" "*Macroexpansion*" "2-13 Daring!!.mp3" "20_org-mode.el" "hote.txt" "es.org" "*init log*"))
(setq-default coding-system-history '("shift_jis" "utf-8-unix" "unix"))
(setq-default command-history '((find-file "~/Dropbox/research/work/IN14-9/architecture.tex" t) (find-file "~/Dropbox/research/work/IN14-9/model.tex" t) (find-file "~/Dropbox/research/work/IN14-9/conclusion.tex" t) (query-replace "0.7" "0.6" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (query-replace "0.7" "0.7" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (find-file "~/Dropbox/research/work/IN14-9/experiment.tex" t)))
(setq-default extended-command-history '("moccur-grep-find" "TeX-master-file-ask" "package-list-packages" "count-lines-region" "ispell-buffer" "eval-buffer" "yas-expand-from-trigger-key" "moccur-grep" "describe-variable" "describe-function" "auto-complete-mode" "describe-mode" "Buffer-menu-mode" "describe-key" "eval-defun" "pascal-mode"))
(setq-default helm-c-grep-history '("valid-file" "filename"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . elscreen-next) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-ff-history '("/home/k-ohsugi/Dropbox/research/work/" "/home/k-ohsugi/" "/mnt/Dropbox/.dropbox.cache/" "/mnt/Dropbox/configure/.emacs.d/inits/" "/mnt/Dropbox/research/meeting/" "/mnt/Dropbox/research/work/society14/" "/mnt/Dropbox/storage/" "/home/corgi/Dropbox/storage/" "/home/corgi/" "/mnt/Dropbox/" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/" "/home/k-ohsugi/Dropbox/meeting/withHasegawa/GreenICN/utils/"))
(setq-default helm-grep-history '("valid-file" "filename"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-comint-input-ring '((name . "Comint history") (candidates lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) (action . helm-comint-input-ring-action)))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . elscreen-next) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("evince paper.pdf" #("し，" 0 2 (fontified t)) "ex" #("上で動作させたソフトウェ" 0 12 (fontified t)) "int" #("上で動作させた，マルチコアソフトウェアルータを想定したときの消費電力" 0 34 (fontified t)) "-------" "ar" "kil" #("理やパケット単位のキャッシング処理による性能劣化など，解決すべき多数の" 0 2 (fontified t) 2 8 (fontified t) 8 17 (fontified t) 17 23 (fontified t) 23 24 (fontified t rear-nonsticky t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 35 (fontified t)) #("上で動作させた，マルチコアソフトウェアルータを想定したときの消費" 0 7 (fontified t) 7 8 (fontified t) 8 32 (fontified t)) #("タは" 0 2 (fontified t)) "ソフトウェアルータ " #("る" 0 1 (fontified t)) "grep " #("CPU" 0 3 (fontified t)) "bib" "title" "tit" #("software" 0 8 (face (font-lock-constant-face) fontified t)) "003440605" "pack" "abstract" "abst" "tex" "co" "ti" "expe" "exp" #("在しないようにする．すなわち，低負荷の" 0 6 (fontified t) 6 10 (fontified t) 10 14 (fontified t) 14 15 (fontified t) 15 19 (fontified t)) "in"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("0.6" "0.7"))
(setq-default regexp-history '("ソフトウェアルータ" "不揮発" "block" "blocksize"))
(setq-default search-ring '("nic" "tyuu" "access" "動作周波数" "icn" "saikuru" "kurokku" "genzaino" "空間" "
" "ソフトウェア" "sohutouxea" "sohutouxearu-ta" "softwareru-ta" "clcore" "maruti"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("'" "4096"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
