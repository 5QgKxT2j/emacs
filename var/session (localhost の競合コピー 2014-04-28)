;;; Automatically generated on Mon Apr 28 14:52:19 2014
;;; Invoked by k-ohsugi@localhost using 24.3.1
(setq-default session-file-alist '(("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/dispatcher.c" 21 438 1 nil nil 281 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/myccnx.h" 449 36 1 nil nil 440 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/main.c" 556 96 1 nil nil 556 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/M2-meeting.org" 40 207 1 nil nil 462 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 12016 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/process_incoming_message_pseudocode.c" 128 1 1 nil nil 18 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/bind_cpu.c" 155 521 1 nil nil 144 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/select_cpu_pseudocode.c" 423 nil 1 nil nil 49 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/rdtsc.h" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/process_incoming_interest_pseudocode.c" 65 1 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/packet_process_pseudocode.c" 50 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/main_pseudocode.c" 216 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/dispatcher_pseudocode.c" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/M2-meeting.tex" 40128 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140422/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/url/cookies" 507 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/fixed_ncpu/rdtsc.h" 184 34 1 nil nil 184 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140422.2259/helm-autoloads.el" 46381 nil 1 nil nil 46381 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140422/org-autoloads.el" 27237 nil 1 nil nil 27237 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/fixed_ncpu/main_pseudocode.c" 514 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/varying_ncpu/dispatcher_pseudocode.c" 461 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/varying_ncpu/main_pseudocode.c" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/varying_ncpu/select_cpu_pseudocode.c" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/varying_ncpu/process_incoming_message_pseudocode.c" 174 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/varying_ncpu/packet_process_pseudocode.c" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/process_incoming_message_pseudocode.c" 329 635 1 nil nil 595 (overwrite-mode)) ("/ssh:k-ohsugi@133.1.244.3:/var/www/html/member.html" 10658 10267 1 nil nil 10569 (overwrite-mode)) ("/ssh:k-ohsugi@133.1.244.3:/var/www/html/member_e.html" 10229 9973 1 nil nil 10229 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 11008 nil 1 nil nil nil (overwrite-mode)) ("~/hsgw-lab_namelist.xlsx" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/main_pseudocode.c" 706 427 1 nil nil 692 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/dispatcher_pseudocode.c" 32 32 1 nil nil 32 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/select_cpu_pseudocode.c" 320 1 1 nil nil 320 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/packet_process_pseudocode.c" 621 621 1 nil nil 621 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/storage/dispatcher_pseudocode.txt" 42 nil 1 nil nil 26 (overwrite-mode)) ("~/.config/awesome/wi.lua" 346 1392 1 nil nil nil (overwrite-mode)) ("~/.config/awesome/rc.lua" 2408 14501 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/act.org" 1 nil 1 nil nil 56 (overwrite-mode)) ("~/.config/awesome/themes/dust/theme.lua" 788 746 1 nil nil 788 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140414.2324/auto-complete-autoloads.el" 1481 nil 1 nil nil 1481 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140414.2313/helm-autoloads.el" 45694 nil 1 nil nil 45694 (overwrite-mode)) ("~/Dropbox/meeting/withHasegawa/GreenICN/M2-meeting.org" 641 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/url/cookies" 505 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/lua-mode-20140413.840/lua-mode-autoloads.el" 512 nil 1 nil nil 512 (overwrite-mode)) ("/mnt/Dropbox/lab/graduate_school_entrance_examination.org" 1518 1441 1 nil nil 1517 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/20_org-mode.el" 850 891 1 nil nil 850 (overwrite-mode)) ("/mnt/Dropbox/lab/graduate_school_entrance_examination.tex" 2329 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/receive.c" 697 381 1 nil nil 697 (overwrite-mode)) ("/mnt/Dropbox/research/send.c" 5290 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/forwarding.c" 999 510 1 nil nil 1152 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140411.536/helm-autoloads.el" 45695 nil 1 nil nil 45695 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/lua-mode-20140411.707/lua-mode-autoloads.el" 511 nil 1 nil nil 511 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140409.2254/helm-autoloads.el" 45692 nil 1 nil nil 45692 (overwrite-mode)) ("/mnt/Dropbox/scfes.org" 306 nil 1 nil nil 361 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/ohsugi-M1-meeting.org" 169 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/snippets/org-mode/report" 50 nil 1 nil nil 67 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/color-theme-solarized-20140408.1309/color-theme-solarized-autoloads.el" 1190 nil 1 nil nil 1190 (overwrite-mode)) ("~/LoveLive!/\342-'s Best Album Best Live! collection [Di/2-13 Daring!!.mp3" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/meeting/withHasegawa/GreenICN/ohsugi-M1-meeting.org" 1195 1083 1 nil nil 1195 (overwrite-mode)) ("~/Dropbox/meeting/withHasegawa/GreenICN/ohsugi-M1-meeting.tex" 31638 nil 1 nil nil nil (overwrite-mode))))
(setq-default TeX-command-history '("LatexMk" "Clean All" "Evince"))
(setq-default buffer-name-history '("rdtsc.h" "*Packages*" "*Macroexpansion*" "*Org PDF LaTeX Output*" "2-13 Daring!!.mp3" "*Backtrace*" "20_org-mode.el" "hote.txt" "es.org" "PKGBUILD" "*init log*"))
(setq-default coding-system-history '("shift_jis" "utf-8-unix" "unix"))
(setq-default command-history '((find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/" t) (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/myccnx.h" t) (write-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/dispatcher.c" t) (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/dispatcher_pseudocode.c" t) (write-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/ccode/fixed_ncpu/main.c" t) (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/bind_cpu.c" t) (kill-buffer "rdtsc.h") (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/fixed_ncpu/rdtsc.h" t) (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/fixed_ncpu/process_incoming_interest_pseudocode.c" t) (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/fixed_ncpu/main_pseudocode.c" t) (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/process_incoming_message_pseudocode.c" t) (find-file "/ssh:k-ohsugi@133.1.244.3:/var/www/html/member_e.html" t) (find-file "/ssh:k-ohsugi@133.1.244.3:/var/www/html/member.html" t) (find-file "/ssh:k-ohsugi@133.1.244.3:~/" t) (find-file "/ssh:k-oshugi@133.1.244.3:~/" t) (find-file "/ssh:k-oshugi@133.1.244.3" t) (find-file "/mnt/anime/東のエデン/" t) (find-file "~/Dropbox/act.org" t) (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/select_cpu_pseudocode.c" t) (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/main_pseudocode.c" t) (find-file "~/Dropbox/configure/.emacs.d/inits/" t) (find-file "~/Dropbox/configure/.emacs.d/" t) (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/packet_process_pseudocode.c" t) (kill-buffer "*Packages*") (kill-buffer "*Macroexpansion*") (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/dispatcher_pseudocode.c" t) (find-file "~/.config/awesome/themes/dust/theme.lua" t) (find-file "~/.config/awesome/themes/" t) (find-file "~/.config/awesome/wi.lua" t) (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/storage/dispatcher_pseudocode.txt" t) (find-file "~/Dropbox/hoge/\353@\304\304\342t\342H\342\357\342_/By Imase Lab/" t) (find-file "~/Dropbox/hoge/" t) (kill-buffer "*Org PDF LaTeX Output*") (find-file "~/Dropbox/meeting/withHasegawa/GreenICN/M2-meeting.org" t) (find-file "~/Dropbox/research/forwarding.c" t) (yas-load-snippet-buffer-and-close (quote org-mode) nil) (find-file "~/Dropbox/lab/graduate_school_entrance_examination.tex" t) (find-file "~/Dropbox/lab/graduate_school_entrance_examination.org" t) (find-file "~/Dropbox/lab/graduate school entrance examination.org" t) (dired-create-directory "~/Dropbox/lab") (find-file "~/Dropbox/" t) (find-file "~/LoveLive!/\342-'s Best Album Best Live! collection [Di/" t) (set-buffer-file-coding-system (quote utf-8-unix) nil) (set-buffer-file-coding-system (quote unix) nil) (kill-buffer "2-13 Daring!!.mp3")))
(setq-default extended-command-history '("package-list-packages" "eval-buffer" "count-lines-region" "describe-variable" "describe-function" "auto-complete-mode" "describe-mode" "Buffer-menu-mode" "describe-key" "eval-defun" "pascal-mode"))
(setq-default helm-c-grep-history '("valid-file" "filename"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . kill-region) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-grep-history '("valid-file" "filename"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . kill-region) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default minibuffer-history '("main.c" "-------" "m2" "kil" "pro" ".c" "pack" "main" "select" #("bg_focus" 0 8 (fontified t)) "rc.lua" "dispatcher_pseudocode.txt" "org" "or" "eval" "eva" "targets" "tex" #("大杉" 0 2 (face (font-lock-type-face) fontified t)) "org " "Latexmk" #("必須問題と選択問題がある．選択問題でネットワークを選ぶと漏れなくおまけ" 0 35 (fontified t)) "org 20" #("も対処できるかも．自分の時は，情報論" 0 8 (fontified t) 8 14 (fontified t) 14 18 (fontified t)) "rec" "send" "pa" "org-mode" "report" "evince graduate_school_entrance_examination.pdf" #("
" 0 1 (fontified t)) #("2-15" 0 4 (fontified t help-echo "mouse-2: visit this file in other window" mouse-face highlight dired-filename t)) #("./pdf/" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face)) "figure" "rc" "rc." "evince hoge.pdf" "hoge" "hoge.bib" "auto-com" "zshrc" "p" "fu" "future" #("centering" 0 9 (fontified t)) "hitachi"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("research_2014_group_001-ccn.pdf" "research_group_001-icn.pdf" "M1" "B4" "M" "M2" "Master" "Doctor" "D3" "./figure/" "./"))
(setq-default search-ring '("\")" "wall" " " "pdf" "urata" "watabe" "hujita" "org-" "mein" "correct" "orgdef" "org" "auto-co" "ac " "auto-complete" "company"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
