;;; Automatically generated on Sun Jun  1 19:13:11 2014
;;; Invoked by k-ohsugi@VAIO using 24.3.1
(setq-default kill-ring '("



" "0.00225336" "0.001246495" "0.000574067" "0.0012397398" "0.0012397398
0.000574067
0.001246495
0.00225336
" "0.0597726771
0.081977222
0.114881313
0.149067879
" #("set terminal postscript eps color enhanced \"Arial\" 25
set output 'memory_accsess.eps'
set xlabel \"{/=30 {Accsess Rate [Gbyte/s]}}\"
set ylabel \"{/=30 {Power [W]}}\"
unset key
set xrange[0:12]
set yrange[0:8]

plot 'memory_accsess.dat' using 1:2:3 with yerrorbars,\\
     '' using 1:2 with lines

" 0 3 (face font-lock-constant-face) 43 44 (syntax-table #1=(15) face font-lock-string-face) 44 49 (face font-lock-string-face) 49 50 (syntax-table #1# face font-lock-string-face) 54 57 (face font-lock-constant-face) 65 66 (syntax-table #1# face font-lock-string-face) 66 84 (face font-lock-string-face) 84 85 (syntax-table #1# face font-lock-string-face) 86 89 (face font-lock-constant-face) 97 98 (syntax-table #1# face font-lock-string-face) 98 129 (face font-lock-string-face) 129 130 (syntax-table #1# face font-lock-string-face) 131 134 (face font-lock-constant-face) 142 143 (syntax-table #1# face font-lock-string-face) 143 161 (face font-lock-string-face) 161 162 (syntax-table #1# face font-lock-string-face) 163 168 (face font-lock-constant-face) 173 176 (face font-lock-constant-face) 184 188 (face font-lock-constant-face) 190 193 (face font-lock-constant-face) 201 204 (face font-lock-constant-face) 207 211 (face font-lock-keyword-face) 212 213 (syntax-table #1# face font-lock-string-face) 213 231 (face font-lock-string-face) 231 232 (syntax-table #1# face font-lock-string-face) 233 238 (face font-lock-type-face) 245 249 (face font-lock-type-face) 250 260 (face font-lock-function-name-face) 268 269 (syntax-table #1# face font-lock-string-face) 269 270 (syntax-table #1# face font-lock-string-face) 271 276 (face font-lock-type-face) 281 285 (face font-lock-type-face) 286 291 (face font-lock-function-name-face)) #("set terminal postscript eps color enhanced \"Arial\" 25
set output 'memory_accsess.eps'
set xlabel \"{/=30 {Accsess Rate [Gbyte/s]}}\"
set ylabel \"{/=30 {Power [W]}}\"
unset key
set xrange[0:12]
set yrange[0:8]

plot 'memory_accsess.dat' using 1:2:3 with yerrorbars,\\
     '' using 1:2 with lines

" 0 3 (fontified t face font-lock-constant-face) 3 43 (fontified t) 43 44 (syntax-table #1=(15) fontified t face font-lock-string-face) 44 49 (fontified t face font-lock-string-face) 49 50 (syntax-table #1# fontified t face font-lock-string-face) 50 54 (fontified t) 54 57 (fontified t face font-lock-constant-face) 57 65 (fontified t) 65 66 (syntax-table #1# fontified t face font-lock-string-face) 66 84 (fontified t face font-lock-string-face) 84 85 (syntax-table #1# fontified t face font-lock-string-face) 85 86 (fontified t) 86 89 (fontified t face font-lock-constant-face) 89 97 (fontified t) 97 98 (fontified t syntax-table #1# face font-lock-string-face) 98 129 (fontified t face font-lock-string-face) 129 130 (fontified t syntax-table #1# face font-lock-string-face) 130 131 (fontified t) 131 134 (fontified t face font-lock-constant-face) 134 142 (fontified t) 142 143 (fontified t syntax-table #1# face font-lock-string-face) 143 161 (fontified t face font-lock-string-face) 161 162 (fontified t syntax-table #1# face font-lock-string-face) 162 163 (fontified t) 163 168 (fontified t face font-lock-constant-face) 168 173 (fontified t) 173 176 (fontified t face font-lock-constant-face) 176 184 (fontified t) 184 188 (fontified t face font-lock-constant-face) 188 190 (fontified t) 190 193 (fontified t face font-lock-constant-face) 193 201 (fontified t) 201 204 (fontified t face font-lock-constant-face) 204 207 (fontified t) 207 211 (fontified t face font-lock-keyword-face) 211 212 (fontified t) 212 213 (syntax-table #1# fontified t face font-lock-string-face) 213 231 (fontified t face font-lock-string-face) 231 232 (syntax-table #1# fontified t face font-lock-string-face) 232 233 (fontified t) 233 238 (fontified t face font-lock-type-face) 238 245 (fontified t) 245 249 (fontified t face font-lock-type-face) 249 250 (fontified t) 250 260 (fontified t face font-lock-function-name-face) 260 268 (fontified t) 268 269 (syntax-table #1# fontified t face font-lock-string-face) 269 270 (syntax-table #1# fontified t face font-lock-string-face) 270 271 (fontified t) 271 276 (fontified t face font-lock-type-face) 276 281 (fontified t) 281 285 (fontified t face font-lock-type-face) 285 286 (fontified t) 286 291 (fontified t face font-lock-function-name-face) 291 293 (fontified t)) #("," 0 1 (fontified t)) #(" " 0 1 (fontified t)) #("\\
" 0 1 (fontified t) 1 2 (fontified t)) #("''   using 1: with lines

" 0 1 (face font-lock-string-face syntax-table #1=(15) fontified t) 1 2 (face font-lock-string-face syntax-table #1# fontified t) 2 5 (fontified t) 5 10 (face font-lock-type-face fontified t) 10 14 (fontified t) 14 18 (face font-lock-type-face fontified t) 18 19 (fontified t) 19 24 (face font-lock-function-name-face fontified t) 24 25 (fontified t) 25 26 (fontified t)) "3.857653704	2.716100377	0.235594874
6.75237059	4.354242458	0.278141775
9.728008333	5.524297099	0.159653644
11.19614815	6.364734264	0.325425781
" #("
" 0 1 (fontified t)) #("sleep 3s
" 0 8 (fontified t) 8 9 (fontified t)) #("sleep 3s
echo \"ssh router@router start pcm.x &\"
ssh router@router \"sudo ~/IntelPerformanceCounterMonitorV2.6/pcm.x 1 -csv > ~/CCNx_result/CCNx_clientnum$1_$3.csv\" &" 0 9 (fontified t) 9 13 (face font-lock-builtin-face fontified t) 13 14 (fontified t) 14 47 (face font-lock-string-face fontified t) 47 48 (fontified t) 48 59 (fontified t) 59 65 (fontified t) 65 66 (fontified t) 66 67 (face font-lock-string-face fontified t) 67 72 (face font-lock-string-face fontified t) 72 107 (face font-lock-string-face fontified t) 107 108 (face font-lock-string-face fontified t rear-nonsticky t) 108 153 (face font-lock-string-face fontified t) 153 154 (face font-lock-string-face fontified t) 154 156 (face font-lock-string-face fontified t) 156 157 (face font-lock-string-face fontified t) 157 160 (face font-lock-string-face fontified t) 160 161 (face font-lock-string-face fontified t rear-nonsticky t) 161 162 (face font-lock-string-face fontified t) 162 164 (fontified t)) #("echo \"ssh router@router pkill pcm.x\"
ssh router@router \"sudo pkill pcm.x\"" 0 4 (face font-lock-builtin-face fontified t) 4 5 (fontified t) 5 6 (face font-lock-string-face fontified t) 6 35 (face font-lock-string-face fontified t) 35 36 (face font-lock-string-face fontified t) 36 37 (fontified t) 37 41 (fontified t) 41 55 (fontified t) 55 67 (face font-lock-string-face fontified t) 67 73 (face font-lock-string-face fontified t)) #("

" 0 1 (fontified t) 1 2 (fontified t)) #("ccndstart &\"" 0 11 (face font-lock-string-face fontified t) 11 12 (face font-lock-string-face rear-nonsticky t fontified t)) #("echo \"ssh router@router ccndstart &\"" 0 4 (face font-lock-builtin-face fontified t) 4 5 (fontified t) 5 36 (face font-lock-string-face fontified t)) #("sleep" 0 5 (fontified t)) #(" 1 -csv\"" 0 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t rear-nonsticky t) 7 8 (face font-lock-string-face fontified t)) #("ccndstop" 0 7 (fontified t) 7 8 (rear-nonsticky t fontified t)) #("./pcm.x 1 -csv" 0 13 (fontified t) 13 14 (rear-nonsticky t fontified t)) #("echo \"ssh router@router ccndstop\"
ssh router@router ccndstop" 0 4 (face font-lock-builtin-face fontified t) 4 5 (fontified t) 5 6 (face font-lock-string-face fontified t) 6 32 (face font-lock-string-face fontified t) 32 33 (face font-lock-string-face fontified t) 33 34 (fontified t) 34 60 (fontified t)) "./pcm.x 1 -csv" "~/IntelPerformanceCounterMonitorV2.6" "sudo ./pcm.x 1 -csv > ~/CCNx_client1_3.csv" #("      echo \"client${sNum}@client${sNum} rm test0${sNum}.txt\"
      rm ./test0${sNum}.txt
      echo \"client${sNum}@client${sNum} ccngetfile ${NAME}0${sNum} ./test-${SIZE}.txt\"
      time \"ccngetfile ${NAME}0${sNum} ./test0${sNum}.txt\"
" 0 6 (fontified t) 6 10 (face font-lock-builtin-face fontified t) 10 11 (fontified t) 11 60 (face font-lock-string-face fontified t) 60 79 (fontified t) 79 83 (face font-lock-variable-name-face fontified t) 83 89 (fontified t) 89 95 (fontified t) 95 99 (face font-lock-builtin-face fontified t) 99 100 (fontified t) 100 163 (face font-lock-string-face fontified t) 163 170 (face font-lock-string-face fontified t) 170 175 (face font-lock-string-face fontified t) 175 176 (fontified t) 176 187 (fontified t) 187 234 (face font-lock-string-face fontified t) 234 235 (fontified t)) #("      echo \"client${sNum}@client${sNum} rm test0${sNum}.txt\"
      ssh client${sNum}@client${sNum} \"rm ./test0${sNum}.txt\"
      echo \"ssh client${sNum}@client${sNum} ccngetfile ${NAME}0${sNum} ./test-${SIZE}.txt\"
      ssh client${sNum}@client${sNum} \"time ccngetfile ${NAME}0${sNum} ./test0${sNum}.txt\"" 0 6 (fontified t) 6 10 (face font-lock-builtin-face fontified t) 10 11 (fontified t) 11 60 (face font-lock-string-face fontified t) 60 61 (fontified t) 61 79 (fontified t) 79 83 (fontified t face font-lock-variable-name-face) 83 93 (fontified t) 93 97 (fontified t face font-lock-variable-name-face) 97 99 (fontified t) 99 122 (fontified t face font-lock-string-face) 122 123 (fontified t) 123 129 (fontified t) 129 133 (fontified t face font-lock-builtin-face) 133 134 (fontified t) 134 201 (fontified t face font-lock-string-face) 201 208 (fontified t face font-lock-string-face) 208 213 (fontified t face font-lock-string-face) 213 214 (fontified t) 214 232 (fontified t) 232 236 (fontified t face font-lock-variable-name-face) 236 246 (fontified t) 246 250 (fontified t face font-lock-variable-name-face) 250 252 (fontified t) 252 303 (fontified t face font-lock-string-face) 303 304 (rear-nonsticky t fontified t face font-lock-string-face)) #("  elif [ ${sNum} -eq ${N} ]
      then
      echo \"client${sNum}@client${sNum} rm test0${sNum}.txt\"
      ssh client${sNum}@client${sNum} \"rm ./test0${sNum}.txt\"
      echo \"ssh client${sNum}@client${sNum} ccngetfile ${NAME}0${sNum} ./test-${SIZE}.txt\"
      ssh client${sNum}@client${sNum} \"time ccngetfile ${NAME}0${sNum} ./test0${sNum}.txt\"" 0 2 (fontified t) 2 6 (face font-lock-keyword-face fontified t) 6 11 (fontified t) 11 15 (face font-lock-variable-name-face fontified t) 15 23 (fontified t) 23 24 (face font-lock-variable-name-face fontified t) 24 25 (fontified t) 25 28 (fontified t) 28 34 (fontified t) 34 38 (face font-lock-keyword-face fontified t) 38 39 (fontified t) 39 45 (fontified t) 45 49 (face font-lock-builtin-face fontified t) 49 50 (fontified t) 50 99 (face font-lock-string-face fontified t) 99 100 (fontified t) 100 118 (fontified t) 118 122 (face font-lock-variable-name-face fontified t) 122 132 (fontified t) 132 136 (face font-lock-variable-name-face fontified t) 136 138 (fontified t) 138 161 (face font-lock-string-face fontified t) 161 162 (fontified t) 162 168 (fontified t) 168 172 (face font-lock-builtin-face fontified t) 172 173 (fontified t) 173 240 (face font-lock-string-face fontified t) 240 247 (face font-lock-string-face fontified t) 247 252 (face font-lock-string-face fontified t) 252 253 (fontified t) 253 271 (fontified t) 271 275 (face font-lock-variable-name-face fontified t) 275 285 (fontified t) 285 289 (face font-lock-variable-name-face fontified t) 289 291 (fontified t) 291 343 (face font-lock-string-face fontified t)) #(" > elapsed_${sNum}.txt" 0 13 (fontified t) 13 17 (face font-lock-variable-name-face fontified t) 17 22 (fontified t))))
(setq-default session-file-alist '(("~/Dropbox/research/energy_result/icn_acm/memory_accsess.gp" 1 294 1 nil nil 122 (overwrite-mode)) ("~/Dropbox/research/energy_result/icn_acm/cpu_cores.gp" 147 nil 1 nil nil 147 (overwrite-mode)) ("~/Dropbox/research/energy_result/icn_acm/cpu_cores.dat" 145 134 1 nil nil 145 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 7160 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/helm-20140531.1357/helm-autoloads.el" 48167 nil 1 nil nil 48167 (overwrite-mode)) ("/mnt/Dropbox/research/energy_result/icn_acm/memory_accsess.gp" 235 288 1 nil nil 193 (overwrite-mode)) ("/ssh:client1@192.168.10.85:/home/client1/get_ccnx_time.sh" 3838 2309 1 nil nil 2318 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/99_gnuplot.el" 166 61 1 nil nil 202 (overwrite-mode)) ("/mnt/Dropbox/research/energy_result/icn_acm/memory_accsess.dat" 144 1 1 nil nil 144 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 6502 nil 1 nil nil nil (overwrite-mode)) ("/ssh:router@192.168.10.80:/home/router/read_memory.c" 573 211 1 nil nil 184 (overwrite-mode)) ("/mnt/Dropbox/research/energy_result/icn_acm/udp1500byte.gp" 326 1 1 nil nil 146 (overwrite-mode)) ("/ssh:server1@192.168.10.90:/home/server1/receive.c" 713 1270 1 nil nil 700 (overwrite-mode)) ("/ssh:client1@192.168.10.85:/home/client1/send.c" 287 2155 1 nil nil 2349 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140530.2214/helm-autoloads.el" 48161 nil 1 nil nil 48161 (overwrite-mode)) ("/ssh:router@192.168.10.80:/home/router/get_ccnx_time.sh" 1 1 1 nil nil 1 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/gnuplot-20130206.1701/gnuplot-autoloads.el" 3040 nil 1 nil nil 3040 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/99_popwin.el" 732 625 1 nil nil 644 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/99_popwin.elc" 1207 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/energy_result/icn_acm/udp1500byte.gnuplot" 169 201 1 nil nil 243 (overwrite-mode)) ("/mnt/Dropbox/research/energy_result/icn_acm/udp1500byte.dat" 37 1 1 nil nil 37 (overwrite-mode)) ("/mnt/Dropbox/research/energy_result/icn_acm/udp1500byte.data" 2 1 1 nil nil 3 (overwrite-mode)) ("/mnt/Dropbox/research/energy_result/icn_acm/udp1500byte.res" 237 248 1 nil nil 284 (overwrite-mode)) ("/mnt/Dropbox/research/energy_result/icn_acm/udp1500byte.out" 620 57 1 nil nil 618 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140529.2258/helm-autoloads.el" 48167 nil 1 nil nil 48167 (overwrite-mode)) ("/ssh:router@192.168.10.80:/home/router/accsess_memory.c" 310 283 1 nil nil 203 (overwrite-mode)) ("/ssh:router@192.168.10.80:/home/router/accsess_memory" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/meeting/M2-meeting.org" 603 601 1 nil nil 603 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/M2-meeting.org_archive" 727 nil 1 nil nil 893 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/M2-meeting.tex" 64088 nil 1 nil nil nil (overwrite-mode)) ("~/result.data" 404714 nil 1 nil nil nil (overwrite-mode)) ("/ssh:server1@192.168.10.90:/home/server1/ccnx-0.7.2/csrc/ccnr/ccnr_proto.c" 51058 49658 1 nil nil 51010 (overwrite-mode)) ("~/Downloads/ccnx-0.7.2/csrc/lib/ccn_seqwriter.c" 6666 968 1 nil nil nil (overwrite-mode)) ("~/Downloads/ccnx-0.7.2/apps/HttpProxy/NetFetch.c" 2243 nil 1 nil nil nil (overwrite-mode)) ("~/Downloads/ccnx-0.7.2/csrc/cmd/ccnseqwriter.c" 3067 3126 1 nil nil 3067 (overwrite-mode)) ("~/Downloads/ccnx-0.7.2/csrc/ccnr/ccnr_proto.c" 51016 50871 1 nil nil nil (overwrite-mode)) ("~/Downloads/ccnx-0.7.2/NEWS" 33358 1 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140528.511/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140528.644/helm-autoloads.el" 48166 nil 1 nil nil 48166 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/wgrep-helm-20140528.1418/wgrep-helm-autoloads.el" 496 nil 1 nil nil 496 (overwrite-mode)) ("/mnt/Dropbox/research/section3.3/dispatcher_design_v3.org" 5027 5027 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_design_v3.org" 805 3103 1 nil nil 36 (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_design_v3.tex" 4795 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_design_v2.tex" 4795 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_design_v2.org" 2400 2228 1 nil nil 2245 (overwrite-mode)) ("/ssh:router@192.168.10.80:/home/router/test.c" 117 209 1 nil nil 117 (overwrite-mode)) ("/mnt/Dropbox/research/utils/accsess_memory.c" 14 203 1 nil nil nil (overwrite-mode)) ("~/Dropbox/research/dispatcher_design_v2.org" 1498 1875 1 nil nil 1353 (overwrite-mode)) ("~/Dropbox/test.cpp" 89 nil 1 nil nil 76 (overwrite-mode)) ("~/Dropbox/research/dispatcher_design_v2.tex" 3438 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_design.org" 1072 1072 1 nil nil 2163 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/CCNx_data_structure.org" 112 nil 1 nil nil nil (overwrite-mode)) ("~/.config/awesome/rc.lua" 21857 17686 1 nil nil 17557 (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_design.tex" 2833 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140524.117/helm-autoloads.el" 47909 nil 1 nil nil 47909 (overwrite-mode)) ("/mnt/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/my_model_single-v4.2.py" 2085 1589 1 nil nil 4274 (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_algorism.txt" 1 456 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_design_structure.org" 42 nil 1 nil nil 32 (overwrite-mode)) ("/mnt/Dropbox/research/utils/test.c" 48 48 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140519/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/analytic_model.py" 2159 1673 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/lib/__init__.py" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/lib/functions.py" 639 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/20_org-mode.el" 1212 1166 1 nil nil 1233 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auctex-11.87.5/auctex-autoloads.el" 10917 nil 1 nil nil 10917 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140523.547/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140523.639/helm-autoloads.el" 47901 nil 1 nil nil 47901 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140519/org-autoloads.el" 27237 nil 1 nil nil 27237 (overwrite-mode)) ("/ssh:router@192.168.10.80:/home/router/hoge.c" 877 1305 1 nil nil 824 (overwrite-mode)) ("/mnt/Dropbox/research/utils/packet_forwarding/forwarding.c" 2470 2303 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/snippets/org-mode/report" 50 nil 1 nil nil 149 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/utils/dummy.c" 101 nil 1 nil nil 101 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/dispatcher_design.tex" 1067 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/CCNx_data_structure.tex" 7370 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/CCNx_data_structure.org" 1139 1068 1 nil nil 1100 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/M2-meeting.org" 90 75 1 nil nil 215 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140519.650/auto-complete-autoloads.el" 1711 nil 1 nil nil 1711 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140519.2133/helm-autoloads.el" 47865 nil 1 nil nil 47865 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140517.8/helm-autoloads.el" 47895 nil 1 nil nil 47895 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140515.1959/auto-complete-autoloads.el" 1479 nil 1 nil nil 1479 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140515.1019/helm-autoloads.el" 47868 nil 1 nil nil 47868 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/M2-meeting.tex" 58722 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/url/cookies" 507 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-20140514.1649/yasnippet-autoloads.el" 1494 nil 1 nil nil 1494 (overwrite-mode)) ("/mnt/Dropbox/research/calc_pps.sh" 5 nil 1 nil nil 6 (overwrite-mode)) ("~/256result.data" 1 1 1 nil nil 141 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs.d/elpa/helm-20140531.1357/helm-autoloads.el" "~/Dropbox/research/energy_result/icn_acm/memory_accsess.gp" "~/Dropbox/research/energy_result/icn_acm/cpu_cores.dat" "~/Dropbox/research/energy_result/icn_acm/cpu_cores.gp" "~/.emacs.d/inits/99_gnuplot.el" "~/Dropbox/research/energy_result/icn_acm/memory_accsess.dat" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.gp" "/ssh:client1@192.168.10.85:/home/client1/get_ccnx_time.sh" "~/.emacs.d/elpa/helm-20140530.2214/helm-autoloads.el" "/ssh:router@192.168.10.80:/home/router/get_ccnx_time.sh" "/ssh:router@192.168.10.80:/home/router/read_memory.c" "/ssh:client1@192.168.10.85:/home/client1/send.c" "/ssh:server1@192.168.10.90:/home/server1/receive.c" "~/.emacs.d/elpa/gnuplot-20130206.1701/gnuplot-autoloads.el" "~/.emacs.d/inits/99_popwin.el" "~/.emacs.d/inits/99_popwin.elc" "~/Dropbox/research/energy_result/" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.gnuplot" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.out" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/udp1500byte.dat" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.data" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/udp1500byte.res"))
(setq-default TeX-command-history '("LatexMk" "Clean All" "Evince"))
(setq-default buffer-name-history '("*Async Shell Command*" "ssh:get_ccnx_time.sh" "udp1500byte.gp" "*gnuplot*" "udp1500byte.out" "*Moccur*" "*Org PDF LaTeX Output*" "__init__.py" "functions.py" "PKGBUILD" "ssh:hoge.c" "forwarding.c" "dummy.c" "256result.data" "ssh:receive.c" "ssh:ssh:ssh:send.c<client1>" "router" "rdtsc.h" "*Packages*" "*Macroexpansion*" "2-13 Daring!!.mp3" "*Backtrace*" "20_org-mode.el" "hote.txt" "es.org" "*init log*"))
(setq-default coding-system-history '("shift_jis" "utf-8-unix" "unix"))
(setq-default command-history '((package-list-packages nil) (find-file "~/Dropbox/research/energy_result/icn_acm/memory_accsess.gp" t) (find-file "~/Dropbox/research/energy_result/icn_acm/cpu_cores.dat" t) (find-file "~/Dropbox/research/energy_result/icn_acm/cpu_cores.gp" t) (find-file "~/Dropbox/research/energy_result/icn_acm/memory_accsess.dat" t) (insert-file "~/Dropbox/research/energy_result/icn_acm/udp1500byte.gp") (query-replace "time" "time -p" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (query-replace "10s" "3s" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (query-replace "1GB" "${SIZE}" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)))))
(setq-default extended-command-history '("package-list-packages" "count-lines-region" "eval-buffer" "yas-expand-from-trigger-key" "moccur-grep" "ispell-buffer" "describe-variable" "describe-function" "auto-complete-mode" "describe-mode" "Buffer-menu-mode" "describe-key" "eval-defun" "pascal-mode"))
(setq-default helm-c-grep-history '("valid-file" "filename"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . helm-keyboard-quit) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-ff-history '("/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/" "/home/k-ohsugi/Dropbox/meeting/withHasegawa/GreenICN/utils/"))
(setq-default helm-grep-history '("valid-file" "filename"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-comint-input-ring '((name . "Comint history") (candidates lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) (action . helm-comint-input-ring-action)))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . helm-keyboard-quit) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("pack" "gp" "gnu" "-------" "get" "ssh memo" "ssh client" "ssh" #("dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd" 0 1472 (c-in-sws t fontified t face font-lock-string-face)) "send" "rec" #("set" 0 3 (fontified t face font-lock-constant-face)) "eval" "p" "init" "pa" "eva" "gnuplot" "res" "acc" "ac" "memo" "org"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("time -p" "time" "3s" "10s" "${SIZE}" "1GB" "\"" "'" "NAME" "NAME1" "10MB" "1MB" "1024" "4096" "68" "204" "819" "COUNT" "NPARA" "50000" "10000" "45" "50" "research_2014_group_001-ccn.pdf" "research_group_001-icn.pdf" "M1" "B4" "M" "M2" "Master" "Doctor" "D3" "./figure/" "./"))
(setq-default regexp-history '("block" "blocksize"))
(setq-default search-ring '("pkill" "csv" "m}" "router" "ccndstart" "ssh" "pcm" "time" "get" "put" "elaps" "10"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("'" "4096"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
