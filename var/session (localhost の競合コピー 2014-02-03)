;;; Automatically generated on Mon Feb  3 10:10:51 2014
;;; Invoked by k-ohsugi@localhost using 24.3.1
(setq-default session-file-alist '(("/mnt/Dropbox/job_hunting/HITACHI/事業所見学会.txt" 1 247 1 nil nil 246 (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report7/report7.org" 603 395 1 nil nil 603 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 12465 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report7/report7.tex" 945 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/10_helm.el" 198 nil 1 nil nil 68 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/60_yasnippet.el" 424 nil 1 nil nil 153 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/ac-math-20131003.1604/ac-math-autoloads.el" 307 nil 1 nil nil 182 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-c-yasnippet-20140131.226/helm-c-yasnippet-autoloads.el" 801 nil 1 nil nil 801 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-20140106.1009/yasnippet-autoloads.el" 1493 nil 1 nil nil 1493 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-bundle-0.6.1/yasnippet-bundle-autoloads.el" 1278 nil 1 nil nil 1278 (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report6/report6.org" 363 1 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140201.45/helm-autoloads.el" 44449 nil 1 nil nil 44449 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140131.556/helm-autoloads.el" 44451 nil 1 nil nil 44451 (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/paper.org" 246 2293 1 nil nil 1467 (overwrite-mode)) ("/mnt/Dropbox/etc/network_seminar2_qa.org" 1108 1 1 nil nil 1108 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140130/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140130.2218/helm-autoloads.el" 44441 nil 1 nil nil 44441 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140130/org-autoloads.el" 27237 nil 1 nil nil 27237 (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/paper.tex" 6601 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/20_org-mode.el" 1589 1510 1 nil nil 1589 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/url/cookies" 505 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140128.2333/helm-autoloads.el" 44449 nil 1 nil nil 44449 (overwrite-mode)) ("~/Dropbox/meeting/withHasegawa/140129/140129_meeting.org" 457 323 1 nil nil 501 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 13180 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/meeting/withHasegawa/140129/140129_meeting.tex" 4476 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/inits/20_org-mode.el" 135 nil 1 nil nil 135 (overwrite-mode)) ("~/Dropbox/class/network_seminar2/slide.org" 184 1 1 nil nil 3204 (overwrite-mode)) ("~/Dropbox/class/basic_network/report8/report8.org" 1 262 1 nil nil 1478 (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/slide.org" 3204 nil 1 nil nil 3204 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140128.614/helm-autoloads.el" 44406 nil 1 nil nil 44406 (overwrite-mode)) ("/mnt/Dropbox/class/basic_network/report8/report8.org" 1478 679 1 nil nil 1478 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/PR.org" 342 nil 1 nil nil 326 (overwrite-mode)) ("/mnt/Dropbox/etc/company_information/company_info.org" 2264 1717 1 nil nil 2470 (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/slide.tex" 4828 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140128.14/helm-autoloads.el" 44449 nil 1 nil nil 44449 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140127/org-loaddefs.el" 86902 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140127.632/auto-complete-autoloads.el" 488 nil 1 nil nil 488 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140127/org-autoloads.el" 27237 nil 1 nil nil 27237 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/ctable-20140126.2201/ctable-autoloads.el" 180 nil 1 nil nil 180 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140127.46/helm-autoloads.el" 44450 nil 1 nil nil 44450 (overwrite-mode)) ("/mnt/Dropbox/etc/company_information/company_info.tex" 1456 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/slide.bib" 242 659 1 nil nil 659 (overwrite-mode)) ("/mnt/Dropbox/meeting/all/131224/131224_all_meeting.org" 3295 641 1 nil nil 614 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/1312xx/1312xx_M1_meeting.org" 979 816 1 nil nil 2952 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/99_aspell.el" 1 136 1 nil nil 366 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/introduction.txt" 305 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/zlc-readme.txt" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dkdo-readme.txt" 542 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/archives/gnu/archive-contents" 228 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140125.1101/helm-autoloads.el" 44449 nil 1 nil nil 44449 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/00_default.el" 4223 4222 1 nil nil 4223 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-c-yasnippet-20140117.2255/helm-c-yasnippet-autoloads.el" 802 nil 1 nil nil 802 (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/slide_structure.org" 214 129 1 nil nil 214 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/00_default.elc" 61 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/cl-lib-0.4/cl-lib-autoloads.el" 180 nil 1 nil nil 180 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/yahoo_es.org" 316 53 1 nil nil 591 (overwrite-mode)) ("/mnt/Dropbox/old/old_presentation/society12/paper.tex" 1554 1912 1 nil nil 1901 (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report6/report6.bib" 115 31 1 nil nil 14 (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report6/report6.tex" 1005 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140109.2330/helm-autoloads.el" 52957 nil 1 nil nil 52957 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-c-yasnippet-20140108.2238/helm-c-yasnippet-autoloads.el" 210 nil 1 nil nil 210 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/multi-term-20140109.502/multi-term-autoloads.el" 1341 nil 1 nil nil 1341 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/snippets/org-mode/beamer" 152 nil 1 nil nil 207 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/snippets/org-mode/report" 50 nil 1 nil nil 247 (overwrite-mode)) ("/mnt/Dropbox/class/basic_network/report8/report8.org_archive" 118 nil 1 nil nil 380 (overwrite-mode)) ("/mnt/Dropbox/class/basic_network/report8/report8.tex" 2371 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/init.el" 1 nil 1 nil nil 983 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140107/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140108.559/dash-autoloads.el" 172 nil 1 nil nil 172 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140108.738/helm-autoloads.el" 52915 nil 1 nil nil 52915 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-c-yasnippet-20140108.643/helm-c-yasnippet-autoloads.el" 209 nil 1 nil nil 209 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140107/org-autoloads.el" 27229 nil 1 nil nil 27229 (overwrite-mode)) ("~/Dropbox/configure/.zshrc" 1024 908 1 nil nil 1037 (overwrite-mode)) ("~/.config/awesome/rc.lua" 21693 21675 1 nil nil 21692 (overwrite-mode)) ("/sudo:root@VAIO:/etc/acpi/actions/handler.sh" 1 685 1 nil nil 866 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140106/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/auctex-latexmk-20140107.215/auctex-latexmk-autoloads.el" 467 nil 1 nil nil 467 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140106/org-autoloads.el" 27239 nil 1 nil nil 27239 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/yasnippet-20140106.1009/yasnippet-autoloads.el" 1493 nil 1 nil nil 1493 (overwrite-mode)) ("/sudo:root@VAIO:/etc/default/grub" 155 53 1 nil nil 132 (overwrite-mode)) ("/etc/default/grub" 30 nil 1 nil nil nil (overwrite-mode)) ("/sudo:root@VAIO:/etc/grub.d/10_linux" 788 1 1 nil nil nil (overwrite-mode)) ("/sudo:root@VAIO:/etc/grub.d/00_header" 2917 1060 1 nil nil nil (overwrite-mode)) ("/etc/grub.d/00_header" 1674 nil 1 nil nil nil (overwrite-mode)) ("/sudo:root@VAIO:/boot/grub/grub.cfg" 3215 2083 1 nil nil 3216 (overwrite-mode)) ("/boot/grub/grub.cfg" 5136 nil 1 nil nil nil (overwrite-mode)) ("/boot/grub/grub.cfg.example" 4064 nil 1 nil nil nil (overwrite-mode)) ("~/.zsh_history" 23147 19247 1 nil nil 23192 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140104/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/awesome/rc.lua" 8322 8321 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/awesome/wi.lua" 8952 8432 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/awesome/themes/dust/theme.lua" 122 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140105.615/helm-autoloads.el" 52924 nil 1 nil nil 52924 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140104/org-autoloads.el" 27231 nil 1 nil nil 27231 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/dash-20140103.1117/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/etc/acpi/actions/handler.sh" 1 nil 1 nil nil nil (overwrite-mode))))
(setq-default TeX-command-history '("LatexMk" "BibTeX" "Clean All" "Evince" "Acroread"))
(setq-default bibtex-key-history '("tsuda13"))
(setq-default buffer-name-history '("*new snippet*" "*Moccur*" "ac-math.el" "*Backtrace*" "131224_all_meeting.rip" "comic-list.org" "*init log*" "*Org Src 131216_M1_meeting.org[ python ]*" "*scratch*" "*Org Table Edit Field*" "131216_M1_meeting.html"))
(setq-default command-history '((find-file "~/Dropbox/job_hunting/HITACHI/事業所見学会.txt" t) (kill-buffer "*new snippet*") (find-file "~/.emacs.d/inits/" t) (find-file "~/.emacs.d/inits/10_helm.el" t) (package-list-packages nil) (execute-extended-command nil "package-list-packages") (find-file "~/Dropbox/class/mobile_protocol/report6/report6.org" t) (find-file "~/Dropbox/class/mobile_protocol/" t)))
(setq-default extended-command-history '("package-list-packages" "ispell-buffer" "eval-buffer" "ispell-minor-mode" "flyspell-mode" "elp-results" "count-lines-region" "moccur-grep" "count-words-region" "org-display-inline-images" "org-toggle-inline-images" "org-redisplay-inline-images" "org-edit-src-code" "describe-key" "org-src-mode" "org-version" "pascal-mode"))
(setq-default helm-c-grep-history '("interest" "yasnippet" "k-ohsugi" "wpa_pass" "wpa_passp" "icon"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . previous-line) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-grep-history '("interest" "yasnippet" "k-ohsugi" "wpa_pass" "wpa_passp" "icon"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . previous-line) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("org" ".el" "pa" "ini" "60" "-------" "helm" "
" #("**" 0 1 (fontified t face org-level-2) 1 2 (fontified t face org-level-2)) "ispe" "i" "ce" "tex" "o" "eva" "eval" "org-mode" "ispell-b" "k" "/home/k-ohsugi/" "rep" "p" "binding"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("サーバ" "サーバー" "ルータ" "ルーター" "CCN" "ICN" "right" "left" "right_wibox" "left_graphbox" "face" "Face"))
(setq-default read-expression-history '("ac-sources"))
(setq-default regexp-history '("noncq" "volicon" "cpupct" "/etc/acpi/"))
(setq-default search-ring '("yasnippet" "helm-c" "helm-c-ya" "helm-c	" "を" "ルーター" "サーバー" "scrip" "seq" "data" "端末" "ユーザ" "到着するように" "jpg"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
