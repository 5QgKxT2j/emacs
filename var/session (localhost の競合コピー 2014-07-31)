;;; Automatically generated on Thu Jul 31 12:20:42 2014
;;; Invoked by k-ohsugi@localhost using 24.3.1
(setq-default kill-ring '("% Created 2014-07-29 火 17:57
\\documentclass[a4j,10pt,uplatex]{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
 \\usepackage[dvipdfmx,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{pxjahyper}
 \\usepackage{bookmark}
 \\usepackage{url}
\\usepackage[top=20truemm,bottom=20truemm,left=20truemm,right=20truemm]{geometry}
\\author{Kaito Ohsugi}
\\date{\\today}
\\title{コメント対処}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.7b)}}
\\begin{document}

\\maketitle

\\section{対処案}
\\label{sec-1}

The idea of the paper - to model the power consumption of an ICN
network - is interesting. My main concern with the approach the paper
is following is that it is extremely narrow in terms of applicable
scope, much narrow than the rather generic title suggests: The model
presented only really applies to the NDNx implementation of NDN (and a
modified version that better exploits multiple cores at that), and
only when that implementation is run on x86 architectures that cache
in DRAM and transmit over wired Ethernet interfaces.

対処案 (長期)

対処案 (短期)
% Emacs 24.3.1 (Org mode 8.2.7b)
\\end{document}" #("対処案(長期)" 0 7 (fontified t)) "% Created 2014-07-29 火 17:57
\\documentclass[a4j,10pt,uplatex]{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
 \\usepackage[dvipdfmx,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{pxjahyper}
 \\usepackage{bookmark}
 \\usepackage{url}
\\usepackage[top=20truemm,bottom=20truemm,left=20truemm,right=20truemm]{geometry}
\\author{Kaito Ohsugi}
\\date{\\today}
\\title{コメント対処}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.7b)}}
\\begin{document}

\\maketitle

\\section{対処案}
\\label{sec-1}
The idea of the paper - to model the power consumption of an ICN
network - is interesting. My main concern with the approach the paper
is following is that it is extremely narrow in terms of applicable
scope, much narrow than the rather generic title suggests: The model
presented only really applies to the NDNx implementation of NDN (and a
modified version that better exploits multiple cores at that), and
only when that implementation is run on x86 architectures that cache
in DRAM and transmit over wired Ethernet interfaces.
% Emacs 24.3.1 (Org mode 8.2.7b)
\\end{document}" "The idea of the paper - to model the power consumption of an ICN network - is interesting. My main concern with the approach the paper is following is that it is extremely narrow in terms of applicable scope, much narrow than the rather generic title suggests: The model presented only really applies to the NDNx implementation of NDN (and a modified version that better exploits multiple cores at that), and only when that implementation is run on x86 architectures that cache in DRAM and transmit over wired Ethernet interfaces." #("
" 0 1 (fontified t)) #("* 2014 年 7 月 28 日" 0 2 (face org-level-1 fontified t) 2 17 (face org-level-1 fontified t))))
(setq-default session-file-alist '(("/mnt/Dropbox/research/meeting/icn_acm_comment.org" 853 845 1 nil nil 847 (overwrite-mode)) ("/mnt/Dropbox/storage/scfes.org" 27 29 1 nil nil 28 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/ICN-meeting.org" 17194 178 1 nil nil 202 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/icn_acm_comment.tex" 1162 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 9914 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140728/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140727.2300/helm-autoloads.el" 41183 nil 1 nil nil 41183 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140728/org-autoloads.el" 27227 nil 1 nil nil 27227 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-20140728.1523/yasnippet-autoloads.el" 1492 nil 1 nil nil 1492 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/router_design.org" 1916 1738 1 nil nil 1916 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/router_design.tex" 2929 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/meeting/ICN-meeting.tex" 24096 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140726.303/auto-complete-autoloads.el" 1716 nil 1 nil nil 1716 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140727.921/helm-autoloads.el" 41231 nil 1 nil nil 41231 (overwrite-mode)) ("/sudo:root@desktop:/etc/lxdm/PostLogin" 66 66 1 nil nil 66 (overwrite-mode)) ("~/.xprofile" 83 1 1 nil nil 83 (overwrite-mode)) ("~/.xinitrc" 86 86 1 nil nil 86 (overwrite-mode)) ("~/.config/awesome/rc.lua" 20951 1 1 nil nil 21255 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140721/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auctex-11.87.7/auctex-autoloads.el" 10917 nil 1 nil nil 10917 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140725.953/helm-autoloads.el" 41210 nil 1 nil nil 41210 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140721/org-autoloads.el" 27237 nil 1 nil nil 27237 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/snippets/org-mode/report" 50 nil 1 nil nil 304 (overwrite-mode)) ("~/Dropbox/research/meeting/ICN-meeting.org" 2310 2327 1 nil nil 2310 (overwrite-mode)) ("~/Dropbox/research/memo.org" 12 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/research/meeting/ICN-meeting.tex" 20715 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 8571 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140714/org-loaddefs.el" 86895 nil 1 nil nil 86895 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/auctex-11.87.6/auctex-autoloads.el" 10920 nil 1 nil nil 10920 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/helm-20140721.32/helm-autoloads.el" 41226 nil 1 nil nil 41226 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140714/org-autoloads.el" 27239 nil 1 nil nil 27239 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/yasnippet-20140720.1534/yasnippet-autoloads.el" 1494 nil 1 nil nil 1494 (overwrite-mode)) ("/mnt/Dropbox/storage/cloth.org" 34 85 1 nil nil 83 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14/abstract.org" 727 506 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140705.320/helm-autoloads.el" 42222 nil 1 nil nil 42222 (overwrite-mode)) ("/mnt/Dropbox/myfile.txt" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/10_helm.el" 1682 333 1 nil nil 343 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140703.2108/helm-autoloads.el" 42258 nil 1 nil nil 42258 (overwrite-mode)) ("~/.mozilla/firefox/sg4susle.default-1376407928725/chaika/skin/DefaultKaiKai/Readme.txt" 7609 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paperv0.6.tex" 282 282 1 nil nil 2532 (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/abstract.org" 286 1 1 nil nil 323 (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paperv0.5.tex" 2748 2749 1 nil nil 2737 (overwrite-mode)) ("/mnt/Dropbox/configure/.zshrc" 1935 1930 1 nil nil 1935 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/00_default.el" 2316 1 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/20_org-mode.el" 1 555 1 nil nil 1965 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/snippets/org-mode/figure" 50 nil 1 nil nil 91 (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paperv0.4.tex" 523 1679 1 nil nil 3894 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140630/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140629.2320/helm-autoloads.el" 42602 nil 1 nil nil 42602 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140630/org-autoloads.el" 27237 nil 1 nil nil 27237 (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paperv0.3.tex" 2953 3421 1 nil nil 3715 (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paper.aux" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auctex-latexmk-20140627.2146/auctex-latexmk-autoloads.el" 466 nil 1 nil nil 466 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140627.2341/dash-autoloads.el" 173 nil 1 nil nil 173 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140629.39/helm-autoloads.el" 42605 nil 1 nil nil 42605 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/lua-mode-20140628.1505/lua-mode-autoloads.el" 511 nil 1 nil nil 511 (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paper.tex" 247 246 1 nil nil 1760 (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/ieicejsp.cls" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paper (VAIO の競合コピー 2014-06-26).tex" 1778 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paper.org" 656 nil 1 nil nil 322 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140625.252/helm-autoloads.el" 42605 nil 1 nil nil 42605 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140623/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/helm-20140624.2318/helm-autoloads.el" 42605 nil 1 nil nil 42605 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/lua-mode-20140623.1237/lua-mode-autoloads.el" 510 nil 1 nil nil 510 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140623/org-autoloads.el" 27238 nil 1 nil nil 27238 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140621.2211/helm-autoloads.el" 42606 nil 1 nil nil 42606 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/s-20140620.1657/s-autoloads.el" 165 nil 1 nil nil 165 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-20140617.1640/yasnippet-autoloads.el" 1494 nil 1 nil nil 1494 (overwrite-mode)) ("/sudo:root@desktop:/etc/X11/xorg.conf.d/10-monitor.conf" 289 nil 1 nil nil 138 (overwrite-mode)) ("/mnt/Dropbox/storage/keys-TA/it-keys_ta.org" 1042 nil 1 nil nil nil (overwrite-mode)) ("~/Downloads/作業割り当て.txt" 1 nil 1 nil nil 260 (overwrite-mode)) ("~/Downloads/作業割り当て.txtm" 1 nil 1 nil nil 2 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/epc-20140609.2234/epc-autoloads.el" 179 nil 1 nil nil 179 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/M2-meeting.org" 15 202 1 nil nil 15 (overwrite-mode)) ("/mnt/Dropbox/research/poster_introduction/paper.org" 224 4371 1 nil nil 4448 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/M2-meeting.tex" 794 nil 1 nil nil nil (overwrite-mode)) ("/sudo:root@localhost:/etc/X11/xorg.conf.d/20-gpudriver.conf" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140608.753/helm-autoloads.el" 48154 nil 1 nil nil 48154 (overwrite-mode)) ("/mnt/Dropbox/research/poster_introduction/paper.tex" 7591 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140607.2258/helm-autoloads.el" 48114 nil 1 nil nil 48114 (overwrite-mode)) ("~/.config/awesome/themes/theme.lua" 1765 318 1 nil nil 240 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140607.33/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140605.1908/auto-complete-autoloads.el" 1715 nil 1 nil nil 1715 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140605.1156/helm-autoloads.el" 48156 nil 1 nil nil 48156 (overwrite-mode))))
(setq-default TeX-command-history '("Evince" "LatexMk" "LaTeX" "Clean All"))
(setq-default buffer-name-history '("ICN-meeting.org" "*Backtrace*" "ieicejsp.cls" "report8.org" "udp1500byte.gp" "memory_accsess.dat" "*scratch*" "*Async Shell Command*" "ssh:get_ccnx_time.sh" "*gnuplot*" "udp1500byte.out" "*Moccur*" "*Org PDF LaTeX Output*" "__init__.py" "functions.py" "PKGBUILD" "ssh:hoge.c" "forwarding.c" "dummy.c" "256result.data" "ssh:receive.c" "ssh:ssh:ssh:send.c<client1>" "router" "rdtsc.h" "*Packages*" "*Macroexpansion*" "2-13 Daring!!.mp3" "20_org-mode.el" "hote.txt" "es.org" "*init log*"))
(setq-default coding-system-history '("shift_jis" "utf-8-unix" "unix"))
(setq-default command-history '((find-file "~/Dropbox/research/meeting/icn_acm_comment.org" t) (package-list-packages nil) (find-file "~/Dropbox/research/meeting/router_design.org" t) (find-file "/etc/lxdm/PostLogin" t) (find-file "/home/corgi/.config/awesome/rc.lua" t) (query-replace "15" "20" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (yas-load-snippet-buffer-and-close (quote org-mode) nil) (find-file "~/Dropbox/research/memo.org" t) (find-file "~/Dropbox/research/meeting/" t) (kill-buffer "ICN-meeting.org") (find-file "~/.config/awesome/rc.lua" t) (kill-buffer "*Backtrace*") (write-file "/mnt/Dropbox/research/work/society14/paperv0.6.tex" t) (find-file "/mnt/Dropbox/research/work/society14/paperv0.5.tex" t) (count-lines-region 1 323 nil) (count-lines-region 1 375 nil) (count-lines-region 1 195 nil) (find-file "/mnt/Dropbox/research/work/society14/abstract.org" t) (write-file "/mnt/Dropbox/research/work/society14/paperv0.5.tex" t) (find-file "~/.zshrc" t) (find-file "~/.emacs.d/inits/00_default.el" t)))
(setq-default extended-command-history '("package-list-packages" "count-lines-region" "ispell-buffer" "eval-buffer" "yas-expand-from-trigger-key" "moccur-grep" "describe-variable" "describe-function" "auto-complete-mode" "describe-mode" "Buffer-menu-mode" "describe-key" "eval-defun" "pascal-mode"))
(setq-default helm-c-grep-history '("valid-file" "filename"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . kill-region) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-ff-history '("/home/k-ohsugi/" "/mnt/Dropbox/.dropbox.cache/" "/mnt/Dropbox/configure/.emacs.d/inits/" "/mnt/Dropbox/research/meeting/" "/mnt/Dropbox/research/work/society14/" "/mnt/Dropbox/storage/" "/home/corgi/Dropbox/storage/" "/home/corgi/" "/mnt/Dropbox/" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/" "/home/k-ohsugi/Dropbox/meeting/withHasegawa/GreenICN/utils/"))
(setq-default helm-grep-history '("valid-file" "filename"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-comint-input-ring '((name . "Comint history") (candidates lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) (action . helm-comint-input-ring-action)))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . kill-region) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("scfe" "org" "pack" "icn" "rc.lua" "org-mode" "report" "cl" "-------" "abst" "scfes" "helm" "evince paperv0.6.pdf" "tex" #("慮するよう拡張した．" 0 9 (fontified t) 9 10 (rear-nonsticky t fontified t)) #("のアクセスが消費する電力も考慮するよう拡張した．" 0 24 (fontified t)) "evince paperv0.5.pdf" "zshr" "/home/k-ohsugi/.ema" "/mnt/Dropbox/configure/.emacs.d/inits/" #("fig" 0 3 (face font-lock-comment-face fontified t)) "pac" "evince paperv0.4.pdf" "/mnt/Dropbox/research/meeting/" "/mnt/Dropbox/research/work/society14/paperv0.4.tex" "/mnt/Dropbox/storage/scfes.org" "evince paperv0.3.pdf" "7x2" "/home/corgi/Dropbox/storage/cloth.org" "/home/corgi/drop" "/mnt/Dropbox/research/work/society14/pap" "evince paper.pdf" #("mincho" 0 6 (fontified t)) "/mnt/Dropbox/research/work/society14/" "/mnt/Dropbox/" "figure"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("20" "15" "screen.count ()" "2" "time -p" "time" "3s" "10s" "${SIZE}" "1GB" "\"" "'" "NAME" "NAME1" "10MB" "1MB" "1024" "4096" "68" "204" "819" "COUNT" "NPARA" "50000" "10000" "45" "50" "research_2014_group_001-ccn.pdf" "research_group_001-icn.pdf" "M1" "B4" "M" "M2" "Master" "Doctor" "D3" "./figure/" "./"))
(setq-default regexp-history '("block" "blocksize"))
(setq-default search-ring '("ここで" "値" "bfast" "regi" "geo" "in" "$" "ccn" "icn" "マルチコア" "31" "tex" "pdf" "ls_" "colors" "ls"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("'" "4096"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
