;;; Automatically generated on Wed Jan 15 17:31:50 2014
;;; Invoked by k-ohsugi@VAIO using 24.3.1
(setq-default kill-ring '("



" "@article{Carofiglio,
author = {Carofiglio, Giovanna and Gallo, Massimo and Muscariello, Luca and Papalini, Michele},
file = {::},
journal = {perso.rd.francetelecom.fr},
number = {i},
title = {{Multipath Congestion Control in Content-Centric Networks}},
url = {http://perso.rd.francetelecom.fr/muscariello/papers/paper-M-CC.pdf}
}" #(" CCN では，ネットワーク
上の各 CCN ルータが，中継したコンテンツをキャッシュし，次に同じコンテン
ツの要求が来た際に再利用を行う． CCN ルータを仮想化することにより，単一
の CCN ネットワーク 上で，論理的に独立した複数の仮想ネットワーク (VCCN
スライス) を構築することが可能となる． VCCN スライスを構成する VCCN ルー
タに対して， CCN ルータの資源をどのように割り当てるかによって，ネットワー
ク性能が大きく変化する．そこで，各 VCCN ルータへのコンテンツの割り当て
方式および各スライスにおけるコンテンツ要求パターンが，ネットワーク全体
の性能および各スライス間の公平性に与える影響を解析的に明らかにする．

" 0 14 (fontified t) 14 15 (fontified t) 15 53 (fontified t) 53 54 (fontified t) 54 92 (fontified t) 92 93 (fontified t) 93 134 (fontified t) 134 135 (fontified t) 135 178 (fontified t) 178 179 (fontified t) 179 218 (fontified t) 218 219 (fontified t) 219 257 (fontified t) 257 258 (fontified t) 258 293 (fontified t) 293 294 (fontified t) 294 328 (fontified t) 328 329 (fontified t rear-nonsticky t) 329 330 (fontified t)) "近年，新たなネットワークアーキテクチャの一つとして， CCN
(Content-Centric Networking) が注目されている． CCN では，ネットワーク
上の各 CCN ルータが，中継したコンテンツをキャッシュし，次に同じコンテン
ツの要求が来た際に再利用を行う． CCN ルータを仮想化することにより，単一
の CCN ネットワーク 上で，論理的に独立した複数の仮想ネットワーク (VCCN
スライス) を構築することが可能となる． VCCN スライスを構成する VCCN ルー
タに対して， CCN ルータの資源をどのように割り当てるかによって，ネットワー
ク性能が大きく変化する．そこで，各 VCCN ルータへのコンテンツの割り当て
方式および各スライスにおけるコンテンツ要求パターンが，ネットワーク全体
の性能および各スライス間の公平性に与える影響を解析的に明らかにする．
" "old/old_presentation/graduation_thesis/" #("| カラマーゾフの兄弟 4                |      |
" 0 37 (face org-table fontified t) 37 38 (fontified t)) #("| 金持ち父さん貧乏父さん              |      |
" 0 35 (face org-table fontified t) 35 36 (fontified t)) #("| MRI                      | 自由        |             | ○            |
" 0 2 (face org-table fontified t) 2 5 (face org-table fontified t) 5 29 (face org-table fontified t) 29 31 (face org-table fontified t) 31 55 (face org-table fontified t) 55 56 (face org-table fontified t) 56 69 (face org-table fontified t) 69 70 (fontified t)) #("|                          |             |             |               |
" 0 42 (face org-table fontified t) 42 55 (face org-table fontified t) 55 72 (face org-table fontified t) 72 73 (fontified t)) #("|                          |             |             |               |
" 0 42 (face org-table fontified t) 42 72 (face org-table fontified t) 72 73 (fontified t)) #("|                                     |      |
" 0 39 (face org-table fontified t) 39 46 (face org-table fontified t) 46 47 (fontified t)) #("


|----------------------+------|
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 34 (fontified t face org-table) 34 35 (fontified t)) #("|                                     |      |" 0 39 (fontified t face org-table) 39 46 (fontified t face org-table)) #("| カラマーゾフの兄弟 4  |      |" 0 2 (fontified t) 2 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 22 (fontified t) 22 23 (rear-nonsticky t fontified t)) " カラマーゾフの兄弟〈５〉エピローグ別巻" #("| カラマーゾフの兄弟 4  |      |" 0 2 (fontified t face org-table) 2 10 (fontified t face org-table) 10 11 (fontified t face org-table) 11 12 (fontified t face org-table) 12 13 (fontified t face org-table) 13 14 (fontified t face org-table) 14 15 (fontified t face org-table) 15 16 (fontified t face org-table) 16 22 (fontified t face org-table) 22 23 (fontified t rear-nonsticky t face org-table)) "0" #("
|                      |      |
|                      |      |" 0 1 (fontified t) 1 25 (face org-table fontified t) 25 32 (face org-table fontified t) 32 33 (fontified t) 33 57 (face org-table fontified t) 57 64 (face org-table fontified t)) #("| カラマーゾフの兄弟1  |      |" 0 2 (fontified t face org-table) 2 12 (fontified t face org-table) 12 22 (fontified t face org-table))))
(setq-default session-file-alist '(("~/Dropbox/class/network_seminar2/title.org" 204 45 1 nil nil 166 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 12912 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/job_hunting/resarch_introduction.txt" 32 1 1 nil nil 364 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140113/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 12938 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140114.1257/dash-autoloads.el" 173 nil 1 nil nil 173 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140114.920/helm-autoloads.el" 52952 nil 1 nil nil 52952 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140113/org-autoloads.el" 27229 nil 1 nil nil 27229 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/05_font.el" 272 nil 1 nil nil 268 (overwrite-mode)) ("/mnt/Dropbox/etc/company_information/company_info.org" 1173 nil 1 nil nil 1173 (overwrite-mode)) ("/mnt/Dropbox/configure/chaika/skin/Bow/general.js" 1 10567 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/etc/book_list/book_list.org" 838 1037 1 nil nil 838 (overwrite-mode)) ("/mnt/Dropbox/etc/company_information/company_info.tex" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/chaika/skin/Bow/popup.js" 11447 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140112.932/helm-autoloads.el" 52993 nil 1 nil nil 52993 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140110.2100/helm-autoloads.el" 52996 nil 1 nil nil 52996 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-c-yasnippet-20140110.2103/helm-c-yasnippet-autoloads.el" 210 nil 1 nil nil 210 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/url/cookies" 509 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140109.2344/helm-autoloads.el" 52992 nil 1 nil nil 52992 (overwrite-mode)) ("/mnt/Dropbox/class/basic_network/report8/report8.org" 1478 679 1 nil nil 879 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/snippets/org-mode/beamer" 152 nil 1 nil nil 207 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/snippets/org-mode/report" 50 nil 1 nil nil 247 (overwrite-mode)) ("/mnt/Dropbox/class/basic_network/report8/report8.org_archive" 118 nil 1 nil nil 380 (overwrite-mode)) ("/mnt/Dropbox/class/basic_network/report8/report8.tex" 2371 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/init.el" 1 nil 1 nil nil 983 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140107/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140108.559/dash-autoloads.el" 172 nil 1 nil nil 172 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140108.738/helm-autoloads.el" 52915 nil 1 nil nil 52915 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-c-yasnippet-20140108.643/helm-c-yasnippet-autoloads.el" 209 nil 1 nil nil 209 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140107/org-autoloads.el" 27229 nil 1 nil nil 27229 (overwrite-mode)) ("~/Dropbox/configure/.zshrc" 1024 908 1 nil nil 1037 (overwrite-mode)) ("~/.config/awesome/rc.lua" 21693 21675 1 nil nil 21692 (overwrite-mode)) ("/sudo:root@VAIO:/etc/acpi/actions/handler.sh" 1 685 1 nil nil 866 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140106/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/auctex-latexmk-20140107.215/auctex-latexmk-autoloads.el" 467 nil 1 nil nil 467 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140106/org-autoloads.el" 27239 nil 1 nil nil 27239 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/yasnippet-20140106.1009/yasnippet-autoloads.el" 1493 nil 1 nil nil 1493 (overwrite-mode)) ("/sudo:root@VAIO:/etc/default/grub" 155 53 1 nil nil 132 (overwrite-mode)) ("/etc/default/grub" 30 nil 1 nil nil nil (overwrite-mode)) ("/sudo:root@VAIO:/etc/grub.d/10_linux" 788 1 1 nil nil nil (overwrite-mode)) ("/sudo:root@VAIO:/etc/grub.d/00_header" 2917 1060 1 nil nil nil (overwrite-mode)) ("/etc/grub.d/00_header" 1674 nil 1 nil nil nil (overwrite-mode)) ("/sudo:root@VAIO:/boot/grub/grub.cfg" 3215 2083 1 nil nil 3216 (overwrite-mode)) ("/boot/grub/grub.cfg" 5136 nil 1 nil nil nil (overwrite-mode)) ("/boot/grub/grub.cfg.example" 4064 nil 1 nil nil nil (overwrite-mode)) ("~/.zsh_history" 23147 19247 1 nil nil 23192 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140104/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/awesome/rc.lua" 8322 8321 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/awesome/wi.lua" 8952 8432 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/awesome/themes/dust/theme.lua" 122 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140105.615/helm-autoloads.el" 52924 nil 1 nil nil 52924 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140104/org-autoloads.el" 27231 nil 1 nil nil 27231 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/dash-20140103.1117/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/etc/acpi/actions/handler.sh" 1 nil 1 nil nil nil (overwrite-mode))))
(setq-default file-name-history '("/tmp/115_1389799402614.eml" "~/Dropbox/job_hunting/resarch_introduction.txt" "~/Dropbox/class/network_seminar2/title.org" "/tmp/packerbuild-1000/iron-bin/iron-bin/iron-bin.install" "/tmp/packerbuild-1000/iron-bin/iron-bin/PKGBUILD" "~/Dropbox/old/old_presentation/" "~/Dropbox/class/network_seminar2" "~/Dropbox/class/" "~/.emacs.d/elpa/dash-20140114.1257/dash-autoloads.el" "~/.emacs.d/elpa/helm-20140114.920/helm-autoloads.el" "~/.emacs.d/elpa/org-20140113/org-loaddefs.el" "~/.emacs.d/elpa/org-20140113/org-autoloads.el" "~/.emacs.d/inits/05_font.el" "/home/k-ohsugi/Dropbox/configure/chaika/skin/Bow/popup.js" "/home/k-ohsugi/Dropbox/configure/chaika/skin/Bow/general.js" "~/Dropbox/etc/book_list/book_list.org" "~/Dropbox/etc/company_information/company_info.org" "~/Dropbox/etc/company_information/company_info.tex" "~/.emacs.d/elpa/helm-20140112.932/helm-autoloads.el" "~/.emacs.d/elpa/helm-20140110.2100/helm-autoloads.el" "~/.emacs.d/elpa/helm-c-yasnippet-20140110.2103/helm-c-yasnippet-autoloads.el" "~/.emacs.d/elpa/helm-20140109.2344/helm-autoloads.el" "/mnt/Dropbox/configure/.emacs.d/init.el" "~/Dropbox/class/basic_network/report8/report8.org_archive" "~/.emacs.d/snippets/org-mode/beamer" "~/.emacs.d/snippets/org-mode/report" "~/Dropbox/class/basic_network/report8/report8.org" "~/Dropbox/class/basic_network/report8" "~/Dropbox/class/basic_network/" "~/.emacs.d/elpa/dash-20140108.559/dash-autoloads.el" "~/.emacs.d/elpa/helm-20140108.738/helm-autoloads.el" "~/.emacs.d/elpa/helm-c-yasnippet-20140108.643/helm-c-yasnippet-autoloads.el" "~/.emacs.d/elpa/org-20140107/org-loaddefs.el" "~/.emacs.d/elpa/org-20140107/org-autoloads.el" "~/.zshrc" "~/.config/awesome/rc.lua" "/sudo:root@VAIO:/etc/acpi/actions/handler.sh" "/etc/acpi/actions/handler.sh" "~/.emacs.d/elpa/auctex-latexmk-20140107.215/auctex-latexmk-autoloads.el" "~/.emacs.d/elpa/org-20140106/org-loaddefs.el" "~/.emacs.d/elpa/org-20140106/org-autoloads.el" "~/.emacs.d/elpa/yasnippet-20140106.1009/yasnippet-autoloads.el" "/sudo:root@VAIO:/etc/default/grub" "/etc/default/" "/etc/default/grub" "/sudo:root@VAIO:/etc/grub.d/10_linux" "/sudo:root@VAIO:/etc/grub.d/00_header" "/etc/grub.d/" "/etc/grub.d/00_header" "/sudo:root@VAIO:/boot/grub/grub.cfg" "/boot/grub/grub.cfg" "/boot/grub/grub.cfg.example" "/boot/grub/" "~/.zsh_history" "/home/k-ohsugi/.zsh_history" "/home/k-ohsugi/Dropbox/awesome/themes/dust/theme.lua" "/home/k-ohsugi/Dropbox/awesome/wi.lua" "/home/k-ohsugi/Dropbox/awesome/rc.lua" "~/Dropbox/memo.org" "~/.emacs.d/elpa/helm-20140105.615/helm-autoloads.el" "~/.emacs.d/elpa/org-20140104/org-loaddefs.el" "~/.emacs.d/elpa/org-20140104/org-autoloads.el" "~/.emacs.d/elpa/dash-20140103.1117/dash-autoloads.el" "~/.config/awesome/wi.lua" "/home/k-ohsugi/.config/awesome/themes/dust/theme.lua" "/sudo:root@VAIO:/etc/systemd/system/multi-user.target.wants/dropbox@k-ohsugi.service" "/etc/systemd/system/" "~/.emacs.d/elpa/helm-20140102.628/helm-autoloads.el" "~/.emacs.d/elpa/yasnippet-20131231.758/yasnippet-autoloads.el" "/sudo:root@VAIO:/etc/acpi/events/anything" "/sudo:root@VAIO:/etc/acpi/actions/toggle-touchpad.sh" "/etc/acpi/actions/" "/etc/acpi/actions/toggle-touchpad.sh"))
(setq-default TeX-command-history '("LatexMk" "Evince" "Clean All" "Acroread"))
(setq-default buffer-name-history '("*Moccur*" "ac-math.el" "*Backtrace*" "131224_all_meeting.rip" "comic-list.org" "*init log*" "*Org Src 131216_M1_meeting.org[ python ]*" "*scratch*" "*Org Table Edit Field*" "131216_M1_meeting.html"))
(setq-default command-history '((find-file "~/Dropbox/job_hunting/resarch_introduction.txt" t) (find-file "~/Dropbox/old/old_presentation/" t) (find-file "~/Dropbox/class/network_seminar2/title.org" t) (dired-create-directory "~/Dropbox/class/network_seminar2") (find-file "~/Dropbox/class/" t) (yas-load-snippet-buffer-and-close (quote org-mode) nil) (find-file "~/Dropbox/class/basic_network/report8/report8.org" t) (dired-create-directory "~/Dropbox/class/basic_network/report8") (find-file "~/Dropbox/class/basic_network/" t) (find-file "/etc/acpi/actions/handler.sh" t) (find-file "/sudo:root@VAIO:/etc/default/grub" t) (find-file "/etc/default/" t) (moccur-grep "/sudo:root@VAIO:/etc/grub.d/" (quote ("noncq"))) (find-file "/sudo:root@VAIO:/etc/grub.d/10_linux" t) (find-file "/etc/grub.d/" t) (find-file "/boot/grub/grub.cfg" t) (find-file "/boot/grub/" t) (find-file "~/.zsh_history" t) (find-file "~/.zshrc" t) (find-file "~/.config/awesome/rc.lua" t) (find-file "~/Dropbox/memo.org" t) (query-replace "left" "right" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (kill-buffer "*Moccur*") (moccur-grep "~/.config/awesome/" (quote ("volicon"))) (query-replace "right" "left" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (query-replace "left_graphbox" "right_wibox" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (find-file "~/.config/awesome/wi.lua" t) (moccur-grep "~/.config/awesome/" (quote ("cpupct")))))
(setq-default extended-command-history '("count-words-region" "package-list-packages" "moccur-grep" "count-lines-region" "flyspell-mode" "eval-buffer" "yas-reload-all" "org-display-inline-images" "org-toggle-inline-images" "org-redisplay-inline-images" "org-edit-src-code" "describe-key" "org-src-mode" "org-version" "pascal-mode"))
(setq-default helm-c-grep-history '("k-ohsugi" "wpa_pass" "wpa_passp" "icon"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . backward-char) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-grep-history '("k-ohsugi" "wpa_pass" "wpa_passp" "icon"))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . backward-char) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("wor" "pa" "font" "book" "compan" "com" "beamer" "org-mode" "report"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("right" "left" "right_wibox" "left_graphbox" "face" "Face"))
(setq-default read-expression-history '("ac-sources"))
(setq-default regexp-history '("noncq" "volicon" "cpupct" "/etc/acpi/"))
(setq-default search-ring '("の" "レベル" "、" "alias" "disable" "sub" "no" "noncq" "lib" "wpa_k-h" "k-ohsugi" "wpa" "clock" "mem" "wibox" "emacs"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
