;;; Automatically generated on Thu Feb  6 09:03:26 2014
;;; Invoked by k-ohsugi@VAIO using 24.3.1
(setq-default kill-ring '(#("近年，

" 0 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) #("  " 0 2 (org-category "report8" fontified t)) "% Created 2014-02-03 月 16:45
\\documentclass[a4j,11pt]{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
% \\usepackage{pxjahyper}
 \\usepackage[dvipdfmx,unicode=true,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{bookmark}
 \\usepackage{url}
\\usepackage[top=30truemm,bottom=30truemm,left=25truemm,right=25truemm]{geometry}
\\author{情報科学研究科情報ネットワーク学専攻\\\\長谷川研究室 1 年 大杉海斗\\\\学籍番号: 33E13003}
\\date{2014 年  2 月 1 日 (土)}
\\title{モバイル通信プロトコル第 7 回レポート課題}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.5h)}}
\\begin{document}

\\maketitle

\\section{課題内容}
\\label{sec-1}
膨大なスマートグリッド関連データを用いてどのような付加価値を持つ情報
が生成できるか，について A4 用紙 1 ページ程度で各人の意見をまとめよ．

\\section{回答}
\\label{sec-2}
% Emacs 24.3.1 (Org mode 8.2.5h)
\\end{document}" #("  " 0 2 (fontified t)) #("* " 0 2 (face org-level-1 org-category "report8" fontified t)) #("* 課題内容
膨大なスマートグリッド関連データを用いてどのような付加価値を持つ情報
が生成できるか，について A4 用紙 1 ページ程度で各人の意見をまとめよ．
" 0 2 (face org-level-1 org-category #1="report8" fontified t) 2 6 (face org-level-1 org-category #1# fontified t) 6 7 (fontified t) 7 41 (org-category #1# fontified t) 41 42 (org-category #1# fontified t) 42 48 (org-category #1# fontified t) 48 49 (org-category #1# fontified t) 49 50 (org-category #1# fontified t) 50 53 (org-category #1# fontified t) 53 54 (org-category #1# fontified t) 54 55 (org-category #1# fontified t) 55 56 (org-category #1# fontified t) 56 57 (org-category #1# fontified t) 57 58 (org-category #1# fontified t) 58 59 (org-category #1# fontified t) 59 60 (org-category #1# fontified t) 60 61 (org-category #1# fontified t) 61 62 (org-category #1# fontified t) 62 63 (org-category #1# fontified t) 63 64 (org-category #1# fontified t) 64 78 (org-category #1# fontified t) 78 79 (org-category #1# fontified t) 79 80 (org-category #1# fontified t) 80 81 (org-category #1# fontified t)) #("
" 0 1 (fontified t)) #("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) #("* 課題内容
特別講義の感想，意見，質問等自由に記述せよ

* 特別講義の感想
ユビキタスコンピューティングについてのお話を聞かせて頂きました．現在，
様々なところでその名前を聞く「スマートハウス」や「スマートビルティング」
を実現するために必要となる技術について学ぶことができました．

実験用の部屋を借りて，学生が実際に住んでいたとのお話がありましたが，私が現在下
宿している部屋よりも立派で羨ましく思いました．

今回は，非常に興味深いお話を聞かせて頂き，ありがとうございました．


" 0 2 (face org-level-1 fontified t) 2 6 (face org-level-1 fontified t) 6 30 (fontified t) 30 32 (face org-level-1 fontified t) 32 39 (face org-level-1 fontified t) 39 185 (fontified t) 185 246 (fontified t)) #("* " 0 2 (face org-level-1 fontified t)) "膨大なスマートグリッド関連データを用いてどのような付加価値を持つ情報
が生成できるか,についてA4用紙1ページ程度で各人の意見をまとめよ." "% Created 2014-02-03 月 16:22
\\documentclass[a4j,10.5pt]{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
% \\usepackage{pxjahyper}
 \\usepackage[dvipdfmx,unicode=true,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{bookmark}
 \\usepackage{url}
\\usepackage[top=30truemm,bottom=30truemm,left=25truemm,right=25truemm]{geometry}
\\author{情報科学研究科情報ネットワーク学専攻\\\\長谷川研究室 1 年 大杉海斗\\\\学籍番号: 33E13003}
\\date{2014 年  2 月 3 日 (月)}
\\title{情報ネットワークセミナー II レポート課題}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.5h)}}
\\begin{document}

\\maketitle

\\section{課題内容}
\\label{sec-1}
以下の内容を記したレポートを作成せよ
\\begin{enumerate}
\\item 質疑内容のまとめ
\\item 発表時に回答が不十分になった点に関する調査結果
\\end{enumerate}
\\section{質疑応答のまとめ}
\\label{sec-2}
\\begin{itemize}
\\item 経路上のルータが全て CCN ルータでなかった場合にも機能するのか．
\\begin{itemize}
\\item すべてが CCN ルータでなくとも機能します． CCN は IP と共存可能で
あるからです．したがって， CCN に移行するときには，すべてのルータ
を同時に CCN ルータへと置き換える必要はなく， IP ルータを徐々に置
き換えて行くことが可能です．
\\end{itemize}
\\item 位置情報の保証は， ユーザの端末が GPS の位置情報を送信するだけでは
だめなのか．
\\begin{itemize}
\\item ユーザの端末が送信してきた位置情報を無条件で信頼することはしませ
ん． GPS の位置情報は簡単に偽装することが可能だからです．
\\end{itemize}
\\item 上と関連して，災害が起こっているという非常時に緊急通報を偽装するこ
とは起こりえるのか．
\\begin{itemize}
\\item 起こりえると思います．東日本大震災の例では，ある大阪の男子高校生
が地震で家が崩れて外に出られないため，救助が必要だという旨の内容
を Twitter に投稿し，その tweet が拡散したことがありました．した
がって，愉快犯が行う緊急通報を排除する必要があります．
\\end{itemize}
\\item 緊急通報の内容とは 119 番通報なのか．
\\begin{itemize}
\\item そうです．被災者の氏名と位置情報を送信します．
\\end{itemize}
\\item CCN のルーティングは，名前の最長一致検索で行われると言ったが，プレ
フィックスの前が不一致ならば，目的の場所へと届かないと思われる．こ
れは問題ないのか．
\\begin{itemize}
\\item 緊急通報用の名前として\"/119\" のプレフィックスを予め定義する仮定を
しているため，問題は起こらないと思います．これは，現在の電話で
119 番や 110 番が予め予約されているのと同様です．
\\end{itemize}
\\item 求められる位置情報の精度は．
\\begin{itemize}
\\item 携帯基地局程度の精度でよいと思います．現在の携帯電話を用いた緊急
通報でも，携帯基地局の位置で通報元の位置を判別しているためです．
\\end{itemize}
\\end{itemize}

\\section{発表時に回答が不十分になった点に関する調査結果}
\\label{sec-3}
\\begin{itemize}
\\item 情報を拡散するならば既存のブロードキャストでいいと思う
\\begin{itemize}
\\item 
\\end{itemize}
\\item 普通の IP ネットワークよりも CCN が 優位である理由付けが欲しい．例
えば，不特定多数の人が同じコンテンツを使うという理由なら CCN の利用
は納得できるが，緊急通報という目的に対して CCN を 用いる理由が伝わっ
てこない．
\\item CCN ルータと端末が直接通信する場合，精度は保証できるのか
\\begin{itemize}
\\item 
\\end{itemize}
\\item 車が動くとき，車に搭載されている CCN ルータはどのくらいの頻度で位置
情報を更新する必要があるのか?
\\begin{itemize}
\\item この点についてはまだ考えられていません．位置情報の更新頻度を考え
る前に，車が異なるネットワーク間のパケット配送をどのようにして行
うかを考える必要があると思います．車のパケット配送方法によって，
車の物理的な挙動が変化すると予想されるからです．例えば，車が，イ
ンターネットから切断されたネットワークの近くでしばらく停車し，緊
急通報のためのパケットの取得を行うのか，あるいは常に低速で移動し
て少しずつパケットの取得を行うのかといったことです．
\\end{itemize}
\\end{itemize}
% Emacs 24.3.1 (Org mode 8.2.5h)
\\end{document}" "% Created 2014-02-03 月 16:21
\\documentclass[a4j,10.5pt]{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
% \\usepackage{pxjahyper}
 \\usepackage[dvipdfmx,unicode=true,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{bookmark}
 \\usepackage{url}
\\usepackage[top=30truemm,bottom=30truemm,left=25truemm,right=25truemm]{geometry}
\\author{情報科学研究科情報ネットワーク学専攻\\\\長谷川研究室 1 年 大杉海斗\\\\学籍番号: 33E13003}
\\date{2014 年  2 月 2 日 (日)}
\\title{情報ネットワークセミナー II レポート課題}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.5h)}}
\\begin{document}

\\maketitle

\\section{課題内容}
\\label{sec-1}
以下の内容を記したレポートを作成せよ
\\begin{enumerate}
\\item 質疑内容のまとめ
\\item 発表時に回答が不十分になった点に関する調査結果
\\end{enumerate}
\\section{質疑応答のまとめ}
\\label{sec-2}
\\begin{itemize}
\\item 経路上のルータが全て CCN ルータでなかった場合にも機能するのか．
\\begin{itemize}
\\item すべてが CCN ルータでなくとも機能します． CCN は IP と共存可能で
あるからです．したがって， CCN に移行するときには，すべてのルータ
を同時に CCN ルータへと置き換える必要はなく， IP ルータを徐々に置
き換えて行くことが可能です．
\\end{itemize}
\\item 位置情報の保証は， ユーザの端末が GPS の位置情報を送信するだけでは
だめなのか．
\\begin{itemize}
\\item ユーザの端末が送信してきた位置情報を無条件で信頼することはしませ
ん． GPS の位置情報は簡単に偽装することが可能だからです．
\\end{itemize}
\\item 上と関連して，災害が起こっているという非常時に緊急通報を偽装するこ
とは起こりえるのか．
\\begin{itemize}
\\item 起こりえると思います．東日本大震災の例では，ある大阪の男子高校生
が地震で家が崩れて外に出られないため，救助が必要だという旨の内容
を Twitter に投稿し，その tweet が拡散したことがありました．した
がって，愉快犯が行う緊急通報を排除する必要があります．
\\end{itemize}
\\item 緊急通報の内容とは 119 番通報なのか．
\\begin{itemize}
\\item そうです．被災者の氏名と位置情報を送信します．
\\end{itemize}
\\item CCN のルーティングは，名前の最長一致検索で行われると言ったが，プレ
フィックスの前が不一致ならば，目的の場所へと届かないと思われる．こ
れは問題ないのか．
\\begin{itemize}
\\item 緊急通報用の名前として\"/119\" のプレフィックスを予め定義する仮定を
しているため，問題は起こらないと思います．これは，現在の電話で
119 番や 110 番が予め予約されているのと同様です．
\\end{itemize}
\\item 求められる位置情報の精度は．
\\begin{itemize}
\\item 携帯基地局程度の精度でよいと思います．現在の携帯電話を用いた緊急
通報でも，携帯基地局の位置で通報元の位置を判別しているためです．
\\end{itemize}
\\end{itemize}

\\section{発表時に回答が不十分になった点に関する調査結果}
\\label{sec-3}
\\begin{itemize}
\\item 情報を拡散するならば既存のブロードキャストでいいと思う
\\begin{itemize}
\\item 
\\end{itemize}
\\item 普通の IP ネットワークよりも CCN が 優位である理由付けが欲しい．例
えば，不特定多数の人が同じコンテンツを使うという理由なら CCN の利用
は納得できるが，緊急通報という目的に対して CCN を 用いる理由が伝わっ
てこない．
\\item CCN ルータと端末が直接通信する場合，精度は保証できるのか
\\begin{itemize}
\\item 
\\end{itemize}
\\item 車が動くとき，車に搭載されている CCN ルータはどのくらいの頻度で位置
情報を更新する必要があるのか?
\\begin{itemize}
\\item この点についてはまだ考えられていません．位置情報の更新頻度を考え
る前に，車が異なるネットワーク間のパケット配送をどのようにして行
うかを考える必要があると思います．車のパケット配送方法によって，
車の物理的な挙動が変化すると予想されるからです．例えば，車が，イ
ンターネットから切断されたネットワークの近くでしばらく停車し，緊
急通報のためのパケットの取得を行うのか，あるいは常に低速で移動し
て少しずつパケットの取得を行うのかといったことです．
\\end{itemize}
\\end{itemize}
% Emacs 24.3.1 (Org mode 8.2.5h)
\\end{document}"))
(setq-default session-file-alist '(("~/Dropbox/job_hunting/HITACHI/es.org" 1 nil 1 nil nil 222 (overwrite-mode)) ("~/Dropbox/class/mobile_protocol/report7/report7.org" 33 nil 1 nil nil 603 (overwrite-mode)) ("~/Dropbox/class/mobile_protocol/report8/report8.org" 496 356 1 nil nil 496 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 13118 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/class/mobile_protocol/report8/report8.tex" 787 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/class/network_seminar2/report.org" 157 nil 1 nil nil 157 (overwrite-mode)) ("~/Dropbox/class/network_seminar2/report.tex" 2529 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/report.org" 1395 1574 1 nil nil 1388 (overwrite-mode)) ("~/Downloads/質疑応答.txt" 41 16 1 nil nil 581 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 12948 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/report.tex" 2531 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/job_hunting/ALL/resarch_introduction.txt" 1 1163 1 nil nil 1132 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/HITACHI/es.org" 151 217 1 nil nil 222 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/url/cookies" 505 nil 1 nil nil nil (overwrite-mode))))
(setq-default TeX-command-history '("LatexMk" "BibTeX" "Clean All" "Evince" "Acroread"))
(setq-default bibtex-key-history '("tsuda13"))
(setq-default buffer-name-history '("*new snippet*" "*Moccur*" "ac-math.el" "*Backtrace*" "131224_all_meeting.rip" "comic-list.org" "*init log*" "*Org Src 131216_M1_meeting.org[ python ]*" "*scratch*" "*Org Table Edit Field*" "131216_M1_meeting.html"))
(setq-default command-history '((insert-file "~/Dropbox/class/mobile_protocol/report7/report7.org") (find-file "~/Dropbox/class/mobile_protocol/report8/report8.org" t) (dired-create-directory "~/Dropbox/class/mobile_protocol/report8") (find-file "~/Dropbox/class/mobile_protocol/" t) (find-file "~/Downloads/質疑応答.txt" t) (find-file "~/Dropbox/class/network_seminar2/report.org" t) (find-file "~/Dropbox/job_hunting/HITACHI/es.org" t) (find-file "~/Dropbox/job_hunting/ALL/resarch_introduction.txt" t) (kill-buffer "*new snippet*") (find-file "~/.emacs.d/inits/" t) (find-file "~/.emacs.d/inits/10_helm.el" t) (package-list-packages nil) (execute-extended-command nil "package-list-packages") (find-file "~/Dropbox/class/mobile_protocol/report6/report6.org" t)))
(setq-default extended-command-history '("package-list-packages" "count-lines-region" "ispell-buffer" "eval-buffer" "ispell-minor-mode" "flyspell-mode" "elp-results" "moccur-grep" "count-words-region" "org-display-inline-images" "org-toggle-inline-images" "org-redisplay-inline-images" "org-edit-src-code" "describe-key" "org-src-mode" "org-version" "pascal-mode"))
(setq-default helm-c-grep-history '("interest" "yasnippet" "k-ohsugi" "wpa_pass" "wpa_passp" "icon"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . previous-line) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-grep-history '("interest" "yasnippet" "k-ohsugi" "wpa_pass" "wpa_passp" "icon"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . previous-line) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("org" "-------" "pa" "データセントリックネットワークアーキテクチャの一つとして，コンテンツの" "データセントリックネットワークアーキテクチャの一つとして，コンテンツの識別" "p" ".el" "ini" "60" "helm" "
" #("**" 0 1 (face org-level-2 fontified t) 1 2 (face org-level-2 fontified t)) "ispe" "i" "ce" "tex" "o" "eva" "eval" "org-mode" "ispell-b" "k" "/home/k-ohsugi/" "rep" "binding"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("サーバ" "サーバー" "ルータ" "ルーター" "CCN" "ICN" "right" "left" "right_wibox" "left_graphbox" "face" "Face"))
(setq-default read-expression-history '("ac-sources"))
(setq-default regexp-history '("noncq" "volicon" "cpupct" "/etc/acpi/"))
(setq-default search-ring '("yasnippet" "helm-c" "helm-c-ya" "helm-c	" "を" "ルーター" "サーバー" "scrip" "seq" "data" "端末" "ユーザ" "到着するように" "jpg"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
