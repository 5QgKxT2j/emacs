;;; Automatically generated on Mon Aug 11 09:11:39 2014
;;; Invoked by k-ohsugi@localhost using 24.3.1
(setq-default kill-ring '(#("また， ICN アーキテクチャとして NDN を選択する． NDN は，現在活発に研究
が進められており，その実験用ソースコードである NDNx/CCNx が安定して提供
されているからである．また，我々の提案する電力消費モデルではキャッシュ
ヒット率を入力パラメータとして持つが，そのキャッシュヒット率を求める研
究が数多く存在すること [適当にキャッシュヒット率の論文を参照] も NDN を
選択した理由である．" 0 209 (fontified t)) #("
" 0 1 (fontified t)) #("我々は，マルチコアソフトウェアルータをモデル化対象のハードウェアプラッ
トフォームとして選択した．文献 [XX] では， ICN ネットワーク全体の消費電
力の内，アクセスやエッジの ICN ルータの総消費電力はコアより大きいことが
示されており，アクセスやエッジで使用することが想定される ICN ルータの電
力消費モデル作成が必要である．そして， ICN のプロトコル処理は， IP ルー
タの行うパケット転送と比較して複雑であり，全処理をハードウェアで実装す
ることは難しく， しばらくの間アクセスやエッジではソフトウェアルータが使
用される可能性が高い．さらに，ソフトウェアルータの性能が向上しているこ
ともソフトウェアルータがアクセスやエッジでは使用される可能性を高めてい
る．実際に， So らは，商用マルチコアソフトウェアルータで 20Gbps のスルー
プット達成している [Cisco の論文] ． " 0 197 (fontified t) 197 409 (fontified t)) #("\\lambda^{IN}_{Interest} ・ (2 - p^{hit}_{CS}) [packet/s]" 0 7 (fontified t font-lock-multiline t face (font-latex-math-face font-latex-sedate-face)) 7 8 (fontified t font-lock-multiline t face #2=(font-latex-math-face)) 8 12 (display #1=(raise 0.3) fontified t font-lock-multiline t face (font-latex-math-face font-latex-superscript-face)) 12 13 (fontified t font-lock-multiline t face #2#) 13 23 (display #3=(raise -0.3) fontified t font-lock-multiline t face (font-latex-math-face font-latex-subscript-face)) 23 33 (fontified t font-lock-multiline t face #2#) 33 38 (display #1# fontified t font-lock-multiline t face (font-latex-math-face font-latex-superscript-face)) 38 39 (fontified t font-lock-multiline t face #2#) 39 43 (display #3# fontified t font-lock-multiline t face (font-latex-math-face font-latex-subscript-face)) 43 55 (fontified t font-lock-multiline t face #2#)) "corgi/Dropbox/research/work/IN14-9/"))
(setq-default session-file-alist '(("/mnt/Dropbox/research/work/IN14-9/architecture.tex" 849 580 1 nil nil 848 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/experiment.tex" 3801 4006 1 nil nil 3670 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/old/architecture.tex" 928 719 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/paper.tex" 385 162 1 nil nil 405 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 13295 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/model.tex" 74 3138 1 nil nil 3221 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140807.845/helm-autoloads.el" 41174 nil 1 nil nil 41174 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/introduction.tex" 974 993 1 nil nil 222 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/bib/paper.bib" 2003 87 1 nil nil 87 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/title.tex" 1151 742 1 nil nil 817 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/paper.bbl" 1 310 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/conclusion.tex" 111 111 1 nil nil 100 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140804/org-loaddefs.el" 86899 nil 1 nil nil 86899 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140803.2118/auto-complete-autoloads.el" 1711 nil 1 nil nil 1711 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140806.756/helm-autoloads.el" 41182 nil 1 nil nil 41182 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140804/org-autoloads.el" 27230 nil 1 nil nil 27230 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/30_auctex.el" 246 300 1 nil nil 223 (overwrite-mode)) ("/mnt/Dropbox/storage/scfes.org" 27 nil 1 nil nil 27 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/_region_.tex" 326 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paperv1.0.tex" 1526 3965 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/old/model.tex" 127 1565 1 nil nil 5296 (overwrite-mode)) ("/mnt/Dropbox/research/work/IN14-9/parameter.tex" 107 nil 1 nil nil 107 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/ICN-meeting.org" 962 1200 1 nil nil 1208 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/ICN-meeting.tex" 26681 nil 1 nil nil nil (overwrite-mode))))
(setq-default LaTeX-environment-history '("equation"))
(setq-default TeX-command-history '("LatexMk" "Evince" "LaTeX" "Clean All"))
(setq-default buffer-name-history '("experiment.tex" "*~/Dropbox/research/work/IN14-9/model output*" "*TeX Help*" "paper.bib" "paper.bbl" "paper.rip" "bib" "*scratch*" "IN14-9" "*~/Dropbox/research/work/IN14-9/paper output*" "model.tex<k-ohsugi>" "*Completions*" "IN14" "*~/Dropbox/research/work/IN14/paper output*" "ICN-meeting.org" "*Backtrace*" "ieicejsp.cls" "report8.org" "udp1500byte.gp" "memory_accsess.dat" "*Async Shell Command*" "ssh:get_ccnx_time.sh" "*gnuplot*" "udp1500byte.out" "*Moccur*" "*Org PDF LaTeX Output*" "__init__.py" "functions.py" "PKGBUILD" "ssh:hoge.c" "forwarding.c" "dummy.c" "256result.data" "ssh:receive.c" "ssh:ssh:ssh:send.c<client1>" "router" "rdtsc.h" "*Packages*" "*Macroexpansion*" "2-13 Daring!!.mp3" "20_org-mode.el" "hote.txt" "es.org" "*init log*"))
(setq-default coding-system-history '("shift_jis" "utf-8-unix" "unix"))
(setq-default command-history '((find-file "~/Dropbox/research/work/IN14-9/old/architecture.tex" t) (find-file "~/Dropbox/research/work/IN14-9/architecture.tex" t) (find-file "~/Dropbox/research/work/IN14-9/experiment.tex" t) (kill-buffer "experiment.tex") (find-file "~/Dropbox/research/work/IN14-9/paper.tex" t) (find-file "~/Dropbox/research/work/IN14-9/model.tex" t) (kill-buffer "*~/Dropbox/research/work/IN14-9/model output*") (find-file "/home/k-ohsugi/Dropbox/research/work/IN14-9/paper.tex" t) (package-list-packages nil) (query-replace "\\lambda^{IN}_{ICN}" "\\lambda^{IN}_{Interest}" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (kill-buffer "*TeX Help*") (find-file "~/Dropbox/research/work/IN14-9/bib/paper.bib" t) (find-file "~/Dropbox/research/work/IN14-9/introduction.tex" t) (find-file "~/Dropbox/research/work/IN14-9/title.tex" t) (kill-buffer "paper.bib") (kill-buffer "paper.bbl") (kill-buffer "paper.rip") (kill-buffer "bib") (find-file "~/Dropbox/research/work/IN14-9/" t) (kill-buffer "*scratch*") (query-replace "nic" "lc" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (query-replace "rate" "rate_{packet}" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (count-lines-region 550 848 nil) (count-lines-region 550 800 nil) (kill-buffer "IN14-9") (find-file "~/Dropbox/research/work/IN14-9/old/model.tex" t) (find-file "~/Dropbox/research/work/IN14-9/experiment" t) (find-file "~/.emacs.d/inits/30_auctex.el" t) (kill-buffer "*~/Dropbox/research/work/IN14-9/paper output*") (find-file "~/Dropbox/research/work/IN14-9/archtecture.tex" t) (find-file "~/Dropbox/research/work/IN14-9/conclusion.tex" t) (find-file "~/Dropbox/research/work/IN14-9/parameter.tex" t) (kill-buffer "model.tex<k-ohsugi>") (find-file "/home/corgi/Dropbox/research/work/IN14-9/model.tex" t)))
(setq-default extended-command-history '("package-list-packages" "count-lines-region" "ispell-buffer" "eval-buffer" "yas-expand-from-trigger-key" "moccur-grep" "describe-variable" "describe-function" "auto-complete-mode" "describe-mode" "Buffer-menu-mode" "describe-key" "eval-defun" "pascal-mode"))
(setq-default helm-c-grep-history '("valid-file" "filename"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . undo) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-ff-history '("/home/k-ohsugi/Dropbox/research/work/" "/home/k-ohsugi/" "/mnt/Dropbox/.dropbox.cache/" "/mnt/Dropbox/configure/.emacs.d/inits/" "/mnt/Dropbox/research/meeting/" "/mnt/Dropbox/research/work/society14/" "/mnt/Dropbox/storage/" "/home/corgi/Dropbox/storage/" "/home/corgi/" "/mnt/Dropbox/" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/" "/home/k-ohsugi/Dropbox/meeting/withHasegawa/GreenICN/utils/"))
(setq-default helm-grep-history '("valid-file" "filename"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-comint-input-ring '((name . "Comint history") (candidates lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) (action . helm-comint-input-ring-action)))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . undo) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("pap" "ex" "evince paper.pdf" "-------" "pack" "evince model.pdf" "tex" #("section" 0 7 (face (font-lock-keyword-face font-latex-sedate-face) fontified t)) "ERROR" "paper.tex" "k-ohsugi tex" #("2-" 0 2 (fontified t font-lock-multiline t face (font-latex-math-face))) "la" "sc" "aucte" #("6" 0 1 (fontified t)) "so" "soci" "mode" "intro" "tit" "int" "scfes"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("\\lambda^{IN}_{Interest}" "\\lambda^{IN}_{ICN}" "lc" "nic" "rate_{packet}" "rate" "20" "15" "screen.count ()" "2" "time -p" "time" "3s" "10s" "${SIZE}" "1GB" "\"" "'" "NAME" "NAME1" "10MB" "1MB" "1024" "4096" "68" "204" "819" "COUNT" "NPARA" "50000" "10000" "45" "50" "research_2014_group_001-ccn.pdf" "research_group_001-icn.pdf" "M1" "B4" "M" "M2" "Master" "Doctor" "D3" "./figure/" "./"))
(setq-default regexp-history '("block" "blocksize"))
(setq-default search-ring '("ref" "pcpu" "式" "router" "laa" "ali" "align" "eq" "alig" "nic" "ip" "hoge" "mu" "hirei"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("'" "4096"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
