;;; Automatically generated on Tue Jun 10 13:30:54 2014
;;; Invoked by k-ohsugi@VAIO using 24.3.1
(setq-default kill-ring '("% Created 2014-06-09 Mon 05:41
\\documentclass[dvipdfmx,12pt]{beamer}
\\usepackage{url}
\\usepackage{pxjahyper}
\\usetheme{Berlin}
\\setbeamertemplate{navigation symbols}{}
\\beamertemplatetextbibitems
\\setbeamertemplate{footline}[frame number]
\\setbeamertemplate{headline}{}


\\institute[]{Osaka University\\\\
Graduate School of Information Science and Technology \\\\
Information Sharing Platform Laboratory \\\\
Master course second year}
\\usetheme{default}
\\author{Kaito Ohsugi}
\\date{\\today}
\\title{Estimation of Router Power Consumption on Content-Centric Network}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.6)}}
\\begin{document}

\\maketitle

\\section{INTRODUCTION}
\\label{sec-1}
\\begin{frame}[label=sec-1-1]{Incompatibility between use and technology of the network}
\\begin{itemize}
\\item Incompatibility between use and technology is most obvious on the
network
\\begin{itemize}
\\item Mainly use is information distribution and retrieval
\\item Mainly technology is connections among hosts
\\end{itemize}
\\item This incompatibility causes a number of issues
\\begin{itemize}
\\item Availability
\\item Security
\\item Location Dependency
\\end{itemize}
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-1-2]{Future network architecture}
\\begin{itemize}
\\item Current Internet users place more value on \\it{what}(information)
than \\it{where}(hosts having information)
\\end{itemize}
\\centering
\\includegraphics[width=0.15\\linewidth,height=0.15\\textheight]{./arrow.pdf}
\\begin{itemize}
\\item Network technology should be rebuilt from current
host-centric to information-centric on future network architecture
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-1-3]{Content-Centric Networking (CCN)}
\\begin{itemize}
\\item CCN has recently been getting increased attention
\\begin{itemize}
\\item CCN adopts a request-and-response communication model
\\item A unique content identifier is given to every content
\\item CCN router performs name-based routing
\\item \\alert{CCN routers cache forwarded contents for reuse of the content}
\\end{itemize}
\\end{itemize}

\\includegraphics[width=.9\\linewidth]{./CCN_Overview.pdf}
\\end{frame}

\\begin{frame}[label=sec-1-4]{Motivation}
\\begin{itemize}
\\item CCN is expected to reduce power
\\begin{itemize}
\\item CCN cache function reduces traffic load, which may reduce power
as a byproduct
\\end{itemize}
\\item Power reduction is a hot research topic
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-1-5]{Related works}
\\begin{itemize}
\\item Related studies focus packet forwarding and memory power
consumption, and estimate power of entire CCN network \\footnote{N. Choi, K. Guan, D. C. Kilper, and G. Atkinson, \"In-network
caching effect on optimal energy consumption in content-centric networking,\"
in Proceedings of 2012 IEEE International Conference on
Communication (ICC), pp. 2889 - 2894, June 2012.} \\textsuperscript{,}\\,\\footnote{S. Imai, K. Leibnitz, and M. Murata, \"Energy efficient data caching
for content dissemination networks,\" Journal of High Speed Networks,
vol. 19, pp. 215 - 235, Oct. 2013.}
\\item However, power CCN protocol processing consumes is not negligible
because it is energy-hungry
\\begin{itemize}
\\item Name-based routing
\\item cache function
\\end{itemize}
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-1-6]{Objective}
\\begin{itemize}
\\item We propose power consumption model of CCN routers, taking into
consideration CCN protocol processing
\\item This model provides insight on designing less power-consuming
routers and networks
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-1-7]{Target}
\\begin{itemize}
\\item The target is multicore software CCN router
\\begin{itemize}
\\item Such routers in access networks consume more than backbone
routers in backbone network
\\end{itemize}
\\item We apply CCNx as software, which is widely used and available
\\end{itemize}
\\end{frame}

\\section{BODY}
\\label{sec-2}
\\begin{frame}[label=sec-2-1]{Power consumption model of CCN router}
\\begin{itemize}
\\item P$_{\\text{router}}$(cores, rate$_{\\text{IP}}$) = P$_{\\text{cpu}}$(cores) + P$_{\\text{mem}}$(bytes) + P$_{\\text{nic}}$ (rate$_{\\text{IP}}$) + P$_{\\text{IDLE}}$ [W]
\\begin{itemize}
\\item P$_{\\text{cpu}}$ (cores) [W]: The power consumed by the CPU device. It is
the function of the number of active CPU cores
\\item P$_{\\text{mem}}$(bytes) [W]: The power consumed by accessing the DDR3
device. It is the function of the number of bytes which are
accessed per second
\\item P$_{\\text{nic}}$(rateIP) [W]: The power consumed by the NIC. It is the
function of the IP packet forwarding rate
\\item P$_{\\text{IDLE}}$ [W]: The power consumed by the chassis when the router
is idle. It includes power of all devices
\\end{itemize}
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-2-2]{Experiment condition (1)}
\\begin{itemize}
\\item We empirically measure the four terms to model them
\\item Each measurement under the same condition is performed twenty
times and its measurement duration is ten minute long
\\end{itemize}
\\centering
\\includegraphics[width=0.9\\linewidth,height=0.7\\textheight]{./environment2.pdf}
\\end{frame}

\\begin{frame}[label=sec-2-3]{Experiment condition (2)}
\\begin{itemize}
\\item The PC is a PC server
\\begin{itemize}
\\item Xeon E3-1220 processor 3.10 GHz * 4 cores CPU (We set the
clock frequency at 1.6 GHz)
\\item DDR3 16 GB memory device
\\end{itemize}
\\item The three PCs are connected by 10 Gbps Ethernet links.
\\item Middle PC is used as an IP router and the other two are used as a
client and server.
\\end{itemize}
\\centering
\\includegraphics[width=0.9\\linewidth,height=0.6\\textheight]{./environment1.pdf}
\\end{frame}

\\begin{frame}[label=sec-2-4]{Power Consumed by CPU Cores}
\\centering
\\includegraphics[width=0.9\\linewidth,height=0.8\\textheight]{./fig4.eps}
\\end{frame}

\\begin{frame}[label=sec-2-5]{Power Consumed by Memory Device}
\\centering
\\includegraphics[width=0.9\\linewidth,height=0.8\\textheight]{./fig5.eps}
\\end{frame}

\\begin{frame}[label=sec-2-6]{Power Consumed by NIC}
\\centering
\\includegraphics[width=0.9\\linewidth,height=0.8\\textheight]{./fig6.eps}
\\end{frame}

\\begin{frame}[label=sec-2-7]{CCNx source code analysis}
\\begin{itemize}
\\item We classify all the functions of the CCNx source code into the
three groups of blocks
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-2-8]{Three Groups of blocks}
\\centering
\\includegraphics[width=0.95\\linewidth,height=0.6\\textheight]{./CCN_analysis.pdf}
\\begin{itemize}
\\item F$_{\\text{1}}$: The block is always run when an Interest packet is received
\\item F$_{\\text{2}}$: The block is run only when cache hit in router
\\item F$_{\\text{3}}$: The block is run only when cache  in router
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-2-9]{Measuring how much CPU clock cycles}
\\begin{itemize}
\\item We measure how much CPU clock cycles each block consumes
\\begin{itemize}
\\item For estimating power CCN protocol processing consumes
\\end{itemize}
\\end{itemize}
\\end{frame}

\\begin{frame}[label=sec-2-10]{CPU cycles of each block}
\\begin{center}
\\begin{tabular}{|l|l|r|}
\\hline
Group & Block & Cycles\\\\
\\hline
F1 & Duplication Check & 2068\\\\
F1 & PIT Lookup & 1029\\\\
F1 & Name Prefix HTE Lookup\\&Insert & 4023\\\\
F1 & CS Lookup & 10598\\\\
\\hline
F2 & Interest Consume (Interest) & 4917\\\\
\\hline
F3 & Interest HTE Lookup\\&Insert & 1684\\\\
F3 & FIB Lookup & 807\\\\
F3 & PIT Insert & 1232\\\\
F3 & CS Lookup\\&Insert & 18176\\\\
\\hline
\\end{tabular}
\\end{center}
\\end{frame}

\\begin{frame}[label=sec-2-11]{}
\\centering
   \\structure{\\Large Thank you for listening}
\\end{frame}
% Emacs 24.3.1 (Org mode 8.2.6)
\\end{document}" #("
" 0 1 (fontified t))))
(setq-default session-file-alist '(("~/Dropbox/research/meeting/M2-meeting.org" 75 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/poster_introduction/paper.org" 670 575 1 nil nil 4448 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 4425 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/poster_introduction/paper.tex" 7589 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/meeting/M2-meeting.org" 152 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140608.753/helm-autoloads.el" 48154 nil 1 nil nil 48154 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140607.2258/helm-autoloads.el" 48114 nil 1 nil nil 48114 (overwrite-mode)) ("~/.config/awesome/rc.lua" 17520 231 1 nil nil 17522 (overwrite-mode)) ("~/.config/awesome/themes/theme.lua" 1765 318 1 nil nil 240 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140607.33/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140605.1908/auto-complete-autoloads.el" 1715 nil 1 nil nil 1715 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140605.1156/helm-autoloads.el" 48156 nil 1 nil nil 48156 (overwrite-mode))))
(setq-default file-name-history '("~/Dropbox/research/meeting/M2-meeting.org" "/tmp/packerbuild-1000/vmware-patch/vmware-patch/PKGBUILD" "~/Dropbox/research/poster_introduction/paper.org" "~/Dropbox/research/energy_result/thesis/" "~/.emacs.d/elpa/helm-20140608.753/helm-autoloads.el" "~/.emacs.d/elpa/helm-20140607.2258/helm-autoloads.el" "~/.emacs.d/elpa/dash-20140607.33/dash-autoloads.el" "~/.config/awesome/themes/theme.lua" "/home/corgi/.config/awesome/rc.lua" "~/.emacs.d/elpa/auto-complete-20140605.1908/auto-complete-autoloads.el" "~/.emacs.d/elpa/helm-20140605.1156/helm-autoloads.el" "~/Dropbox/research/energy_result/icn_acm/cpu_cores_with_errorbar.dat" "~/Dropbox/research/energy_result/icn_acm/cpu_cores_with_errorbar.gp" "~/Dropbox/research/energy_result/icn_acm/cpu_cores.dat" "~/Dropbox/research/energy_result/icn_acm/cpu_cores.gp" "/home/corgi/.zshrc" "/home/corgi/Dropbox/research/energy_result/icn_acm/cpu_cores.gp" "/home/corgi/Dropbox/research/energy_result/icn_acm/memory_accsess.gp" "/home/corgi/Dropbox/research/energy_result/icn_acm/packet_rate.gp" "/home/corgi/Dropbox/research/energy_result/icn_acm/udp1500byte.gp" "/home/corgi/Dropbox/research/energy_result/icn_acm/udp256byte.gp" "/home/corgi/Downloads/graph_and_result-v2/README.txt" "~/Dropbox/research/poster_introduction" "~/Dropbox/research/" "~/Dropbox/research/energy_result/icn_acm/memory_accsess.gp" "~/Dropbox/research/energy_result/icn_acm/packet_rate.dat" "/ssh:router@192.168.10.80:/home/router/sleep.c" "~/Dropbox/research/energy_result/icn_acm/packet_rate.gp" "~/Dropbox/research/energy_result/icn_acm/udp256byte.gp" "~/Dropbox/research/energy_result/icn_acm/memory_accsess.dat" "/ssh:router@192.168.10.80:/home/router/read_memory.c" "/ssh:client1@192.168.10.85:/home/client1/send.c" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.gp" "~/Dropbox/research/energy_result/icn_acm/udp256byte.dat" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.dat" "~/Dropbox/research/energy_result/icn_acm/memory_accsess_0:0.gp" "/ssh:router@192.168.10.80:/home/router/cpu-clock.c" "/ssh:router@192.168.10.80:/home/router/test.c" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/memory_accsess.gp" "~/.emacs.d/elpa/gnuplot-20130206.1701/gnuplot.el" "~/.emacs.d/elpa/gnuplot-20130206.1701/gnuplot-gui.el" "~/.emacs.d/elpa/gnuplot-20130206.1701/" "~/.emacs.d/elpa/gnuplot-readme.txt" "~/.emacs.d/elpa/gnuplot-mode-readme.txt" "~/.emacs.d/elpa/" "~/.emacs.d/inits/99_gnuplot.el" "/ssh:client1@192.168.10.85:/home/client1/get_ccnx_time.sh" "~/.emacs.d/elpa/helm-20140530.2214/helm-autoloads.el" "/ssh:router@192.168.10.80:/home/router/get_ccnx_time.sh" "/ssh:server1@192.168.10.90:/home/server1/receive.c" "~/.emacs.d/elpa/gnuplot-20130206.1701/gnuplot-autoloads.el" "~/.emacs.d/inits/99_popwin.el" "~/.emacs.d/inits/99_popwin.elc" "~/Dropbox/research/energy_result/" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.gnuplot" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.out" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/udp1500byte.dat" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.data" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/udp1500byte.res"))
(setq-default TeX-command-history '("LatexMk" "Clean All" "Evince"))
(setq-default buffer-name-history '("udp1500byte.gp" "memory_accsess.dat" "*scratch*" "*Async Shell Command*" "ssh:get_ccnx_time.sh" "*gnuplot*" "udp1500byte.out" "*Moccur*" "*Org PDF LaTeX Output*" "__init__.py" "functions.py" "PKGBUILD" "ssh:hoge.c" "forwarding.c" "dummy.c" "256result.data" "ssh:receive.c" "ssh:ssh:ssh:send.c<client1>" "router" "rdtsc.h" "*Packages*" "*Macroexpansion*" "2-13 Daring!!.mp3" "*Backtrace*" "20_org-mode.el" "hote.txt" "es.org" "*init log*"))
(setq-default coding-system-history '("shift_jis" "utf-8-unix" "unix"))
(setq-default command-history '((find-file "~/Dropbox/research/poster_introduction/paper.org" t) (find-file "~/Dropbox/research/meeting/M2-meeting.org" t) (find-file "~/Dropbox/research/energy_result/thesis/" t) (package-list-packages nil) (find-file "~/.config/awesome/themes/theme.lua" t) (find-file "~/Dropbox/research/energy_result/icn_acm/cpu_cores_with_errorbar.dat" t) (write-file "~/Dropbox/research/energy_result/icn_acm/cpu_cores_with_errorbar.gp" t) (find-file "~/Dropbox/research/energy_result/icn_acm/cpu_cores.dat" t) (ispell-buffer) (dired-create-directory "~/Dropbox/research/poster_introduction") (find-file "~/Dropbox/research/" t) (find-file "~/Dropbox/research/poster_introduction" t) (find-file "~/Dropbox/research/energy_result/icn_acm/packet_rate.dat" t) (find-file "~/Dropbox/research/energy_result/icn_acm/packet_rate.gp" t) (find-file "~/Dropbox/research/energy_result/icn_acm/udp256byte.gp" t) (kill-buffer "udp1500byte.gp") (find-file "~/Dropbox/research/energy_result/icn_acm/udp1500byte.gp" t) (write-file "~/Dropbox/research/energy_result/icn_acm/udp256byte.dat" t) (find-file "~/Dropbox/research/energy_result/icn_acm/udp1500byte.dat" t) (find-file "~/Dropbox/research/energy_result/icn_acm/memory_accsess.gp" t) (find-file "~/Dropbox/research/energy_result/icn_acm/memory_accsess_0:0.gp" t) (find-file "/ssh:router@192.168.10.80:/home/router/cpu-clock.c" t) (kill-buffer "memory_accsess.dat") (kill-buffer "*scratch*") (find-file "~/Dropbox/research/energy_result/icn_acm/cpu_cores.gp" t) (find-file "~/.emacs.d/elpa/gnuplot-20130206.1701/gnuplot.el" t) (find-file "~/.emacs.d/elpa/gnuplot-20130206.1701/" t) (find-file "~/.emacs.d/elpa/gnuplot-readme.txt" t) (find-file "~/.emacs.d/elpa/" t) (yas-load-snippet-buffer-and-close (quote gnuplot-mode) nil) (gnuplot-send-replot-to-gnuplot) (find-file "~/Dropbox/research/energy_result/icn_acm/memory_accsess.dat" t) (insert-file "~/Dropbox/research/energy_result/icn_acm/udp1500byte.gp") (query-replace "time" "time -p" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (query-replace "10s" "3s" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (query-replace "1GB" "${SIZE}" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)))))
(setq-default extended-command-history '("package-list-packages" "ispell-buffer" "count-lines-region" "eval-buffer" "yas-expand-from-trigger-key" "moccur-grep" "describe-variable" "describe-function" "auto-complete-mode" "describe-mode" "Buffer-menu-mode" "describe-key" "eval-defun" "pascal-mode"))
(setq-default helm-c-grep-history '("valid-file" "filename"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . helm-keyboard-quit) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-ff-history '("/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/" "/home/k-ohsugi/Dropbox/meeting/withHasegawa/GreenICN/utils/"))
(setq-default helm-grep-history '("valid-file" "filename"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-comint-input-ring '((name . "Comint history") (candidates lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) (action . helm-comint-input-ring-action)))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . helm-keyboard-quit) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("org" "pack" #("theme" 0 5 (fontified t)) "-------" "cpu" "Quit" #("**" 0 1 (fontified t face org-level-2) 1 2 (fontified t face org-level-2)) #("**" 0 1 (face org-level-2 font-lock-fontified t fontified t) 1 2 (face org-level-2 font-lock-fontified t fontified t)) #("+TITLE" 0 6 (face org-document-info-keyword font-lock-fontified t fontified t)) "buffer" "memo" "dat" "sleep" "udp" "dat mem" "read" "send" #("8" 0 1 (c-in-sws t fontified t)) "core" "gp" #("set" 0 3 (face font-lock-constant-face fontified t)) #("0" 0 1 (fontified t)) "test" "0" "template" "gnuplot-mode" #("lines" 0 4 (face font-lock-function-name-face fontified t) 4 5 (face font-lock-function-name-face font-lock-multiline t fontified t)) #("500000" 0 6 (face font-lock-constant-face fontified t)) #("yerrorbars" 0 9 (face font-lock-function-name-face fontified t) 9 10 (face font-lock-function-name-face font-lock-multiline t fontified t)) #("set" 0 1 (face font-lock-constant-face fontified t) 1 3 (face font-lock-constant-face fontified t)) "replot" "gnu" "get" "ssh memo" "ssh client" "ssh" #("dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd" 0 1472 (face font-lock-string-face fontified t c-in-sws t)) "rec" "eval" "p" "init" "pa" "eva" "gnuplot" "res" "acc" "ac"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("time -p" "time" "3s" "10s" "${SIZE}" "1GB" "\"" "'" "NAME" "NAME1" "10MB" "1MB" "1024" "4096" "68" "204" "819" "COUNT" "NPARA" "50000" "10000" "45" "50" "research_2014_group_001-ccn.pdf" "research_group_001-icn.pdf" "M1" "B4" "M" "M2" "Master" "Doctor" "D3" "./figure/" "./"))
(setq-default regexp-history '("block" "blocksize"))
(setq-default search-ring '("so" "so that" "energy" "hu" "hungry" "consume" "network" "netowrk" "in net" "router" "take" "estima" "esit" "entire" "eintire" "firefox"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("'" "4096"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
