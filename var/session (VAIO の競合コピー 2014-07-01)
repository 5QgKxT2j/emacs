;;; Automatically generated on Sat Jun 28 18:45:47 2014
;;; Invoked by k-ohsugi@VAIO using 24.3.1
(setq-default kill-ring '(#("メモリの消費電力$P_{mem}$は， 1 秒辺りのメモリへのアクセスバイト
数$bytes$[byte/s] に対して線形であり，式 (\\ref{eq:Pmemory}) で表すこと
ができる．" 0 8 (fontified t) 8 11 (fontified t face font-latex-math-face) 11 16 (display (raise -0.3) fontified t face (font-latex-math-face font-latex-subscript-face)) 16 17 (fontified t face font-latex-math-face) 17 40 (fontified t) 40 47 (fontified t face font-latex-math-face) 47 69 (fontified t) 69 73 (fontified t face (font-lock-keyword-face font-latex-sedate-face)) 73 74 (fontified t) 74 84 (fontified t face (font-lock-constant-face)) 84 98 (fontified t)) #("\\begin{eqation}
\\label{eq:Pmemory}
P_{mem}(bytes) = & & P_{MEMIDLE} + P_{BYTE}・ byte \\indent [W] \\\\
\\end{eqation}" 0 6 (fontified t face (font-lock-keyword-face font-latex-sedate-face)) 6 7 (fontified t) 7 14 (fontified t face (font-lock-function-name-face)) 14 15 (fontified t) 15 16 (fontified t) 16 22 (fontified t face (font-lock-keyword-face font-latex-sedate-face)) 22 23 (fontified t) 23 33 (fontified t face (font-lock-constant-face)) 33 35 (fontified t) 35 37 (fontified t) 37 42 (display nil fontified t) 42 52 (fontified t) 52 53 (fontified t face font-latex-warning-face) 53 54 (fontified t) 54 55 (fontified t face font-latex-warning-face) 55 58 (fontified t) 58 67 (display nil fontified t) 67 72 (fontified t) 72 78 (display nil fontified t) 78 85 (fontified t) 85 92 (fontified t face (font-latex-sedate-face)) 92 97 (fontified t) 97 99 (fontified t face font-latex-warning-face) 99 100 (fontified t) 100 101 (fontified t face #1=(font-lock-keyword-face font-latex-sedate-face)) 101 104 (fontified t face #1#) 104 105 (fontified t) 105 112 (fontified t face (font-lock-function-name-face)) 112 113 (fontified t)) #("eqnarray}" 0 8 (fontified t face (font-lock-function-name-face)) 8 9 (fontified t)) #("narray}" 0 6 (fontified t face (font-lock-function-name-face)) 6 7 (fontified t)) #("\\label{eq:Pnic}
P_{nic}(rate_{IP}) = & & P_{PACKET} ・ rate_{IP} \\indent [W]
" 0 6 (font-lock-multiline t face (font-lock-keyword-face font-latex-math-face font-latex-sedate-face) fontified t) 6 7 (face #2=(font-latex-math-face) font-lock-multiline t fontified t) 7 14 (font-lock-multiline t face (font-lock-constant-face . #2#) fontified t) 14 15 (face #2# font-lock-multiline t fontified t) 15 16 (face (font-latex-math-face) font-lock-multiline t fontified t) 16 18 (fontified t font-lock-multiline t face #1=(font-latex-math-face)) 18 23 (display #3=(raise -0.3) fontified t font-lock-multiline t face (font-latex-math-face font-latex-subscript-face)) 23 29 (fontified t font-lock-multiline t face #1#) 29 33 (display #3# fontified t font-lock-multiline t face (font-latex-math-face font-latex-subscript-face)) 33 37 (fontified t font-lock-multiline t face #1#) 37 38 (fontified t face (font-latex-warning-face . #1#) font-lock-multiline t) 38 39 (fontified t font-lock-multiline t face #1#) 39 40 (fontified t face (font-latex-warning-face . #1#) font-lock-multiline t) 40 43 (fontified t font-lock-multiline t face #1#) 43 51 (display #3# fontified t font-lock-multiline t face (font-latex-math-face font-latex-subscript-face)) 51 59 (fontified t font-lock-multiline t face #1#) 59 63 (display #3# fontified t font-lock-multiline t face (font-latex-math-face font-latex-subscript-face)) 63 64 (fontified t font-lock-multiline t face #1#) 64 71 (fontified t font-lock-multiline t face (font-latex-math-face font-latex-sedate-face)) 71 75 (fontified t font-lock-multiline t face #1#) 75 76 (face (font-latex-math-face) font-lock-multiline t fontified t)) #(" $P_{PACKET} = 3.04 ・ 10^{-6}$ [Joule/packet] であるこ" 0 1 (fontified t) 1 4 (fontified t face font-latex-math-face) 4 12 (display (raise -0.3) fontified t face (font-latex-math-face font-latex-subscript-face)) 12 25 (fontified t face font-latex-math-face) 25 29 (display (raise 0.3) fontified t face (font-latex-math-face font-latex-superscript-face)) 29 30 (fontified t face font-latex-math-face) 30 50 (fontified t)) #("また， NIC の消費電力$P_{nic}$は， IP パケットフォワーディングレー
ト $rate_{IP}$ [packet/s] に対して線形であり，式 (\\ref{eq:Pnic}) で表す
ことができる．

" 0 13 (fontified t) 13 16 (fontified t face font-latex-math-face) 16 21 (display #1=(raise -0.3) fontified t face (font-latex-math-face font-latex-subscript-face)) 21 22 (fontified t face font-latex-math-face) 22 42 (fontified t) 42 43 (fontified t) 43 45 (fontified t) 45 51 (face font-latex-math-face fontified t) 51 55 (face (font-latex-math-face font-latex-subscript-face) fontified t display #1#) 55 56 (face font-latex-math-face fontified t) 56 81 (fontified t) 81 85 (face (font-lock-keyword-face font-latex-sedate-face) fontified t) 85 86 (fontified t) 86 93 (face (font-lock-constant-face) fontified t) 93 99 (fontified t) 99 100 (fontified t) 100 107 (fontified t) 107 108 (fontified t) 108 109 (fontified t)) #("
" 0 1 (fontified t)) #("(iii)

" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) #("(ii) モデル化対象の CCN ルータでは，特定の CPU コア上で動作しているディ
スパッチャが， NIC (Network Interface Card) から受け取った CCN パケット
の処理にその他の CPU コアを割り当てるものと仮定する．さらに，ディスパッ
チャは， CCN パケットの処理に可能な限り少ない数の CPU コアのみ割り当て
るものとする． CPU コアに少しでも負荷が掛かると最大限の負荷を掛けた時と
ほぼ同等の電力を消費するため (3.1 節で示す) ，この設計は，
電力効率の観点で優れていると考えられる．
" 0 44 (fontified t) 44 98 (fontified t) 98 217 (fontified t) 217 251 (fontified t) 251 272 (fontified t)) #("%%CCN ルータの消費電力は，式 (\\ref{eq:simple}) で示すようにアイドル状
%%態の消費電力 (第 1 項) と CCN プロトコル処理によって生じる負荷に応じた消
%%費電力 (第 2 項) の合計とする．
%% 
%%\\begin{equation}
%%P_{router} = P_{IDLE} + P_{load}
%%\\label{eq:simple}
%%\\end{equation}

" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 19 (fontified t face font-lock-comment-face) 19 23 (fontified t face (font-lock-comment-face font-latex-sedate-face)) 23 47 (fontified t face font-lock-comment-face) 47 48 (fontified t) 48 50 (face font-lock-comment-delimiter-face fontified t) 50 92 (face font-lock-comment-face fontified t) 92 93 (fontified t) 93 95 (face font-lock-comment-delimiter-face fontified t) 95 114 (face font-lock-comment-face fontified t) 114 115 (fontified t) 115 118 (face font-lock-comment-delimiter-face fontified t) 118 119 (fontified t) 119 121 (face font-lock-comment-delimiter-face fontified t) 121 127 (face (font-lock-comment-face font-latex-sedate-face) fontified t) 127 137 (face font-lock-comment-face fontified t) 137 138 (fontified t) 138 140 (face font-lock-comment-delimiter-face fontified t) 140 172 (face font-lock-comment-face fontified t) 172 173 (fontified t) 173 175 (face font-lock-comment-delimiter-face fontified t) 175 181 (face (font-lock-comment-face font-latex-sedate-face) fontified t) 181 192 (face font-lock-comment-face fontified t) 192 193 (fontified t) 193 195 (face font-lock-comment-delimiter-face fontified t) 195 199 (face (font-lock-comment-face font-latex-sedate-face) fontified t) 199 209 (face font-lock-comment-face fontified t) 209 210 (fontified t) 210 211 (fontified t)) "入力パケットを並列に処理するCPUコアが，ルータが管理するテーブルなどのデータ構造に排他処理を必要としない．また，入力パケットは，常に最小数のCPUコアが実行されるよう，スケジュールされる．" #("．となる．" 0 1 (fontified t rear-nonsticky t) 1 5 (fontified t)) #("モデルは，少ない数のパラメータを持つ簡素な式で表す．これによって，ネッ
トワーク全体の消費電力を推定するための解析やシミュレーションにおけるモ
デルの使用を容易にすることが可能" 0 8 (fontified t) 8 16 (fontified t) 16 24 (fontified t) 24 32 (fontified t) 32 35 (fontified t) 35 36 (fontified t) 36 44 (fontified t) 44 52 (fontified t) 52 60 (fontified t) 60 68 (fontified t) 68 71 (fontified t) 71 72 (fontified t) 72 80 (fontified t) 80 88 (fontified t)) "(i)マルチコアCPUソフトウェアルータは，以下の特徴を有することを仮定する．一つの入力パケット処理を同一のCPUコアが実行し，高負荷時には複数のCPUコアが並列に動作する．" #("

" 0 1 (fontified t) 1 2 (fontified t)) "CCN ルータの電力
消費モデルは，筐体等が消費する定常的な消費電力と，パケット処理のために消費すること負荷に応じた消費電力をモデル化しており，負荷を入力Interestパケットレートとキャッシュヒット率から求めている[1]． 本稿では，このモデルを以下の方針で拡張する．" #("CCN ルータの電力消費モデルを以下の方針で作成する．

" 0 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t)) #("な " 0 2 (fontified t)) #("






このモデルは， 既存の IP プロトコ
ル処理よりも複雑で処理量が多い CCN プロトコル処理が消費する電力も考慮に
入れているという点で既存研究とは異なっている．このモデルは，シングルコ
ア CPU のルータのみを対象としているため，本稿ではこのモデルをマルチコ
ア CPU にも対応できるように拡張し，より" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 15 (fontified t) 15 22 (fontified t) 22 26 (fontified t) 26 27 (fontified t) 27 29 (fontified t) 29 33 (fontified t) 33 35 (fontified t) 35 43 (fontified t) 43 47 (fontified t) 47 55 (fontified t) 55 63 (fontified t) 63 65 (fontified t) 65 66 (fontified t) 66 68 (fontified t) 68 72 (fontified t) 72 74 (fontified t) 74 82 (fontified t) 82 90 (fontified t) 90 98 (fontified t) 98 101 (fontified t) 101 102 (fontified t) 102 108 (fontified t) 108 111 (fontified t) 111 116 (fontified t) 116 124 (fontified t) 124 132 (fontified t) 132 139 (fontified t) 139 140 (fontified t) 140 146 (fontified t) 146 150 (fontified t) 150 154 (fontified t) 154 162 (fontified t)) "これまでに単一CPUコアを対象として作成したモデルに対して，マルチCPUコアを有するソフトウェアルータに対応するとともに，メモリ装置へのアクセスが消費する電力も考慮するよう拡張することで，" "CCN(Content Centric Network)ネットワーク全体が消費電力を推定することを目的として，筆者らは，ソフトウェアCCN ルータの電力消
費モデルを開発している[1]．"))
(setq-default session-file-alist '(("~/Dropbox/research/work/society14/paperv0.3.tex" 1192 2512 1 nil nil 1192 (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paperv0.2.tex" 283 3893 1 nil nil 283 (overwrite-mode)) ("~/hoge/sougou14/paper.tex" 5913 5732 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paper.tex" 4435 4140 1 nil nil 1948 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 5728 nil 1 nil nil nil (overwrite-mode)) ("~/y-nakai.bib" 5266 5251 1 nil nil nil (overwrite-mode)) ("~/Dropbox/research/work/society14/paper.tex" 3111 3111 1 nil nil 3111 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 5553 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/ieicejsp.cls" 19042 19086 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paper (VAIO の競合コピー 2014-06-26).tex" 1778 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/paper.org" 656 nil 1 nil nil 322 (overwrite-mode)) ("/mnt/Dropbox/research/work/society14/abstract.org" 1 nil 1 nil nil 1 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140625.252/helm-autoloads.el" 42605 nil 1 nil nil 42605 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140623/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/helm-20140624.2318/helm-autoloads.el" 42605 nil 1 nil nil 42605 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/lua-mode-20140623.1237/lua-mode-autoloads.el" 510 nil 1 nil nil 510 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/org-20140623/org-autoloads.el" 27238 nil 1 nil nil 27238 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/ICN-meeting.org" 189 4717 1 nil nil 189 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/ICN-meeting.tex" 8299 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140621.2211/helm-autoloads.el" 42606 nil 1 nil nil 42606 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/s-20140620.1657/s-autoloads.el" 165 nil 1 nil nil 165 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-20140617.1640/yasnippet-autoloads.el" 1494 nil 1 nil nil 1494 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/snippets/org-mode/figure" 50 nil 1 nil nil 91 (overwrite-mode)) ("/mnt/Dropbox/storage/scfes.org" 1 nil 1 nil nil 29 (overwrite-mode)) ("~/.config/awesome/rc.lua" 1 17440 1 nil nil 17598 (overwrite-mode)) ("/sudo:root@desktop:/etc/X11/xorg.conf.d/10-monitor.conf" 289 nil 1 nil nil 138 (overwrite-mode)) ("/mnt/Dropbox/storage/keys-TA/it-keys_ta.org" 1042 nil 1 nil nil nil (overwrite-mode)) ("~/Downloads/作業割り当て.txt" 1 nil 1 nil nil 260 (overwrite-mode)) ("~/Downloads/作業割り当て.txtm" 1 nil 1 nil nil 2 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/elpa/epc-20140609.2234/epc-autoloads.el" 179 nil 1 nil nil 179 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/M2-meeting.org" 15 202 1 nil nil 15 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/20_org-mode.el" 1965 555 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/poster_introduction/paper.org" 224 4371 1 nil nil 4448 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/M2-meeting.tex" 794 nil 1 nil nil nil (overwrite-mode)) ("/sudo:root@localhost:/etc/X11/xorg.conf.d/20-gpudriver.conf" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140608.753/helm-autoloads.el" 48154 nil 1 nil nil 48154 (overwrite-mode)) ("/mnt/Dropbox/research/poster_introduction/paper.tex" 7591 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140607.2258/helm-autoloads.el" 48114 nil 1 nil nil 48114 (overwrite-mode)) ("~/.config/awesome/themes/theme.lua" 1765 318 1 nil nil 240 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140607.33/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140605.1908/auto-complete-autoloads.el" 1715 nil 1 nil nil 1715 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140605.1156/helm-autoloads.el" 48156 nil 1 nil nil 48156 (overwrite-mode))))
(setq-default file-name-history '("~/Dropbox/research/work/society14/paperv0.3.tex" "~/Dropbox/research/work/society14/paperv0.2.tex" "~/hoge/sougou14/paper.tex" "~/Dropbox/research/work/society14/paper.tex" "~/Dropbox/research/work/society14/paper.bib" "/home/k-ohsugi/y-nakai.bib" "/mnt/Dropbox/research/work/society14/paper.tex" "/mnt/Dropbox/research/work/society14/paper.org" "/mnt/Dropbox/research/work/society14/paper (VAIO の競合コピー 2014-06-26).tex" "/mnt/Dropbox/research/work/society14/abstract.org" "~/.emacs.d/elpa/helm-20140625.252/helm-autoloads.el" "~/.emacs.d/elpa/helm-20140624.2318/helm-autoloads.el" "~/.emacs.d/elpa/lua-mode-20140623.1237/lua-mode-autoloads.el" "~/.emacs.d/elpa/org-20140623/org-loaddefs.el" "~/.emacs.d/elpa/org-20140623/org-autoloads.el" "/tmp/packerbuild-1000/pdftk/pdftk/PKGBUILD" "~/Dropbox/research/meeting/ICN-meeting.org" "~/.emacs.d/elpa/helm-20140621.2211/helm-autoloads.el" "~/.emacs.d/elpa/s-20140620.1657/s-autoloads.el" "~/.emacs.d/elpa/yasnippet-20140617.1640/yasnippet-autoloads.el" "~/Dropbox/storage/scfes.org" "~/.emacs.d/snippets/org-mode/figure" "~/Dropbox/research/meeting/ICN-meeting.tex" "/tmp/packerbuild-1000/libgcj/libgcj/PKGBUILD" "~/.config/awesome/rc.lua" "/sudo:root@desktop:/etc/X11/xorg.conf.d/10-monitor.conf" "/etc/X11/xorg.conf.d/10-monitor.conf" "/etc/X11/xorg.conf.d/" "~/Dropbox/class/basic_network/report8/report8.org" "/tmp/packerbuild-1000/chromium-pepper-flash/chromium-pepper-flash/PKGBUILD" "~/Dropbox/storage/keys-TA/it-keys_ta.org" "~/Downloads/作業割り当て.txt" "~/Downloads/作業割り当て.txtm" "~/.emacs.d/elpa/epc-20140609.2234/epc-autoloads.el" "~/.emacs.d/inits/20_org-mode.el" "/sudo:root@localhost:/etc/X11/xorg.conf.d/20-gpudriver.conf" "~/Dropbox/research/meeting/old-meeting.org" "~/Dropbox/research/meeting/M2-meeting.org" "~/Dropbox/research/poster_introduction/paper.org" "~/Dropbox/research/energy_result/thesis/" "~/.emacs.d/elpa/helm-20140608.753/helm-autoloads.el" "~/.emacs.d/elpa/helm-20140607.2258/helm-autoloads.el" "~/.emacs.d/elpa/dash-20140607.33/dash-autoloads.el" "~/.config/awesome/themes/theme.lua" "/home/corgi/.config/awesome/rc.lua" "~/.emacs.d/elpa/auto-complete-20140605.1908/auto-complete-autoloads.el" "~/.emacs.d/elpa/helm-20140605.1156/helm-autoloads.el" "~/Dropbox/research/energy_result/icn_acm/cpu_cores_with_errorbar.dat" "~/Dropbox/research/energy_result/icn_acm/cpu_cores_with_errorbar.gp" "~/Dropbox/research/energy_result/icn_acm/cpu_cores.dat" "~/Dropbox/research/energy_result/icn_acm/cpu_cores.gp" "/home/corgi/.zshrc" "/home/corgi/Dropbox/research/energy_result/icn_acm/cpu_cores.gp" "/home/corgi/Dropbox/research/energy_result/icn_acm/memory_accsess.gp" "/home/corgi/Dropbox/research/energy_result/icn_acm/packet_rate.gp" "/home/corgi/Dropbox/research/energy_result/icn_acm/udp1500byte.gp" "/home/corgi/Dropbox/research/energy_result/icn_acm/udp256byte.gp" "/home/corgi/Downloads/graph_and_result-v2/README.txt" "~/Dropbox/research/poster_introduction" "~/Dropbox/research/" "~/Dropbox/research/energy_result/icn_acm/memory_accsess.gp" "~/Dropbox/research/energy_result/icn_acm/packet_rate.dat" "/ssh:router@192.168.10.80:/home/router/sleep.c" "~/Dropbox/research/energy_result/icn_acm/packet_rate.gp" "~/Dropbox/research/energy_result/icn_acm/udp256byte.gp" "~/Dropbox/research/energy_result/icn_acm/memory_accsess.dat" "/ssh:router@192.168.10.80:/home/router/read_memory.c" "/ssh:client1@192.168.10.85:/home/client1/send.c" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.gp" "~/Dropbox/research/energy_result/icn_acm/udp256byte.dat" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.dat" "~/Dropbox/research/energy_result/icn_acm/memory_accsess_0:0.gp" "/ssh:router@192.168.10.80:/home/router/cpu-clock.c" "/ssh:router@192.168.10.80:/home/router/test.c" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/memory_accsess.gp" "~/.emacs.d/elpa/gnuplot-20130206.1701/gnuplot.el" "~/.emacs.d/elpa/gnuplot-20130206.1701/gnuplot-gui.el" "~/.emacs.d/elpa/gnuplot-20130206.1701/" "~/.emacs.d/elpa/gnuplot-readme.txt" "~/.emacs.d/elpa/gnuplot-mode-readme.txt" "~/.emacs.d/elpa/" "~/.emacs.d/inits/99_gnuplot.el" "/ssh:client1@192.168.10.85:/home/client1/get_ccnx_time.sh" "~/.emacs.d/elpa/helm-20140530.2214/helm-autoloads.el" "/ssh:router@192.168.10.80:/home/router/get_ccnx_time.sh" "/ssh:server1@192.168.10.90:/home/server1/receive.c" "~/.emacs.d/elpa/gnuplot-20130206.1701/gnuplot-autoloads.el" "~/.emacs.d/inits/99_popwin.el" "~/.emacs.d/inits/99_popwin.elc" "~/Dropbox/research/energy_result/" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.gnuplot" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.out" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/udp1500byte.dat" "~/Dropbox/research/energy_result/icn_acm/udp1500byte.data" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/udp1500byte.res"))
(setq-default TeX-command-history '("Evince" "LatexMk" "Clean All"))
(setq-default buffer-name-history '("ieicejsp.cls" "report8.org" "udp1500byte.gp" "memory_accsess.dat" "*scratch*" "*Async Shell Command*" "ssh:get_ccnx_time.sh" "*gnuplot*" "udp1500byte.out" "*Moccur*" "*Org PDF LaTeX Output*" "__init__.py" "functions.py" "PKGBUILD" "ssh:hoge.c" "forwarding.c" "dummy.c" "256result.data" "ssh:receive.c" "ssh:ssh:ssh:send.c<client1>" "router" "rdtsc.h" "*Packages*" "*Macroexpansion*" "2-13 Daring!!.mp3" "*Backtrace*" "20_org-mode.el" "hote.txt" "es.org" "*init log*"))
(setq-default coding-system-history '("shift_jis" "utf-8-unix" "unix"))
(setq-default command-history '((write-file "~/Dropbox/research/work/society14/paperv0.3.tex" t) (package-list-packages nil)))
(setq-default extended-command-history '("package-list-packages" "ispell-buffer" "count-lines-region" "eval-buffer" "yas-expand-from-trigger-key" "moccur-grep" "describe-variable" "describe-function" "auto-complete-mode" "describe-mode" "Buffer-menu-mode" "describe-key" "eval-defun" "pascal-mode"))
(setq-default helm-c-grep-history '("valid-file" "filename"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . helm-keyboard-quit) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-ff-history '("/home/k-ohsugi/Dropbox/research/work/society14/" "/home/k-ohsugi/hoge/" "/home/k-ohsugi/" "/mnt/Dropbox/research/work/society14/" "/mnt/Dropbox/" "/home/k-ohsugi/Dropbox/research/energy_result/icn_acm/" "/home/k-ohsugi/Dropbox/meeting/withHasegawa/GreenICN/utils/"))
(setq-default helm-grep-history '("valid-file" "filename"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-comint-input-ring '((name . "Comint history") (candidates lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) (action . helm-comint-input-ring-action)))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . helm-keyboard-quit) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("evince paperv0.3.pdf" "ex" "pack" "evince paperv0.2.pdf" "/home/k-ohsugi/hoge/" "/home/k-ohsugi/Dropbox/research/work/society14/paper.tex" #("Nakai14" 0 7 (fontified t face (font-lock-constant-face))) "/home/k-ohsugi/Dropbox/research/work/society14/paper.bib" "005677669" "evince paper.pdf" "/mnt/Dropbox/research/work/" "tex" #("mincho" 0 6 (fontified t)) "org" "/mnt/Dropbox/research/work/society14/pap" "/mnt/Dropbox/research/work/society14/" "/mnt/Dropbox/" "org-mode" "figure" "rc.lua" "-------"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("screen.count ()" "2" "time -p" "time" "3s" "10s" "${SIZE}" "1GB" "\"" "'" "NAME" "NAME1" "10MB" "1MB" "1024" "4096" "68" "204" "819" "COUNT" "NPARA" "50000" "10000" "45" "50" "research_2014_group_001-ccn.pdf" "research_group_001-icn.pdf" "M1" "B4" "M" "M2" "Master" "Doctor" "D3" "./figure/" "./"))
(setq-default regexp-history '("block" "blocksize"))
(setq-default search-ring '("時" "とき" "fig" "insert" "bfast" "counting" "s = " "k個" "k" "       時" "beamer" "so" "so that" "energy" "hu" "hungry"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("'" "4096"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
