;;; Automatically generated on Tue May 27 20:46:22 2014
;;; Invoked by k-ohsugi@VAIO using 24.3.1
(setq-default kill-ring '(#("16" 0 1 (fontified t c-in-sws t) 1 2 (fontified t c-in-sws t)) #(" = 'a';" 0 3 (fontified t) 3 4 (fontified t face font-lock-string-face) 4 6 (fontified t face font-lock-string-face) 6 7 (fontified t rear-nonsticky t)) #("        for (i = 0; i < mult; i++) {
      for (j = 0; j < size; j++) {
        *(array + (i + 1) * j) = 'a';" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 37 (fontified t) 37 43 (fontified t) 43 46 (fontified t face font-lock-keyword-face) 46 72 (fontified t) 72 80 (fontified t) 80 105 (fontified t) 105 106 (fontified t face font-lock-string-face) 106 108 (fontified t face font-lock-string-face) 108 109 (fontified t)) #("  " 0 2 (fontified t)) #("  while(1) {" 0 2 (fontified t) 2 7 (fontified t face font-lock-keyword-face) 7 12 (fontified t)) #("256" 0 1 (fontified t c-in-sws t) 1 2 (fontified t c-in-sws t) 2 3 (fontified t c-in-sws t)) #("
" 0 1 (fontified t)) #("   /*" 0 3 (fontified t) 3 5 (fontified t face font-lock-comment-delimiter-face)) #("[SIZE];" 0 7 (fontified t)) #("
" 0 1 (fontified t org-category "dispatcher_design_v2")) "% Created 2014-05-27 火 00:13
\\documentclass[a4j,10.5pt,uplatex,twocolumn]{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
 \\usepackage[dvipdfmx,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{pxjahyper}
 \\usepackage{bookmark}
 \\usepackage{url}
\\usepackage[top=10truemm,bottom=20truemm,left=15truemm,right=15truemm]{geometry}
\\author{大杉 海斗}
\\date{\\today}
\\title{NDNx パケットの並列処理を実現するルータの設計}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.6)}}
\\begin{document}

\\maketitle

\\section{APPROACH}
\\label{sec-1}
\\subsection{DESIGN GOAL}
\\label{sec-1-1}
ICN ルータにおいて，マルチコア CPU で並列にパケット処理を行うことは，パ
フォーマンスの向上に有効である． 一方で， piyo 節の結果より， CPU コア
に僅かでも負荷がかかると，消費電力がアイドル時に比べて大きく増加するこ
とが分かっている．したがって，できるだけ少ない CPU コアでパケット処理を
行い，その他の CPU コアをスリープさせておくことは消費電力の削減に有効であ
る．そこで，我々は，消費電力とパフォーマンスの両者を考慮し，最小の CPU
コア数で並列にパケット処理を行う NDNx/CCNx ベースのマルチコア CPU ルー
タの設計を行う．
\\subsection{REQUIREMENTS}
\\label{sec-1-2}
NDNx/CCNx では， NPHT (Name Prefix Hash Table) などの複数のハッシュテー
ブルを用いて NDN の CS (Content Store) ・ FIB (Forwarding Information
Base) ・ PIT (Pending Interest Table) の機能を実現している． NDNx/CCNx
では， NDNx パケットを受け取る度に，これらのテーブルへのエントリの挿入
あるいは削除が行われる．したがって，並列で NDNx パケットを処理する時，
これらのテーブルを共有している場合は，排他制御が高い頻度で発生すると予
想される．これは， NDNx パケットをマルチコア CPU で並列処理することによ
る処理速度の向上を大幅に妨げることになる．したがって，マルチコアで並列
にパケットを処理するとき，排他制御が発生しないテーブル構造にする必要が
ある．

また，低負荷時に CPU コアをスリープさせて消費電力を削減するため， NDNx
パケット処理を行う CPU コアの数を増減させられる必要がある．したがって，
分割されたテーブル集合にアクセスできる CPU コアは固定ではなく，動的に変
化させられる必要がある．

\\subsection{APPROACH}
\\label{sec-1-3}
\\begin{table}[htb]
\\caption{\\label{tab:cat}CPU ALLOCATION TABLE (H () はハッシュ関数， T はテーブル集合へのリンクを持つポインタ配列)}
\\centering
\\begin{tabular}{rll}
CPU NUMBER & HASH & TABLE\\\\
\\hline
0 & H (/a),H (/A) & T $[1]$,T$[3]$\\\\
1 & H (/b) & T $[2]$\\\\
2 & H (/org) & T $[5]$\\\\
3 & H (/jp) & T $[M]$\\\\
\\end{tabular}
\\end{table}

これを解決するため， NDNx/CCNx のすべてのハッシュテーブルおよびそれらの
テーブルのエントリにアクセスするためのインデックス (以降，テーブルとイ
ンデックスを合わせてテーブル集合とする) を分割し，各 CPU コアが，分割さ
れたテーブル集合に排他的にアクセスできるようにする必要がある． テーブル
集合を M 個に分割する．また，各 CPU コアにパケット処理を割り当てするた
めのディスパッチャを Core0 上で動作させる．

\\section{TABLE STRUCTURE}
\\label{sec-2}
一番目の Name Component (以降， First Name Component とする) が同じエン
トリは，必ず同じテーブル集合に含まれるようにする．これは， FIB の最長一
致検索を高速に行うために， NPHT の各エントリが， name prefix の長さが
1 コンポネント短いエントリ (例えば，\"/a/b/c\"ならば\"/a/b\") に対して，リ
ンクを張るためである．

\\section{DISPATCHER ALGORITHM}
\\label{sec-3}
\\subsection{PACKET PROCESS}
\\label{sec-3-1}
図 hoge は，ルータにおける NDN パケットフローを示している． Core0 では，
NIC から受け取ったパケットの処理を Core1 ・ 2 ・ 3 へ割り当てするディス
パッチャを動作させる．また， Core0 自身も NDNx パケット処理を行う．
ディスパッチャは，表 \\ref{tab:cat} で示す CAT (CPU ALLOCATION TABLE) を保持し，各
CPU コアが処理する First Name Component のハッシュ値とその CPU コアがア
クセス可能なテーブル集合へのリンクを管理する． Core0 は， First Name
Component のハッシュ値によってどの Core にパケットをディスパッチするか
決定するため，ハッシュ値をキーとして， CAT を探索する． 探索によりエン
トリが発見された場合， NDNx パケット処理をエントリ中の CPU 番号を持つ
CPU コア へと割り当てする．エントリが発見できなかった場合， NDNx パケッ
ト処理を CPU 割り当てアルゴリズムにしたがって割り当てる．そして， CAT
に新たなエントリを挿入する． CPU 割り当てアルゴリズムに関してはここでは
議論しない．

\\subsection{INCREASING/DECREASING THE NUMBER OF CPU CORES FOR PACKET PROCESSING}
\\label{sec-3-2}
ディスパッチャは， CPU の負荷に応じて NDNx パケットの処理を行う CPU の
数を増減させる． CPU の数の増減は， 単純に CAT の HASH および TABLE ド
メインを書き換えることで行うことができる．つまり，新たな CPU コアを
NDNx パケット処理に使用したければ，その CPU コアに対応する CAT のエント
リの HASH と TABLE に値を書き込めば良い．反対に， CPU コアを NDNx パケッ
ト処理に使わないようにするには，その CPU コアに対応する CAT のエントリ
の HASH と TABLE を空にして，その内容を別のコアのエントリに追加すればよ
い．

\\section{PERFORMANCE}
\\label{sec-4}
% Emacs 24.3.1 (Org mode 8.2.6)
\\end{document}" "% Created 2014-05-26 月 22:22
\\documentclass[a4j,10.5pt,uplatex,twocolumn]{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
 \\usepackage[dvipdfmx,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{pxjahyper}
 \\usepackage{bookmark}
 \\usepackage{url}
\\usepackage[top=10truemm,bottom=20truemm,left=15truemm,right=15truemm]{geometry}
\\author{大杉 海斗}
\\date{\\today}
\\title{NDNx パケットの並列処理を実現するルータの設計}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.6)}}
\\begin{document}

\\maketitle

\\section{APPROACH}
\\label{sec-1}
\\subsection{DESIGN GOAL}
\\label{sec-1-1}
ICN ルータにおいて，マルチコア CPU で並列にパケット処理を行うことは，パ
フォーマンスの向上に有効である． 一方で， piyo 節の結果より， CPU コア
に僅かでも負荷がかかると，消費電力がアイドル時に比べて大きく増加するこ
とが分かっている．したがって，できるだけ少ない CPU コアでパケット処理を
行い，その他の CPU コアをスリープさせておくことは消費電力の削減に有効であ
る．そこで，我々は，消費電力とパフォーマンスの両者を考慮し，最小の CPU
コア数で並列にパケット処理を行う NDNx/CCNx ベースのマルチコア CPU ルー
タの設計を行う．
\\subsection{REQUIREMENTS}
\\label{sec-1-2}
NDNx/CCNx では， NPHT (Name Prefix Hash Table) などの複数のハッシュテー
ブルを用いて NDN の CS (Content Store) ・ FIB (Forwarding Information
Base) ・ PIT (Pending Interest Table) の機能を実現している． NDNx/CCNx
では， NDNx パケットを受け取る度に，これらのテーブルへのエントリの挿入
あるいは削除が行われる．したがって，並列で NDNx パケットを処理する時，
これらのテーブルを共有している場合は，排他制御が高い頻度で発生すると予
想される．これは， NDNx パケットをマルチコア CPU で並列処理することによ
る処理速度の向上を大幅に妨げることになる．したがって，マルチコアで並列
にパケットを処理するとき，排他制御が発生しないテーブル構造にする必要が
ある．

また，低負荷時に CPU コアをスリープさせて消費電力を削減するため， NDNx
パケット処理を行う CPU コアの数を増減させられる必要がある．したがって，
分割されたテーブル集合にアクセスできる CPU コアは固定ではなく，動的に変
化させられる必要がある．

\\subsection{APPROACH}
\\label{sec-1-3}
\\begin{table}[htb]
\\caption{\\label{tab:cat}CPU ALLOCATION TABLE (H () はハッシュ関数， T はテーブル集合へのリンクを持つポインタ配列)}
\\centering
\\begin{tabular}{rll}
CPU NUMBER & HASH & TABLE\\\\
\\hline
0 & H (/a),H (/A) & T $[1]$,T$[3]$\\\\
1 & H (/b) & T $[2]$\\\\
2 & H (/org) & T $[5]$\\\\
3 & H (/jp) & T $[M]$\\\\
\\end{tabular}
\\end{table}

これを解決するため， NDNx/CCNx のすべてのハッシュテーブルおよびそれらの
テーブルのエントリにアクセスするためのインデックス (以降，テーブルとイ
ンデックスを合わせてテーブル集合とする) を分割し，各 CPU コアが，分割さ
れたテーブル集合に排他的にアクセスできるようにする必要がある． テーブル
集合を M 個に分割する．また，各 CPU コアにパケット処理を割り当てするた
めのディスパッチャを Core0 上で動作させる．

\\section{TABLE STRUCTURE}
\\label{sec-2}
一番目の Name Component (以降， First Name Component とする) が同じエン
トリは，必ず同じテーブル集合に含まれるようにする．これは， FIB の最長一
致検索を高速に行うために， NPHT の各エントリが， name prefix の長さが
1 コンポネント短いエントリ (例えば，\"/a/b/c\"ならば\"/a/b\") に対して，リ
ンクを張るためである．

\\section{DISPATCHER ALGORITHM}
\\label{sec-3}
\\subsection{PACKET PROCESS}
\\label{sec-3-1}
図 hoge は，ルータにおける NDN パケットフローを示している． Core0 では，
NIC から受け取ったパケットの処理を Core1 ・ 2 ・ 3 へ割り当てするディス
パッチャを動作させる．また， Core0 自身も NDNx パケット処理を行う．
ディスパッチャは，表 \\ref{tab:cat} で示す CAT (CPU ALLOCATION TABLE) を保持し，各
CPU コアが処理する First Name Component のハッシュ値とその CPU コアがア
クセス可能なテーブル集合へのリンクを管理する． Core0 は， First Name
Component のハッシュ値によってどの Core にパケットをディスパッチするか
決定するため，ハッシュ値をキーとして， CAT を探索する． 探索によりエン
トリが発見された場合， NDNx パケット処理をエントリ中の CPU 番号を持つ
CPU コア へと割り当てする．エントリが発見できなかった場合， NDNx パケッ
ト処理を CPU 割り当てアルゴリズムにしたがって割り当てる．そして， CAT
に新たなエントリを挿入する． CPU 割り当てアルゴリズムに関してはここでは
議論しない．

\\subsection{INCREASING/DECREASING THE NUMBER OF CPU CORES FOR PACKET PROCESSING}
\\label{sec-3-2}
ディスパッチャは， CPU の負荷に応じて NDNx パケットの処理を行う CPU の
数を増減させる． CPU の数の増減は， 単純に CAT の HASH および TABLE ド
メインを書き換えることで行うことができる．つまり，新たな CPU コアを
NDNx パケット処理に使用したければ，その CPU コアに対応する CAT のエント
リの HASH と TABLE に値を書き込めば良い．反対に， CPU コアを NDNx パケッ
ト処理に使わないようにするには，その CPU コアに対応する CAT のエントリ
の HASH と TABLE を空にして，その内容を別のコアのエントリに追加すればよ
い．

\\section{PERFORMANCE}
\\label{sec-4}
% Emacs 24.3.1 (Org mode 8.2.6)
\\end{document}" #("テーブル集合への排他的なアクセスを実現するため， テーブル集合を M 個に" 0 37 (fontified t)) #("これを解決するため，
NDNx/CCNx のすべてのハッシュテーブルおよびそれらのテーブルのエントリに
アクセスするためのインデックス (以降，テーブルとインデックスを合わせて
テーブル集合とする) を分割し，各 CPU コアが，分割されたテーブル集合に排
他的にアクセスできるようにする必要がある．" 0 150 (fontified t)) "% Created 2014-05-26 月 22:17
\\documentclass[a4j,10.5pt,uplatex,twocolumn]{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
 \\usepackage[dvipdfmx,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{pxjahyper}
 \\usepackage{bookmark}
 \\usepackage{url}
\\usepackage[top=10truemm,bottom=20truemm,left=15truemm,right=15truemm]{geometry}
\\author{大杉 海斗}
\\date{\\today}
\\title{NDNx パケットの並列処理を実現するルータの設計}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.6)}}
\\begin{document}

\\maketitle

\\section{APPROACH}
\\label{sec-1}
\\subsection{DESIGN GOAL}
\\label{sec-1-1}
ICN ルータにおいて，マルチコア CPU で並列にパケット処理を行うことは，パ
フォーマンスの向上に有効である． 一方で， piyo 節の結果より， CPU コア
に僅かでも負荷がかかると，消費電力がアイドル時に比べて大きく増加するこ
とが分かっている．したがって，できるだけ少ない CPU コアでパケット処理を
行い，その他の CPU コアをスリープさせておくことは消費電力の削減に有効であ
る．そこで，我々は，消費電力とパフォーマンスの両者を考慮し，最小の CPU
コア数で並列にパケット処理を行う NDNx/CCNx ベースのマルチコア CPU ルー
タの設計を行う．
\\subsection{REQUIREMENTS}
\\label{sec-1-2}
NDNx/CCNx では， NPHT (Name Prefix Hash Table) などの複数のハッシュテー
ブルを用いて NDN の CS (Content Store) ・ FIB (Forwarding Information
Base) ・ PIT (Pending Interest Table) の機能を実現している． NDNx/CCNx
では， NDNx パケットを受け取る度に，これらのテーブルへのエントリの挿入
あるいは削除が行われる．したがって，並列で NDNx パケットを処理する時，
これらのテーブルを共有している場合は，排他制御が高い頻度で発生すると予
想される．これは， NDNx パケットをマルチコア CPU で並列処理することによ
る処理速度の向上を大幅に妨げることになる．これを解決するため，
NDNx/CCNx のすべてのハッシュテーブルおよびそれらのテーブルのエントリに
アクセスするためのインデックス (以降，テーブルとインデックスを合わせて
テーブル集合とする) を分割し，各 CPU コアが，分割されたテーブル集合に排
他的にアクセスできるようにする必要がある．

また，低負荷時に CPU コアをスリープさせて消費電力を削減するため， NDNx
パケット処理を行う CPU コアの数を増減させられる必要がある．したがって，
分割されたテーブル集合にアクセスできる CPU コアは固定ではなく，動的に変
化させられる必要がある．

\\subsection{APPROACH}
\\label{sec-1-3}
\\begin{table}[htb]
\\caption{\\label{tab:cat}CPU ALLOCATION TABLE (H () はハッシュ関数， T はテーブル集合へのリンクを持つポインタ配列)}
\\centering
\\begin{tabular}{rll}
CPU NUMBER & HASH & TABLE\\\\
\\hline
0 & H (/a),H (/A) & T $[1]$,T$[3]$\\\\
1 & H (/b) & T $[2]$\\\\
2 & H (/org) & T $[5]$\\\\
3 & H (/jp) & T $[M]$\\\\
\\end{tabular}
\\end{table}

テーブル集合への排他的なアクセスを実現するため， テーブル集合を M 個に
分割する．また，各 CPU コアにパケット処理を割り当てするためのディスパッ
チャを Core0 上で動作させる．

\\section{TABLE STRUCTURE}
\\label{sec-2}
一番目の Name Component (以降， First Name Component とする) が同じエン
トリは，必ず同じテーブル集合に含まれるようにする．これは， FIB の最長一
致検索を高速に行うために， NPHT の各エントリが， name prefix の長さが
1 コンポネント短いエントリ (例えば，\"/a/b/c\"ならば\"/a/b\") に対して，リ
ンクを張るためである．

\\section{DISPATCHER ALGORITHM}
\\label{sec-3}
\\subsection{PACKET PROCESS}
\\label{sec-3-1}
図 hoge は，ルータにおける NDN パケットフローを示している． Core0 では，
NIC から受け取ったパケットの処理を Core1 ・ 2 ・ 3 へ割り当てするディス
パッチャを動作させる．また， Core0 自身も NDNx パケット処理を行う．
ディスパッチャは，表 \\ref{tab:cat} で示す CAT (CPU ALLOCATION TABLE) を保持し，各
CPU コアが処理する First Name Component のハッシュ値とその CPU コアがア
クセス可能なテーブル集合へのリンクを管理する． Core0 は， First Name
Component のハッシュ値によってどの Core にパケットをディスパッチするか
決定するため，ハッシュ値をキーとして， CAT を探索する． 探索によりエン
トリが発見された場合， NDNx パケット処理をエントリ中の CPU 番号を持つ
CPU コア へと割り当てする．エントリが発見できなかった場合， NDNx パケッ
ト処理を CPU 割り当てアルゴリズムにしたがって割り当てる．そして， CAT
に新たなエントリを挿入する． CPU 割り当てアルゴリズムに関してはここでは
議論しない．

\\subsection{INCREASING/DECREASING THE NUMBER OF CPU CORES FOR PACKET PROCESSING}
\\label{sec-3-2}
ディスパッチャは， CPU の負荷に応じて NDNx パケットの処理を行う CPU の
数を増減させる． CPU の数の増減は， 単純に CAT の HASH および TABLE ド
メインを書き換えることで行うことができる．つまり，新たな CPU コアを
NDNx パケット処理に使用したければ，その CPU コアに対応する CAT のエント
リの HASH と TABLE に値を書き込めば良い．反対に， CPU コアを NDNx パケッ
ト処理に使わないようにするには，その CPU コアに対応する CAT のエントリ
の HASH と TABLE を空にして，その内容を別のコアのエントリに追加すればよ
い．

\\section{PERFORMANCE}
\\label{sec-4}
% Emacs 24.3.1 (Org mode 8.2.6)
\\end{document}" "% Created 2014-05-26 月 22:16
\\documentclass[a4j,10.5pt,uplatex,twocolumn]{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
 \\usepackage[dvipdfmx,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{pxjahyper}
 \\usepackage{bookmark}
 \\usepackage{url}
\\usepackage[top=10truemm,bottom=20truemm,left=15truemm,right=15truemm]{geometry}
\\author{大杉 海斗}
\\date{\\today}
\\title{NDNx パケットの並列処理を実現するルータの設計}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.6)}}
\\begin{document}

\\maketitle

\\section{APPROACH}
\\label{sec-1}
\\subsection{DESIGN GOAL}
\\label{sec-1-1}
ICN ルータにおいて，マルチコア CPU で並列にパケット処理を行うことは，パ
フォーマンスの向上に有効である． 一方で， piyo 節の結果より， CPU コア
に僅かでも負荷がかかると，消費電力がアイドル時に比べて大きく増加するこ
とが分かっている．したがって，できるだけ少ない CPU コアでパケット処理を
行い，その他の CPU コアはスリープさせておくことは消費電力の削減に有効であ
る．そこで，我々は，消費電力とパフォーマンスの両者を考慮し，最小の CPU
コア数で並列にパケット処理を行う NDNx/CCNx ベースのマルチコア CPU ルー
タの設計を行う．
\\subsection{REQUIREMENTS}
\\label{sec-1-2}
NDNx/CCNx では， NPHT (Name Prefix Hash Table) などの複数のハッシュテー
ブルを用いて NDN の CS (Content Store) ・ FIB (Forwarding Information
Base) ・ PIT (Pending Interest Table) の機能を実現している． NDNx/CCNx
では， NDNx パケットを受け取る度に，これらのテーブルへのエントリの挿入
あるいは削除が行われる．したがって，並列で NDNx パケットを処理する時，
これらのテーブルを共有している場合は，排他制御が高い頻度で発生すると予
想される．これは， NDNx パケットをマルチコア CPU で並列処理することによ
る処理速度の向上を大幅に妨げることになる．これを解決するため，
NDNx/CCNx のすべてのハッシュテーブルおよびそれらのテーブルのエントリに
アクセスするためのインデックス (以降，テーブルとインデックスを合わせて
テーブル集合とする) を分割し，各 CPU コアが，分割されたテーブル集合に排
他的にアクセスできるようにする必要がある．

また，低負荷時に CPU コアをスリープさせて消費電力を削減するため， NDNx
パケット処理を行う CPU コアの数を増減させられる必要がある．したがって，
分割されたテーブル集合にアクセスできる CPU コアは固定ではなく，動的に変
化させられる必要がある．

\\subsection{APPROACH}
\\label{sec-1-3}
\\begin{table}[htb]
\\caption{\\label{tab:cat}CPU ALLOCATION TABLE (H () はハッシュ関数， T はテーブル集合へのリンクを持つポインタ配列)}
\\centering
\\begin{tabular}{rll}
CPU NUMBER & HASH & TABLE\\\\
\\hline
0 & H (/a),H (/A) & T $[1]$,T$[3]$\\\\
1 & H (/b) & T $[2]$\\\\
2 & H (/org) & T $[5]$\\\\
3 & H (/jp) & T $[M]$\\\\
\\end{tabular}
\\end{table}

テーブル集合への排他的なアクセスを実現するため， テーブル集合を M 個に
分割する．また，各 CPU コアにパケット処理を割り当てするためのディスパッ
チャを Core0 上で動作させる．

\\section{TABLE STRUCTURE}
\\label{sec-2}
一番目の Name Component (以降， First Name Component とする) が同じエン
トリは，必ず同じテーブル集合に含まれるようにする．これは， FIB の最長一
致検索を高速に行うために， NPHT の各エントリが， name prefix の長さが
1 コンポネント短いエントリ (例えば，\"/a/b/c\"ならば\"/a/b\") に対して，リ
ンクを張るためである．

\\section{DISPATCHER ALGORITHM}
\\label{sec-3}
\\subsection{PACKET PROCESS}
\\label{sec-3-1}
図 hoge は，ルータにおける NDN パケットフローを示している． Core0 では，
NIC から受け取ったパケットの処理を Core1 ・ 2 ・ 3 へ割り当てするディス
パッチャを動作させる．また， Core0 自身も NDNx パケット処理を行う．
ディスパッチャは，表 \\ref{tab:cat} で示す CAT (CPU ALLOCATION TABLE) を保持し，各
CPU コアが処理する First Name Component のハッシュ値とその CPU コアがア
クセス可能なテーブル集合へのリンクを管理する． Core0 は， First Name
Component のハッシュ値によってどの Core にパケットをディスパッチするか
決定するため，ハッシュ値をキーとして， CAT を探索する． 探索によりエン
トリが発見された場合， NDNx パケット処理をエントリ中の CPU 番号を持つ
CPU コア へと割り当てする．エントリが発見できなかった場合， NDNx パケッ
ト処理を CPU 割り当てアルゴリズムにしたがって割り当てる．そして， CAT
に新たなエントリを挿入する． CPU 割り当てアルゴリズムに関してはここでは
議論しない．

\\subsection{INCREASING/DECREASING THE NUMBER OF CPU CORES FOR PACKET PROCESSING}
\\label{sec-3-2}
ディスパッチャは， CPU の負荷に応じて NDNx パケットの処理を行う CPU の
数を増減させる． CPU の数の増減は， 単純に CAT の HASH および TABLE ド
メインを書き換えることで行うことができる．つまり，新たな CPU コアを
NDNx パケット処理に使用したければ，その CPU コアに対応する CAT のエント
リの HASH と TABLE に値を書き込めば良い．反対に， CPU コアを NDNx パケッ
ト処理に使わないようにするには，その CPU コアに対応する CAT のエントリ
の HASH と TABLE を空にして，その内容を別のコアのエントリに追加すればよ
い．

\\section{PERFORMANCE}
\\label{sec-4}
% Emacs 24.3.1 (Org mode 8.2.6)
\\end{document}" "% Created 2014-05-26 月 22:16
\\documentclass[a4j,10.5pt,uplatex,twocolumn]{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
 \\usepackage[dvipdfmx,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{pxjahyper}
 \\usepackage{bookmark}
 \\usepackage{url}
\\usepackage[top=10truemm,bottom=20truemm,left=15truemm,right=15truemm]{geometry}
\\usetheme{default}
\\author{大杉 海斗}
\\date{\\today}
\\title{NDNx パケットの並列処理を実現するルータの設計}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.6)}}
\\begin{document}

\\maketitle

\\section{APPROACH}
\\label{sec-1}
\\subsection{DESIGN GOAL}
\\label{sec-1-1}
ICN ルータにおいて，マルチコア CPU で並列にパケット処理を行うことは，パ
フォーマンスの向上に有効である． 一方で， piyo 節の結果より， CPU コア
に僅かでも負荷がかかると，消費電力がアイドル時に比べて大きく増加するこ
とが分かっている．したがって，できるだけ少ない CPU コアでパケット処理を
行い，その他の CPU コアはスリープさせておくことは消費電力の削減に有効であ
る．そこで，我々は，消費電力とパフォーマンスの両者を考慮し，最小の CPU
コア数で並列にパケット処理を行う NDNx/CCNx ベースのマルチコア CPU ルー
タの設計を行う．
\\subsection{REQUIREMENTS}
\\label{sec-1-2}
NDNx/CCNx では， NPHT (Name Prefix Hash Table) などの複数のハッシュテー
ブルを用いて NDN の CS (Content Store) ・ FIB (Forwarding Information
Base) ・ PIT (Pending Interest Table) の機能を実現している． NDNx/CCNx
では， NDNx パケットを受け取る度に，これらのテーブルへのエントリの挿入
あるいは削除が行われる．したがって，並列で NDNx パケットを処理する時，
これらのテーブルを共有している場合は，排他制御が高い頻度で発生すると予
想される．これは， NDNx パケットをマルチコア CPU で並列処理することによ
る処理速度の向上を大幅に妨げることになる．これを解決するため，
NDNx/CCNx のすべてのハッシュテーブルおよびそれらのテーブルのエントリに
アクセスするためのインデックス (以降，テーブルとインデックスを合わせて
テーブル集合とする) を分割し，各 CPU コアが，分割されたテーブル集合に排
他的にアクセスできるようにする必要がある．

また，低負荷時に CPU コアをスリープさせて消費電力を削減するため， NDNx
パケット処理を行う CPU コアの数を増減させられる必要がある．したがって，
分割されたテーブル集合にアクセスできる CPU コアは固定ではなく，動的に変
化させられる必要がある．

\\subsection{APPROACH}
\\label{sec-1-3}
\\begin{table}[htb]
\\caption{\\label{tab:cat}CPU ALLOCATION TABLE (H () はハッシュ関数， T はテーブル集合へのリンクを持つポインタ配列)}
\\centering
\\begin{tabular}{rll}
CPU NUMBER & HASH & TABLE\\\\
\\hline
0 & H (/a),H (/A) & T $[1]$,T$[3]$\\\\
1 & H (/b) & T $[2]$\\\\
2 & H (/org) & T $[5]$\\\\
3 & H (/jp) & T $[M]$\\\\
\\end{tabular}
\\end{table}

テーブル集合への排他的なアクセスを実現するため， テーブル集合を M 個に
分割する．また，各 CPU コアにパケット処理を割り当てするためのディスパッ
チャを Core0 上で動作させる．

\\section{TABLE STRUCTURE}
\\label{sec-2}
一番目の Name Component (以降， First Name Component とする) が同じエン
トリは，必ず同じテーブル集合に含まれるようにする．これは， FIB の最長一
致検索を高速に行うために， NPHT の各エントリが， name prefix の長さが
1 コンポネント短いエントリ (例えば，\"/a/b/c\"ならば\"/a/b\") に対して，リ
ンクを張るためである．

\\section{DISPATCHER ALGORITHM}
\\label{sec-3}
\\subsection{PACKET PROCESS}
\\label{sec-3-1}
図 hoge は，ルータにおける NDN パケットフローを示している． Core0 では，
NIC から受け取ったパケットの処理を Core1 ・ 2 ・ 3 へ割り当てするディス
パッチャを動作させる．また， Core0 自身も NDNx パケット処理を行う．
ディスパッチャは，表 \\ref{tab:cat} で示す CAT (CPU ALLOCATION TABLE) を保持し，各
CPU コアが処理する First Name Component のハッシュ値とその CPU コアがア
クセス可能なテーブル集合へのリンクを管理する． Core0 は， First Name
Component のハッシュ値によってどの Core にパケットをディスパッチするか
決定するため，ハッシュ値をキーとして， CAT を探索する． 探索によりエン
トリが発見された場合， NDNx パケット処理をエントリ中の CPU 番号を持つ
CPU コア へと割り当てする．エントリが発見できなかった場合， NDNx パケッ
ト処理を CPU 割り当てアルゴリズムにしたがって割り当てる．そして， CAT
に新たなエントリを挿入する． CPU 割り当てアルゴリズムに関してはここでは
議論しない．

\\subsection{INCREASING/DECREASING THE NUMBER OF CPU CORES FOR PACKET PROCESSING}
\\label{sec-3-2}
ディスパッチャは， CPU の負荷に応じて NDNx パケットの処理を行う CPU の
数を増減させる． CPU の数の増減は， 単純に CAT の HASH および TABLE ド
メインを書き換えることで行うことができる．つまり，新たな CPU コアを
NDNx パケット処理に使用したければ，その CPU コアに対応する CAT のエント
リの HASH と TABLE に値を書き込めば良い．反対に， CPU コアを NDNx パケッ
ト処理に使わないようにするには，その CPU コアに対応する CAT のエントリ
の HASH と TABLE を空にして，その内容を別のコアのエントリに追加すればよ
い．

\\section{PERFORMANCE}
\\label{sec-4}
% Emacs 24.3.1 (Org mode 8.2.6)
\\end{document}" #("

" 0 1 (fontified t) 1 2 (fontified t)) #("void " 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (fontified t)) #("int main() {" 0 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t) 4 8 (fontified t) 8 12 (fontified t)) #("class " 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t)) #("  Event();
" 0 2 (fontified t) 2 7 (face font-lock-function-name-face fontified t) 7 10 (fontified t) 10 11 (fontified t)) #("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) #("  private " 0 2 (fontified t) 2 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t)) #("time" 0 4 (fontified t)) #("int " 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t)) #("struc" 0 5 (fontified t)) #("if " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) #("*** COMMENT
 M は， CPU コアの個数を n とした時， 1 ・ 2......n-1 ・ n の最小公倍数
である． M が最小公倍数である理由は， NDNx パケットを処理する CPU の個
数を増減させた時に

" 0 2 (fontified t face org-level-3) 2 4 (fontified t face org-level-3) 4 11 (fontified t face org-special-keyword) 11 116 (fontified t) 116 117 (fontified t)) "% Created 2014-05-24 Sat 19:32
\\documentclass[a4j,10.5pt,uplatex,twocolumn]{jsarticle}
 \\usepackage[dvipdfmx]{graphicx}
 \\usepackage{color}
 \\usepackage{atbegshi}
 \\usepackage[dvipdfmx,bookmarks=true,linkcolor=blue]{hyperref}
 \\usepackage{pxjahyper}
 \\usepackage{bookmark}
 \\usepackage{url}
\\usepackage[top=10truemm,bottom=20truemm,left=15truemm,right=15truemm]{geometry}
\\author{大杉 海斗}
\\date{\\today}
\\title{NDNx パケットの並列処理を実現するルータの設計}
\\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.3.1 (Org mode 8.2.6)}}
\\begin{document}

\\maketitle

\\section{INTRODUCTION}
\\label{sec-1}
10Gb 回線を複数有する NDNx ルータでは， NDNx パケット入力レートの増加に
対応するため，マルチコア CPU で NDNx パケットを並列処理すると予想される．
しかしながら， NDNx/CCNx は，シングルスレッドのアプリケーションとして提
供されているため， NDNx/CCNx を実際に動作させて電力消費量の推定モデルを
作成することは困難である．そこで，我々は，マルチコア CPU を搭載したルー
タの消費電力モデルを作成するため，並列処理が可能な NDNx/CCNx ベースのルー
タの設計を行う．


\\section{REQUIREMENT AND APPROACH}
\\label{sec-2}
\\subsection{TABLE PARTITIONING}
\\label{sec-2-1}
NDNx/CCNx では， NPHT (Name Prefix Hash Table) などの複数のハッシュテー
ブルを用いて NDN の CS (Content Store) ・ FIB (Forwarding Information
Base) ・ PIT (Pending Interest Table) の機能を実現している． NDNx/CCNx
では， NDNx パケットを受け取る度に，これらのテーブルへのエントリの挿入
あるいは削除が行われる．したがって，並列で NDNx パケットを処理する時，
これらのテーブルを共有している場合は，排他制御が高い頻度で発生すると予
想される．これは， NDNx パケットをマルチコア CPU で並列処理することによ
る処理速度の向上を大幅に妨げることになる．これを解決するため，我々は，
NDNx/CCNx のすべてのハッシュテーブルおよびそのテーブルのエントリにアク
セスするためのインデックスを分割し，各 CPU コアが， 専有するテーブルに
排他的にアクセスできるようにする．分割の際には，共通する name prefix を
持つエントリは，必ず同じテーブルに含まれるようにする．これは， FIB の最
長一致検索を高速に行うために， NPHT のエントリが， name prefix の長さが
1 コンポネント短いエントリ (例えば，\"/a/b/c\"ならば\"/a/b\") に対して，リ
ンクを張るからである．

\\subsection{DYNAMIC ALLOCATION PARTITIONING TABLE TO CPU CORE}
\\label{sec-2-2}
低負荷時に CPU コアをスリープさせることで消費電力を削減するため， NDNx
パケット処理を行う CPU コアの数を増減させられる必要がある．これを実現す
るために，分割したテーブルにアクセスできる CPU コアを動的に変化させられ
るようにする．



\\section{ROUTER DESIGN}
\\label{sec-3}

\\subsection{DATA STRUCTURE}
\\label{sec-3-1}
NDNx/CCNx のすべてのハッシュテーブルおよびそのテーブルのエントリにアク
セスするためのインデックスを， M 個に分割する．また，図 fuga で示す
CAT (CPU ALLOCATION TABLE) を定義する．このテーブルは， CPU 番号・その
CPU がアクセス可能なテーブルへのリンク・ NDNx パケットの name の最初の
コンポーネント (以降， First Name Component と呼ぶ) のハッシュ値をペア
とするエントリで構成されるテーブルである．ディスパッチャは，このテーブ
ルを参照して， NDNx パケット処理をどの CPU コアに割り当てるかを決定する．


\\subsection{PACKET PROCESS}
\\label{sec-3-2}
図 hoge は，ルータにおける NDN パケットフローを示している． Core0 は，
NIC から 受け取った NDNx パケットを Core1 ・ 2 ・ 3 へディスパッチする．
Core0 は， First Name Component のハッシュ値によってどの Core にパケッ
トをディスパッチするか決定するため，ハッシュ値をキーとして， CAHT を探
索する． 探索によりエントリが発見された場合， NDNx パケット処理をエント
リ中の CPU 番号を持つ CPU コア へと割り当てする．エントリが発見できなかっ
た場合， NDN パケット処理を CPU 割り当てアルゴリズムにしたがって割り当
てる．そして， CAHT に新たなエントリを挿入する． CPU 割り当てアルゴリズ
ムに関してはここでは議論しない．

\\subsection{INCREASING/DECREASING THE NUMBER OF CPU CORES FOR PACKET PROCESSING}
\\label{sec-3-3}
Core0 は， CPU の負荷に応じて NDNx パケットの処理に使う CPU の数を増減
させる． CPU の数を増減する際には， CAT の書き変えを行う．
% Emacs 24.3.1 (Org mode 8.2.6)
\\end{document}" ".emacs.d/"))
(setq-default session-file-alist '(("/ssh:router@192.168.10.80:/home/router/accsess_memory.c" 408 55 1 nil nil 55 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 5517 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/research/utils/accsess_memory.c" 190 nil 1 nil nil 163 (overwrite-mode)) ("~/Dropbox/research/dispatcher_design_v2.org" 1498 1875 1 nil nil 1353 (overwrite-mode)) ("~/Dropbox/test.cpp" 89 nil 1 nil nil 76 (overwrite-mode)) ("~/Dropbox/research/dispatcher_design_v2.tex" 3438 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_design.org" 1072 1072 1 nil nil 2163 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/CCNx_data_structure.org" 112 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/meeting/M2-meeting.org" 1007 2182 1 nil nil 1862 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/var/recentf" 3797 nil 1 nil nil nil (overwrite-mode)) ("~/.config/awesome/rc.lua" 21857 17686 1 nil nil 17557 (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_design.tex" 2833 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140524.117/helm-autoloads.el" 47909 nil 1 nil nil 47909 (overwrite-mode)) ("/ssh:router@192.168.10.80:/home/router/test.c" 117 209 1 nil nil 117 (overwrite-mode)) ("/mnt/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/my_model_single-v4.2.py" 2085 1589 1 nil nil 4274 (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_algorism.txt" 1 456 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/research/dispatcher_design_structure.org" 42 nil 1 nil nil 32 (overwrite-mode)) ("/ssh:client1@192.168.10.85:/home/client1/send.c" 1 2440 1 nil nil 2410 (overwrite-mode)) ("/mnt/Dropbox/research/utils/test.c" 48 48 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140519/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/research/meeting/M2-meeting.tex" 63075 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/analytic_model.py" 2159 1673 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/lib/__init__.py" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/lib/functions.py" 639 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/20_org-mode.el" 1212 1166 1 nil nil 1233 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auctex-11.87.5/auctex-autoloads.el" 10917 nil 1 nil nil 10917 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/dash-20140523.547/dash-autoloads.el" 174 nil 1 nil nil 174 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140523.639/helm-autoloads.el" 47901 nil 1 nil nil 47901 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140519/org-autoloads.el" 27237 nil 1 nil nil 27237 (overwrite-mode)) ("/ssh:router@192.168.10.80:/home/router/hoge.c" 877 1305 1 nil nil 824 (overwrite-mode)) ("/mnt/Dropbox/research/utils/packet_forwarding/forwarding.c" 2470 2303 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/snippets/org-mode/report" 50 nil 1 nil nil 149 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/utils/dummy.c" 101 nil 1 nil nil 101 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/dispatcher_design.tex" 1067 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/CCNx_data_structure.tex" 7370 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/CCNx_data_structure.org" 1139 1068 1 nil nil 1100 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/M2-meeting.org" 90 75 1 nil nil 215 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140519.650/auto-complete-autoloads.el" 1711 nil 1 nil nil 1711 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140519.2133/helm-autoloads.el" 47865 nil 1 nil nil 47865 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140517.8/helm-autoloads.el" 47895 nil 1 nil nil 47895 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-complete-20140515.1959/auto-complete-autoloads.el" 1479 nil 1 nil nil 1479 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140515.1019/helm-autoloads.el" 47868 nil 1 nil nil 47868 (overwrite-mode)) ("/mnt/Dropbox/meeting/withHasegawa/GreenICN/M2-meeting.tex" 58722 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/url/cookies" 507 nil 1 nil nil nil (overwrite-mode)) ("/ssh:server1@192.168.10.90:/home/server1/receive.c" 299 2075 1 nil nil 343 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/yasnippet-20140514.1649/yasnippet-autoloads.el" 1494 nil 1 nil nil 1494 (overwrite-mode)) ("/mnt/Dropbox/research/calc_pps.sh" 5 nil 1 nil nil 6 (overwrite-mode)) ("~/256result.data" 1 1 1 nil nil 141 (overwrite-mode))))
(setq-default file-name-history '("/ssh:router@192.168.10.80:/home/router/accsess_memory.c" "~/Dropbox/research/utils/accsess_memory.c" "~/Dropbox/research/dispatcher_design_v2.org" "~/Dropbox/test.cpp" "~/.config/awesome/rc.lua" "~/Dropbox/research/dispatcher_design.org" "~/Dropbox/research/meeting/CCNx_data_structure.org" "~/Dropbox/research/meeting/M2-meeting.org" "~/.emacs.d/elpa/helm-20140524.117/helm-autoloads.el" "/home/k-ohsugi/Dropbox/research/dispatcher_design.org" "/home/k-ohsugi/Dropbox/research/dispatcher_design.tex" "/ssh:router@192.168.10.80:/home/router/test.c" "/home/k-ohsugi/Dropbox/research/meeting/M2-meeting.org" "/home/k-ohsugi/Dropbox/research/meeting/M2-meeting.tex" "/home/k-ohsugi/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/analytic_model.py" "/home/k-ohsugi/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/my_model_single-v4.2.py" "/home/k-ohsugi/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/lib/" "/home/k-ohsugi/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/lib/__init__.py" "/home/k-ohsugi/Dropbox/storage/presentation/graduation_thesis/tools4graduation/analysis_simulator/lib/functions.py" "/home/k-ohsugi/.emacs.d/inits/20_org-mode.el" "/home/k-ohsugi/.emacs.d/elpa/auctex-11.87.5/auctex-autoloads.el" "/home/k-ohsugi/.emacs.d/elpa/dash-20140523.547/dash-autoloads.el" "/home/k-ohsugi/.emacs.d/elpa/helm-20140523.639/helm-autoloads.el" "/home/k-ohsugi/.emacs.d/elpa/org-20140519/org-loaddefs.el" "/home/k-ohsugi/.emacs.d/elpa/org-20140519/org-autoloads.el" "/home/k-ohsugi/.emacs.d/elpa/archives/gnu/archive-contents" "/home/k-ohsugi/.emacs.d/elpa/archives/melpa/archive-contents" "/home/k-ohsugi/.emacs.d/elpa/archives/marmalade/archive-contents" "/home/k-ohsugi/Dropbox/research/dispatcher_algorism.txt" "/home/k-ohsugi/Dropbox/research/dispatcher_design_structure.org" "/tmp/packerbuild-1000/nautilus-dropbox/nautilus-dropbox/PKGBUILD" "/ssh:client1@192.168.10.85:/home/client1/send.c" "/home/k-ohsugi/hoge.c" "/ssh:router@192.168.10.80:/home/router/hoge.c" "/ssh:router@192.168.10.80:/home/router/" "/home/k-ohsugi/Dropbox/research/utils/test.c" "/home/k-ohsugi/Dropbox/research/utils/packet_forwarding/forwarding.c" "/home/k-ohsugi/.emacs.d/snippets/org-mode/report" "/home/k-ohsugi/.emacs.d/elpa/auto-complete-20140519.650/auto-complete-autoloads.el" "/home/k-ohsugi/.emacs.d/elpa/helm-20140519.2133/helm-autoloads.el" "/home/k-ohsugi/.config/awesome/rc.lua" "/ssh:server1@192.168.10.90:/home/server1/receive.c" "/sudo:root@VAIO:/ssh:client1@192.168.10.85:/home/client1/send.c" "/ssh:router@192.168.10.80:/home/router/forwarding.c" "/ssh:router@192.168.10.80:/home/" "/ssh:client1@192.168.10.85:/home/client1/" "/ssh:test@192.168.10.82:/home/test/test/test.c" "/ssh:test@192.168.10.82:/home/test/test/" "/ssh:test@192.168.10.82:/home/test/" "/ssh:test@192.168.10.82:/home/test/endless_loop.c" "/ssh:test@192.168.10.82:/home/test/Dispatcher/main.c" "/ssh:test@192.168.10.82:/home/test/Dispatcher/" "/ssh:test@192.168.10.82:/home/test/Dispatcher/myccnx.h" "/ssh:test@192.168.10.82:/home/test/Dispatcher/process_packet.c" "/ssh:test@192.168.10.82:/home/test/Dispatcher/dispatcher.c" "/ssh:k-ohsugi@133.1.244.3:/var/www/html/member_e.html" "/ssh:k-ohsugi@133.1.244.3:/var/www/html/member.html" "/ssh:k-ohsugi@133.1.244.3:/home/k-ohsugi/" "/ssh:k-ohsugi@monch.ics.es.osaka-u.ac.jp:/var/www/html/research_e.html" "/ssh:k-ohsugi@monch.ics.es.osaka-u.ac.jp:/var/www/html/research.html" "/ssh:k-ohsugi@monch.ics.es.osaka-u.ac.jp:/var/www/html/member.html" "/ssh:k-ohsugi@monch.ics.es.osaka-u.ac.jp:/var/www/html/member_e.html" "/ssh:k-ohsugi@monch.ics.es.osaka-u.ac.jp:/var/www/html/grad_e.html" "/ssh:k-ohsugi@monch.ics.es.osaka-u.ac.jp:/var/www/html/grad.html" "/ssh:k-ohsugi@monch.ics.es.osaka-u.ac.jp:/home/k-ohsugi/" "/sudo:root@VAIO:/etc/acpi/actions/handler.sh" "/sudo:root@VAIO:/etc/default/grub" "/sudo:root@VAIO:/boot/grub/" "/sudo:root@VAIO:/boot/grub/grub.cfg" "/sudo:root@localhost:/etc/fstab" "/etc/fstab" "/sudo:root@desktop:/usr/share/eclipse/eclipse.ini" "/etc/" "/sudo:root@desktop:/home/k-ohsugi/.xinitrc" "/sudo:root@desktop:/etc/slim.conf" "/sudo:root@desktop:/mnt/Windows8/Windows8.vmx" "/sudo:root@desktop:/etc/X11/xorg.conf.d/50-vmgraphics.conf.bak" "/sudo:root@desktop:/etc/X11/xorg.conf.d/" "/sudo:root@desktop:/etc/X11/xorg.conf.d/50-vmmouse.conf" "/sudo:root@desktop:/etc/BitDefender-scanner/bdgui.conf" "/var/log/Xorg.0.log" "/var/log/pacman.log" "/sudo:root@laptop:/etc/pacman.d/mirrorlist" "/etc/grub.d/40_custom" "/sudo:root@desktop:/etc/xdg/awesome/rc.lua" "/sudo:root@desktop:/home/k-ohsugi/.config/awesome/rc.lua" "/etc/X11/xinit/xinitrc" "/sudo:root@localhost:/usr/share/texmf/web2c/texmf.cnf" "/sudo:root@localhost:/etc/X11/xorg.conf.d/20-gpudriver.conf" "/sudo:root@localhost:/etc/X11/xorg.conf.d/" "/" "/home/"))
(setq-default TeX-command-history '("LatexMk" "Clean All" "Evince"))
(setq-default buffer-name-history '("*Org PDF LaTeX Output*" "__init__.py" "functions.py" "PKGBUILD" "ssh:hoge.c" "forwarding.c" "dummy.c" "256result.data" "ssh:receive.c" "ssh:ssh:ssh:send.c<client1>" "router" "rdtsc.h" "*Packages*" "*Macroexpansion*" "2-13 Daring!!.mp3" "*Backtrace*" "20_org-mode.el" "hote.txt" "es.org" "*init log*"))
(setq-default coding-system-history '("shift_jis" "utf-8-unix" "unix"))
(setq-default command-history '((find-file "~/Dropbox/research/utils/accsess_memory.c" t) (find-file "~/Dropbox/research/dispatcher_design_v2.org" t) (find-file "~/Dropbox/test.cpp" t) (find-file "~/Dropbox/research/dispatcher_design.org" t) (find-file "~/Dropbox/research/meeting/CCNx_data_structure.org" t) (find-file "~/Dropbox/research/meeting/M2-meeting.org" t) (package-list-packages nil) (find-file "~/.config/awesome/rc.lua" t)))
(setq-default extended-command-history '("package-list-packages" "ispell-buffer" "eval-buffer" "count-lines-region" "describe-variable" "describe-function" "auto-complete-mode" "describe-mode" "Buffer-menu-mode" "describe-key" "eval-defun" "pascal-mode"))
(setq-default helm-c-grep-history '("valid-file" "filename"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . kill-region) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-ff-history '("/home/k-ohsugi/Dropbox/meeting/withHasegawa/GreenICN/utils/"))
(setq-default helm-grep-history '("valid-file" "filename"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-comint-input-ring '((name . "Comint history") (candidates lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) (action . helm-comint-input-ring-action)))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (triple-mouse-3 . ignore) (double-mouse-3 . ignore) (mouse-3 . ignore) (drag-mouse-3 . ignore) (down-mouse-3 . ignore) (triple-mouse-2 . ignore) (double-mouse-2 . ignore) (mouse-2 . ignore) (drag-mouse-2 . ignore) (down-mouse-2 . ignore) (triple-mouse-1 . ignore) (double-mouse-1 . ignore) (mouse-1 . ignore) (drag-mouse-1 . ignore) (down-mouse-1 . ignore) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . kill-region) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("ssh" "rc.lua" "pack" "rc" "org" "out" "my" "org 20" #("NDNx/CCNx" 0 1 (fontified t) 1 8 (fontified t) 8 9 (fontified t)) "ispell" "send" "dropbox" #("回線を複数有する" 0 1 (fontified t org-category #1="dispatcher_design") 1 7 (fontified t org-category #1#) 7 8 (fontified t org-category #1#)) #("+LATEX_CLASS_OPTIONS" 0 20 (face org-meta-line font-lock-fontified t fontified t)) "org-mode" "report" "tex" "eva" "-------" "eval" #("10pt" 0 4 (face org-meta-line font-lock-fontified t fontified t)) #("概要" 0 2 (face org-level-2 fontified t)) "m2" #("dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd" 0 1472 (face font-lock-string-face fontified t c-in-sws t)) "server" "co" "ssh cl" "sum" "2" "sc" "sen" #("COUNT" 0 5 (fontified t)) "ssh ser" #("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" 0 256 (fontified t face font-lock-string-face c-in-sws t)) #("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" 0 2561 (fontified t face font-lock-string-face c-in-sws t)) #("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb" 0 1472 (fontified t face font-lock-string-face c-in-sws t)) ".c" "pac" "dis" "end" "rc."))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("COUNT" "NPARA" "50000" "10000" "45" "50" "research_2014_group_001-ccn.pdf" "research_group_001-icn.pdf" "M1" "B4" "M" "M2" "Master" "Doctor" "D3" "./figure/" "./"))
(setq-default search-ring '("spawn" "sa" "fig" "prec" "prefc" "cha" "list" "A" "whole" "proba" "probabili" "delay" "redu" "make" "jsar" "center"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
