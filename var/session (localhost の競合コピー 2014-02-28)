;;; Automatically generated on Fri Feb 28 08:26:12 2014
;;; Invoked by k-ohsugi@localhost using 24.3.1
(setq-default kill-ring '(#("スマートシティの設計に挑戦したいです．街全体がシステム化領域であるとい
う規模の大きさと，重要インフラの構築に携われるというやりがいが魅力的だ
と感じるからです．街に住む人すべてがユーザであるため，障害が発生してし
まうと広範囲の人々に大きな影響を与えてしまいます．そのため，システムの
頑強性や拡張性に細心の注意を払う必要があり，大きなプレッシャーとなりま
すが，その分多くのノウハウと仕事の重要性を学ぶことができると思います．
さらに，スマートシティは様々な国で導入されると予想されるため，国内外を
問わず活躍できるような人材へと成長していけるという点にも挑戦する意義を
感じます．" 0 108 (fontified t) 108 293 (fontified t)) #("キャリアパスの選択肢の幅広さが魅力的だと思います．私は，大学と大学院で
情報技術について学んできたため，学んだことを活かして研究開発に進む道が
考えられます．一方で，フレッツ光の契約スタッフのアルバイトで，お客様と
相談をしながら仕事を進めた経験から，営業や SE にも興味を持っています．
貴社には，社内公募制度など社員が自分のやりたい仕事に就けるような環境が
整えられており，働く中で自分の仕事への適性が分かった時にも，柔軟にキャ
リアパスを変更できると考えました．さらに，社内研修が充実していると OB
の方々から聞いており，大きく成長できる環境であるということも魅力的だと
感じました．" 0 297 (fontified t)) #("一番苦労したことは学部時代における卒業研究です．卒業研究では，次世代ネッ
トワークにおけるルータのキャッシュ性能解析と，解析結果の妥当性検証を行
いました．しかし，どうすれば他人に解析結果を妥当であると納得してもらえ
るかが問題となりました．そこで，私は 2 つの評価尺度を用い，複数の観点か
ら解析結果の妥当性を述べることで，研究内容をより他人に理解してもらえる
ように工夫し，この問題を解決しました．
" 0 23 (fontified t) 23 24 (fontified t) 24 30 (fontified t) 30 31 (fontified t) 31 36 (fontified t) 36 37 (fontified t) 37 59 (fontified t) 59 60 (fontified t) 60 72 (fontified t) 72 73 (fontified t) 73 77 (fontified t) 77 78 (fontified t) 78 81 (fontified t) 81 82 (fontified t) 82 108 (fontified t) 108 109 (fontified t) 109 112 (fontified t) 112 120 (fontified t) 120 121 (fontified t) 121 124 (fontified t) 124 125 (fontified t) 125 126 (fontified t) 126 127 (fontified t) 127 128 (fontified t) 128 129 (fontified t) 129 130 (fontified t) 130 131 (fontified t) 131 139 (fontified t) 139 140 (fontified t) 140 146 (fontified t) 146 147 (fontified t) 147 157 (fontified t) 157 163 (fontified t) 163 164 (fontified t) 164 182 (fontified t) 182 183 (fontified t) 183 189 (fontified t) 189 190 (fontified t) 190 201 (fontified t) 201 203 (fontified t)) #("自分が取り組むことについて理解し，納得した上で実行することです．人に指
示されたことにただ従うだけでは，指示される前に行動が起こせる人間に成長
することはできません．自ら先頭に立って変革を起こすためには，指示される
前に行動を起こせることが絶対不可欠な条件であると考えます．さらに，もし
も他人に指示されたことを納得しないままに実行し， 実行したことが上手く行
かなかった時には，自分の責任を認めたくないという心境に陥ってしまうと思
います．そのため，私は，自分で考えたことでも，他人に指示されたことでも
「なぜそれを行う必要があるのか」を常に考えることにしています．" 0 35 (fontified t) 35 36 (fontified t) 36 71 (fontified t) 71 72 (fontified t) 72 107 (fontified t) 107 108 (fontified t) 108 143 (fontified t) 143 144 (fontified t) 144 180 (fontified t) 180 181 (fontified t) 181 216 (fontified t) 216 217 (fontified t) 217 220 (fontified t) 220 252 (fontified t) 252 253 (fontified t) 253 284 (fontified t)) #("- 
- " 0 2 (fontified t) 2 3 (fontified t) 3 5 (fontified t)) #("卒業論文に一番苦労しました．卒業論文では，次世代ネットワークにおけるルー
タのキャッシュ性能を解析し，模擬実験の結果と比較することで，解析結果の
妥当性検証を行うことにしました．しかし，解析と模擬実験の結果がどのよう
な状態であれば，解析が妥当と言えるかが問題となりました．そこで，解析と
模擬実験の絶対的な差と相対的な差の 2 つの指標で検証を行うことにし，この
問題を解決できました．

" 0 36 (fontified t) 36 37 (fontified t) 37 72 (fontified t) 72 73 (fontified t) 73 108 (fontified t) 108 109 (fontified t) 109 144 (fontified t) 144 145 (fontified t) 145 182 (fontified t) 182 183 (fontified t) 183 194 (fontified t) 194 195 (fontified t) 195 196 (fontified t)) "一番苦労したことは学部時代における卒業研究です。
卒業研究では、次世代ネットワークにおけるルータのキャッシュ性能解析と、
解析結果の妥当性検証を行いました。
しかし、どうすれば他人に解析結果を妥当であると納得してもらえるかが
問題となりました。
そこで、私は 2 つの評価尺度を用い、複数の観点から解析結果の妥当性を
述べることで、研究内容をより他人に理解してもらえるように工夫し、
この問題を解決しました。" #("から" 0 2 (fontified t))))
(setq-default session-file-alist '(("/mnt/Dropbox/configure/.emacs.d/var/recentf" 13218 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/job_hunting/NTTDATA/es.org" 1388 1095 1 nil nil 574 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/url/cookies" 511 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/etc/company_information/company_info.org" 689 689 1 nil nil 1166 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/HITACHI/es.org" 1150 8 1 nil nil 1636 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/NRI/es.org" 1 203 1 nil nil 208 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/auto-async-byte-compile-20140212.2212/auto-async-byte-compile-autoloads.el" 230 nil 1 nil nil 230 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140212.2210/helm-autoloads.el" 45075 nil 1 nil nil 45075 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/FUTURE_Architect/es.org" 420 371 1 nil nil 271 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140210/org-loaddefs.el" 86896 nil 1 nil nil 86896 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140210.744/helm-autoloads.el" 45072 nil 1 nil nil 45072 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140210/org-autoloads.el" 27236 nil 1 nil nil 27236 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/ALL/resarch_introduction.org" 407 9 1 nil nil 5 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/ALL/PR.org" 341 nil 1 nil nil 341 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/ALL/MyPR.txt" 3 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/job_hunting/SIGMAXYZ/es.org" 67 134 1 nil nil 67 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/CAPCOM/es.org" 544 318 1 nil nil 469 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/CAPCOM/es.tex" 1234 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140204.533/helm-autoloads.el" 44444 nil 1 nil nil 44444 (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/report.org" 157 1820 1 nil nil 157 (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/report.bib" 703 701 1 nil nil 703 (overwrite-mode)) ("/mnt/Dropbox/class/network_seminar2/report.tex" 29 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140204.23/helm-autoloads.el" 44452 nil 1 nil nil 44452 (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report8/report8.org" 1176 1126 1 nil nil 1052 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140203.2259/helm-autoloads.el" 44449 nil 1 nil nil 44449 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140203.848/helm-autoloads.el" 44452 nil 1 nil nil 44452 (overwrite-mode)) ("~/カプコン.txt" 1 nil 1 nil nil 1 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/HITACHI/es.tex" 895 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140203/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/helm-20140203.402/helm-autoloads.el" 44451 nil 1 nil nil 44451 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/elpa/org-20140203/org-autoloads.el" 27238 nil 1 nil nil 27238 (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report8/report8.tex" 1443 1443 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report8/report8.bib" 272 231 1 nil nil 272 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/30_auctex.el" 1 736 1 nil nil 736 (overwrite-mode)) ("/mnt/Dropbox/configure/.emacs.d/inits/20_org-mode.el" 394 374 1 nil nil 489 (overwrite-mode)) ("/sudo:root@localhost:/usr/share/texmf-dist/tex/uplatex/base/ujarticle.cls" 1 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report6/report6.org" 364 nil 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report7/report7.org" 1 nil 1 nil nil 603 (overwrite-mode)) ("/mnt/Dropbox/class/basic_network/report6/report6.org" 532 nil 1 nil nil 19 (overwrite-mode)) ("/sudo:root@localhost:/usr/share/texmf-dist/tex/platex/jsclasses/jsarticle.cls" 6877 641 1 nil nil nil (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report6/report6.bib" 1 nil 1 nil nil 113 (overwrite-mode)) ("/mnt/Dropbox/class/mobile_protocol/report6/report6.tex" 1617 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/class/network_seminar2/report.org" 157 nil 1 nil nil 157 (overwrite-mode)) ("~/Dropbox/job_hunting/HITACHI/es.org" 3 nil 1 nil nil 222 (overwrite-mode)) ("~/Dropbox/configure/.emacs.d/var/recentf" 12904 nil 1 nil nil nil (overwrite-mode)) ("~/Dropbox/class/network_seminar2/report.tex" 2529 nil 1 nil nil nil (overwrite-mode)) ("~/Downloads/質疑応答.txt" 41 16 1 nil nil 581 (overwrite-mode)) ("/mnt/Dropbox/job_hunting/ALL/resarch_introduction.txt" 1 1163 1 nil nil 1132 (overwrite-mode))))
(setq-default file-name-history '("~/Dropbox/job_hunting/NTTDATA/es.org" "~/Dropbox/etc/company_information/company_info.org" "~/Dropbox/job_hunting/HITACHI/es.org" "~/Dropbox/job_hunting/NRI/es.org" "~/Dropbox/job_hunting/NRI" "~/Dropbox/job_hunting/" "~/.emacs.d/elpa/auto-async-byte-compile-20140212.2212/auto-async-byte-compile-autoloads.el" "~/.emacs.d/elpa/helm-20140212.2210/helm-autoloads.el" "/home/k-ohsugi/ogis_web_assignment.txt" "~/Dropbox/job_hunting/FUTURE_Architect/es.org" "~/Dropbox/job_hunting/FUTURE_Architect/" "~/Dropbox/m" "~/.emacs.d/elpa/helm-20140210.744/helm-autoloads.el" "~/.emacs.d/elpa/org-20140210/org-loaddefs.el" "~/.emacs.d/elpa/org-20140210/org-autoloads.el" "~/Dropbox/job_hunting/ALL/resarch_introduction.org" "~/Dropbox/job_hunting/ALL/PR.org" "~/Dropbox/job_hunting/ALL/MyPR.txt" "~/Dropbox/job_hunting/SIGMAXYZ/es.org" "~/Dropbox/job_hunting/SIGMAXYZ" "~/Dropbox/job_hunting/CAPCOM/es.org" "~/.emacs.d/elpa/helm-20140204.533/helm-autoloads.el" "~/Dropbox/class/network_seminar2/report.tex" "~/Dropbox/class/network_seminar2/report.bib" "~/Dropbox/class/network_seminar2/report.org" "~/.emacs.d/elpa/helm-20140204.23/helm-autoloads.el" "~/Dropbox/class/mobile_protocol/report8/report8.org" "~/.emacs.d/elpa/helm-20140203.2259/helm-autoloads.el" "~/.emacs.d/elpa/helm-20140203.848/helm-autoloads.el" "~/Dropbox/job_hunting/CAPCOM" "/home/k-ohsugi/カプコン.txt"))
(setq-default TeX-command-history '("Clean All" "LatexMk" "Evince" "Latexmk-pdfupLaTeX" "LaTeX" "BibTeX" "Acroread"))
(setq-default bibtex-key-history '("matsuishi" "green" "nttpc" "lever12:_fi" "somusho19" "zojirushi" "政策統括官（共生社会政策担当）13" "tsuda13"))
(setq-default buffer-name-history '("jsarticle.cls" "*new snippet*" "*Moccur*" "ac-math.el" "*Backtrace*" "131224_all_meeting.rip" "comic-list.org" "*init log*" "*Org Src 131216_M1_meeting.org[ python ]*" "*scratch*" "*Org Table Edit Field*" "131216_M1_meeting.html"))
(setq-default command-history '((find-file "~/Dropbox/job_hunting/NTTDATA/es.org" t) (find-file "~/Dropbox/job_hunting/NRI/es.org" t) (dired-create-directory "~/Dropbox/job_hunting/NRI") (find-file "~/Dropbox/job_hunting/" t) (find-file "~/Dropbox/job_hunting/HITACHI/es.org" t) (find-file "~/Dropbox/job_hunting/FUTURE_Architect/" t) (find-file "~/Dropbox/m" t) (find-file "~/Dropbox/job_hunting/ALL/resarch_introduction.org" t) (find-file "~/Dropbox/job_hunting/ALL/PR.org" t) (find-file "~/Dropbox/job_hunting/ALL/MyPR.txt" t) (find-file "~/Dropbox/job_hunting/SIGMAXYZ/es.org" t) (dired-create-directory "~/Dropbox/job_hunting/SIGMAXYZ") (query-replace "元" "源" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end))) (find-file "~/Dropbox/class/network_seminar2/report.tex" t) (find-file "~/Dropbox/class/network_seminar2/report.bib" t) (find-file "~/Dropbox/job_hunting/CAPCOM/es.org" t) (dired-create-directory "~/Dropbox/job_hunting/CAPCOM") (kill-buffer "jsarticle.cls") (find-file "~/Dropbox/class/mobile_protocol/report8/report8.tex" t) (write-file "~/Dropbox/class/mobile_protocol/report8/report8.bib" t) (find-file "~/Dropbox/class/mobile_protocol/report7/report7.bib" t) (find-file "~/Downloads/質疑応答.txt" t) (find-file "~/Dropbox/class/network_seminar2/report.org" t) (find-file "~/Dropbox/job_hunting/ALL/resarch_introduction.txt" t) (kill-buffer "*new snippet*") (find-file "~/.emacs.d/inits/" t) (find-file "~/.emacs.d/inits/10_helm.el" t) (package-list-packages nil) (execute-extended-command nil "package-list-packages") (find-file "~/Dropbox/class/mobile_protocol/report6/report6.org" t) (find-file "~/Dropbox/class/mobile_protocol/" t)))
(setq-default extended-command-history '("package-list-packages" "count-lines-region" "text-adjust" "auto-insert-mode" "eval-buffer" "ispell-buffer" "ispell-minor-mode" "flyspell-mode" "elp-results" "moccur-grep" "count-words-region" "org-display-inline-images" "org-toggle-inline-images" "org-redisplay-inline-images" "org-edit-src-code" "describe-key" "org-src-mode" "org-version" "pascal-mode"))
(setq-default helm-c-grep-history '("interest" "yasnippet" "k-ohsugi" "wpa_pass" "wpa_passp" "icon"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . previous-line) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-grep-history '("interest" "yasnippet" "k-ohsugi" "wpa_pass" "wpa_passp" "icon"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 . delete-backward-char) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (1 . all-from-helm-occur) (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (117 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (26 . undefined) (18 . helm-minibuffer-history) (S-tab . zlc-select-previous) (backtab . zlc-select-previous) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . previous-line) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) (persistent-help . "Show this line")))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("pa" #("ように工夫し，この問題を解決しました．" 0 6 (fontified t) 6 7 (fontified t) 7 18 (fontified t) 18 19 (fontified t)) #("一番苦労したことは学部時代における卒業研究です．卒業研究では，次世代ネッ" 0 23 (fontified t) 23 24 (fontified t) 24 30 (fontified t) 30 31 (fontified t) 31 36 (fontified t)) #("ように工夫し、この問題を解決しました。" 0 7 (fontified t) 7 18 (fontified t) 18 19 (fontified t rear-nonsticky t)) "org" #("義を感じます．" 0 1 (fontified t) 1 4 (fontified t) 4 5 (fontified t) 5 7 (fontified t)) #("にも挑戦する意義を感じます．" 0 2 (fontified t) 2 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 11 (fontified t) 11 12 (fontified t) 12 14 (fontified t)) #("ます．" 0 1 (fontified t) 1 3 (fontified t)) #("意義を感じます．" 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t) 6 8 (fontified t)) #("材へと成長していけるという点にも挑戦する意義を感じます．" 0 3 (fontified t) 3 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 16 (fontified t) 16 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 25 (fontified t) 25 26 (fontified t) 26 28 (fontified t)) #("躍できるような人材へと成長していけるという点にも挑戦する意義を感じます．" 0 1 (fontified t) 1 4 (fontified t) 4 11 (fontified t) 11 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 24 (fontified t) 24 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 33 (fontified t) 33 34 (fontified t) 34 36 (fontified t)) #("にもチャレンジする意義を感じます．" 0 2 (fontified t) 2 9 (fontified t) 9 10 (fontified t) 10 14 (fontified t) 14 17 (fontified t)) #("ます．" 0 3 (fontified t)) #("けるという点にもチャレンジする意義を感じます．" 0 1 (fontified t) 1 2 (fontified t) 2 4 (fontified t) 4 5 (fontified t) 5 8 (fontified t) 8 15 (fontified t) 15 16 (fontified t) 16 23 (fontified t)) #("るという点にもチャレンジする意義を感じます．" 0 1 (fontified t) 1 3 (fontified t) 3 4 (fontified t) 4 7 (fontified t) 7 14 (fontified t) 14 15 (fontified t) 15 22 (fontified t)) #("せることができました．" 0 8 (fontified t) 8 10 (fontified t) 10 11 (fontified t)) #("卒業論文に一番苦労しました．ルータのキャッシュ性能を解析し，その解析結" 0 35 (fontified t)) #("を常に考えることにしています．" 0 8 (fontified t) 8 15 (fontified t)) #("う点にもチャレンジする意義を感じます．" 0 1 (fontified t) 1 4 (fontified t) 4 11 (fontified t) 11 19 (fontified t)) "-------" #("キャリアパスの選択肢の幅広さが魅力的だと思います．私は，大学と大学院で" 0 24 (fontified t org-category "es") 24 25 (fontified t) 25 27 (fontified t) 27 28 (fontified t) 28 30 (fontified t) 30 35 (fontified t)) #("**" 0 1 (fontified t org-category #1="es" face org-level-2) 1 2 (fontified t org-category #1# face org-level-2)) #("スマートシティの設計に挑戦したいです．" 0 19 (fontified t)) "org " #("かすことができ，" 0 7 (fontified t) 7 8 (fontified t)) #("に苦労しました．この失敗を踏まえて" 0 7 (fontified t org-category "es") 7 17 (fontified t)) #("*" 0 1 (fontified t face org-level-1)) "org com" "hitachi" "org es" "p"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("源" "元" "サーバ" "サーバー" "ルータ" "ルーター" "CCN" "ICN" "right" "left" "right_wibox" "left_graphbox" "face" "Face"))
(setq-default read-expression-history '("ac-sources"))
(setq-default regexp-history '("noncq" "volicon" "cpupct" "/etc/acpi/"))
(setq-default search-ring '("通して、" "undo" "利用" "元" "uplatex" "yasnippet" "helm-c" "helm-c-ya" "helm-c	" "を" "ルーター" "サーバー" "scrip" "seq" "data" "端末"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
